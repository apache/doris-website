"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["122674"],{200045:function(e,n,l){l.r(n),l.d(n,{default:()=>u,frontMatter:()=>t,metadata:()=>i,assets:()=>r,toc:()=>o,contentTitle:()=>d});var i=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/numeric/DECIMAL","title":"DECIMAL","description":"DECIMAL","source":"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/sql-manual/basic-element/sql-data-types/numeric/DECIMAL.md","sourceDirName":"sql-manual/basic-element/sql-data-types/numeric","slug":"/sql-manual/basic-element/sql-data-types/numeric/DECIMAL","permalink":"/zh-CN/docs/dev/sql-manual/basic-element/sql-data-types/numeric/DECIMAL","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"DECIMAL","language":"zh-CN"},"sidebar":"docs","previous":{"title":"LARGEINT","permalink":"/zh-CN/docs/dev/sql-manual/basic-element/sql-data-types/numeric/LARGEINT"},"next":{"title":"\u6D6E\u70B9\u7C7B\u578B (FLOAT \u548C DOUBLE)","permalink":"/zh-CN/docs/dev/sql-manual/basic-element/sql-data-types/numeric/FLOATING-POINT"}}'),s=l("785893"),c=l("250065");let t={title:"DECIMAL",language:"zh-CN"},d=void 0,r={},o=[{value:"DECIMAL",id:"decimal",level:2},{value:"\u63CF\u8FF0",id:"\u63CF\u8FF0",level:2},{value:"\u7CBE\u5EA6\u63A8\u6F14",id:"\u7CBE\u5EA6\u63A8\u6F14",level:3},{value:"\u56DB\u5219\u8FD0\u7B97",id:"\u56DB\u5219\u8FD0\u7B97",level:4},{value:"\u793A\u4F8B",id:"\u793A\u4F8B",level:5},{value:"\u4E58\u6CD5\u4E0D\u6EA2\u51FA",id:"\u4E58\u6CD5\u4E0D\u6EA2\u51FA",level:6},{value:"\u4E58\u6CD5\u6EA2\u51FA\u89C4\u5219",id:"\u4E58\u6CD5\u6EA2\u51FA\u89C4\u5219",level:6},{value:"\u4E58\u6CD5\u6EA2\u51FA\u65F6\u5F00\u542Fdecimal256",id:"\u4E58\u6CD5\u6EA2\u51FA\u65F6\u5F00\u542Fdecimal256",level:6},{value:"\u9664\u6CD5\u4E0D\u6EA2\u51FA",id:"\u9664\u6CD5\u4E0D\u6EA2\u51FA",level:6},{value:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52191",id:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52191",level:6},{value:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52192",id:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52192",level:6},{value:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52193",id:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52193",level:6},{value:"\u805A\u5408\u8FD0\u7B97",id:"\u805A\u5408\u8FD0\u7B97",level:4},{value:"\u9ED8\u8BA4\u89C4\u5219",id:"\u9ED8\u8BA4\u89C4\u5219",level:4},{value:"\u8C03\u6574\u7ED3\u679C\u7CBE\u5EA6",id:"\u8C03\u6574\u7ED3\u679C\u7CBE\u5EA6",level:4},{value:"\u4E3A\u4EC0\u4E48\u9700\u8981 DECIMAL",id:"\u4E3A\u4EC0\u4E48\u9700\u8981-decimal",level:3},{value:"keywords",id:"keywords",level:3}];function a(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"decimal",children:"DECIMAL"}),"\n",(0,s.jsx)(n.p,{children:"DECIMAL"}),"\n",(0,s.jsx)(n.h2,{id:"\u63CF\u8FF0",children:"\u63CF\u8FF0"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DECIMAL(P[,S])\n\u9AD8\u7CBE\u5EA6\u5B9A\u70B9\u6570\uFF0CP \u4EE3\u8868\u4E00\u5171\u6709\u591A\u5C11\u4E2A\u6709\u6548\u6570\u5B57(precision)\uFF0CS \u4EE3\u8868\u5C0F\u6570\u4F4D\u6709\u591A\u5C11\u6570\u5B57(scale)\u3002\n\u6709\u6548\u6570\u5B57 P \u7684\u8303\u56F4\u662F [1, MAX_P]\uFF0Cenable_decimal256=false\u65F6\uFF0CMAX_P=38, enable_decimal256=true\u65F6\uFF0CMAX_P=76\u3002\n\u5C0F\u6570\u4F4D\u6570\u5B57\u6570\u91CF S \u7684\u8303\u56F4\u662F [0, P]\u3002\n\nP\u9ED8\u8BA4\u503C\u662F38\uFF0CS\u9ED8\u8BA4\u662F9\uFF08DECIMAL(38, 9)\uFF09\u3002\n\nenable_decimal256 \u7684\u9ED8\u8BA4\u503C\u662Ffalse\uFF0C\u8BBE\u7F6E\u4E3Atrue \u53EF\u4EE5\u83B7\u5F97\u66F4\u52A0\u7CBE\u786E\u7684\u7ED3\u679C\uFF0C\u4F46\u662F\u4F1A\u5E26\u6765\u4E00\u4E9B\u6027\u80FD\u635F\u5931\u3002\n\ndecimal\u7C7B\u578B\u5728\u8F93\u51FA\u65F6\uFF0C\u5C0F\u6570\u70B9\u540E\u603B\u662F\u663E\u793AS\u4F4D\u6570\u5B57\uFF0C\u5373\u4F7F\u5C0F\u6570\u7684\u540E\u7F00\u662F0\u3002\u6BD4\u5982\u7C7B\u578Bdecimal(18, 6)\u7684\u6570\u5B57123.456\uFF0C\u4F1A\u8F93\u51FA\u6210123.456000\u3002\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u7CBE\u5EA6\u63A8\u6F14",children:"\u7CBE\u5EA6\u63A8\u6F14"}),"\n",(0,s.jsx)(n.p,{children:"DECIMAL \u6709\u4E00\u5957\u5F88\u590D\u6742\u7684\u7C7B\u578B\u63A8\u6F14\u89C4\u5219\uFF0C\u9488\u5BF9\u4E0D\u540C\u7684\u8868\u8FBE\u5F0F\uFF0C\u4F1A\u5E94\u7528\u4E0D\u540C\u89C4\u5219\u8FDB\u884C\u7CBE\u5EA6\u63A8\u65AD\u3002"}),"\n",(0,s.jsx)(n.h4,{id:"\u56DB\u5219\u8FD0\u7B97",children:"\u56DB\u5219\u8FD0\u7B97"}),"\n",(0,s.jsx)(n.p,{children:"\u5047\u5B9Ae1(p1, s1)\u548Ce2(p2, s2)\u662F\u4E24\u4E2ADECIMAL\u7C7B\u578B\u7684\u6570\u5B57\uFF0C\u8FD0\u7B97\u7ED3\u679C\u7CBE\u5EA6\u63A8\u6F14\u89C4\u5219\u5982\u4E0B\uFF1A"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"\u8FD0\u7B97"}),(0,s.jsx)(n.th,{children:"\u7ED3\u679Cprecision"}),(0,s.jsx)(n.th,{children:"\u7ED3\u679Cscale"}),(0,s.jsx)(n.th,{children:"\u6EA2\u51FA\u65F6\u7ED3\u679Cprecision"}),(0,s.jsx)(n.th,{children:"\u6EA2\u51FA\u65F6\u7ED3\u679Cscale"}),(0,s.jsx)(n.th,{children:"\u4E2D\u95F4\u7ED3\u679Ce1\u7C7B\u578B"}),(0,s.jsx)(n.th,{children:"\u4E2D\u95F4e2\u7C7B\u578B"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"e1 + e2"}),(0,s.jsx)(n.td,{children:"max(p1 - s1,p2 - s2) + max(s1, s2) + 1"}),(0,s.jsx)(n.td,{children:"max(s1, s2)"}),(0,s.jsx)(n.td,{children:"MAX_P"}),(0,s.jsx)(n.td,{children:"min(MAX_P, p) - max(p1 - s1,p2 - s2)"}),(0,s.jsx)(n.td,{children:"\u6309\u7167\u7ED3\u679Ccast"}),(0,s.jsx)(n.td,{children:"\u6309\u7167\u7ED3\u679Ccast"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"e1 - e2"}),(0,s.jsx)(n.td,{children:"max(p1 - s1,p2 - s2) + max(s1, s2) + 1"}),(0,s.jsx)(n.td,{children:"max(s1, s2)"}),(0,s.jsx)(n.td,{children:"MAX_P"}),(0,s.jsx)(n.td,{children:"min(MAX_P, p) - max(p1 - s1,p2 - s2)"}),(0,s.jsx)(n.td,{children:"\u6309\u7167\u7ED3\u679Ccast"}),(0,s.jsx)(n.td,{children:"\u6309\u7167\u7ED3\u679Ccast"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"e1 * e2"}),(0,s.jsx)(n.td,{children:"p1 + p2"}),(0,s.jsx)(n.td,{children:"s1 + s2"}),(0,s.jsx)(n.td,{children:"MAX_P"}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.ol,{children:[(0,s.jsxs)(n.li,{children:["precision - scale < MAX_P - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF1Amin(scale, MAX_P - (precision - scale))"]}),(0,s.jsxs)(n.li,{children:["precision - scale > MAX_P - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u4E14scale < ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF1As1 + s2"]}),(0,s.jsxs)(n.li,{children:["precision - scale > MAX_P - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0Cscale >= ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF1A",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})]})]})}),(0,s.jsx)(n.td,{children:"\u4E0D\u53D8"}),(0,s.jsx)(n.td,{children:"\u4E0D\u53D8"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"e1 / e2"}),(0,s.jsxs)(n.td,{children:["p1 + s2 + ",(0,s.jsx)(n.code,{children:"div_precision_increment"})]}),(0,s.jsxs)(n.td,{children:["s1 + ",(0,s.jsx)(n.code,{children:"div_precision_increment"})]}),(0,s.jsx)(n.td,{children:"MAX_P"}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.ol,{children:[(0,s.jsxs)(n.li,{children:["precision - s1\u5C0F\u4E8EMAX_P - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF1A(MAX_P - (precision - s1))+  ",(0,s.jsx)(n.code,{children:"div_precision_increment"})]}),(0,s.jsxs)(n.li,{children:["precision - s1\u5927\u4E8EMAX_P - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u4E14s1\u5C0F\u4E8E",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF1As1 +  ",(0,s.jsx)(n.code,{children:"div_precision_increment"})]}),(0,s.jsxs)(n.li,{children:["precision - s1\u5927\u4E8EMAX_P - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u4E14s1\u5927\u4E8E\u7B49\u4E8E",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF1A",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," +  ",(0,s.jsx)(n.code,{children:"div_precision_increment"})]})]})}),(0,s.jsx)(n.td,{children:"p\u6309\u7167\u7ED3\u679Ccast\uFF0Cs\u6309\u7167\u7ED3\u679C+e2.scale cast"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"e1 % e2"}),(0,s.jsx)(n.td,{children:"max(p1 - s1,p2 - s2) + max(s1, s2)"}),(0,s.jsx)(n.td,{children:"max(s1, s2)"}),(0,s.jsx)(n.td,{children:"MAX_P"}),(0,s.jsx)(n.td,{children:"min(MAX_P, p) - max(p1 - s1,p2 - s2)"}),(0,s.jsx)(n.td,{children:"\u6309\u7167\u7ED3\u679Ccast"}),(0,s.jsx)(n.td,{children:"\u6309\u7167\u7ED3\u679Ccast"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["\u8868\u683C\u4E2D\u8BA1\u7B97",(0,s.jsx)(n.code,{children:"\u6EA2\u51FA\u65F6\u7ED3\u679Cscale"}),"\u7684\u89C4\u5219\u4E2D\uFF0C",(0,s.jsx)(n.code,{children:"precision"}),"\u8868\u793A",(0,s.jsx)(n.code,{children:"\u7ED3\u679Cprecision"}),"\u5217\u4E2D",(0,s.jsx)(n.code,{children:"precision"}),"\uFF0C",(0,s.jsx)(n.code,{children:"scale"}),"\u8868\u793A",(0,s.jsx)(n.code,{children:"\u7ED3\u679Cscale"}),"\u5217\u4E2D\u7684",(0,s.jsx)(n.code,{children:"scale"}),"\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"div_precision_increment"}),"\u662FFE\u7684\u914D\u7F6E\u53C2\u6570\uFF0C\u53C2\u89C1",(0,s.jsx)(n.a,{href:"../../../../admin-manual/config/fe-config#div_precision_increment",children:"div_precision_increment"}),"\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\u662FFE\u7684session variable\uFF0C\u8868\u793A\u5F53decimal\u6570\u503C\u8BA1\u7B97\u7ED3\u679C\u7CBE\u5EA6\u6EA2\u51FA\u65F6\uFF0C\u8BA1\u7B97\u7ED3\u679C\u6700\u591A\u53EF\u4FDD\u7559\u7684\u5C0F\u6570\u4F4D\u6570\uFF0C\u9ED8\u8BA4\u503C\u662F6\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u503C\u5F97\u6CE8\u610F\u7684\u662F\uFF0C\u9664\u6CD5\u8BA1\u7B97\u7684\u8FC7\u7A0B\u662FDECIMAL(p1, s1) / DECIMAL(p2, s2) \u5148\u8F6C\u6362\u6210 DECIMAL(p1 + s2 + ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),", s1 + s2 ) /  DECIMAL(p2, s2)  \u7136\u540E\u518D\u8FDB\u884C\u8BA1\u7B97\uFF0C\u6240\u4EE5\u53EF\u80FD\u4F1A\u51FA\u73B0DECIMAL(p1 + s2 + ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),", s1 + ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),") \u662F\u6EE1\u8DB3 DECIMAL \u7684\u8303\u56F4\uFF0C\u4F46\u662F\u7531\u4E8E\u5148\u8F6C\u6362\u6210\u4E86 DECIMAL(p1 + s2 + ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),", s1 + s2 )\u5BFC\u81F4\u8D85\u51FA\u8303\u56F4\uFF0CDoris\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u4F1A\u62A5",(0,s.jsx)(n.code,{children:"Arithmetic overflow"}),"\u9519\u8BEF\u3002"]}),"\n",(0,s.jsx)(n.h5,{id:"\u793A\u4F8B",children:"\u793A\u4F8B"}),"\n",(0,s.jsx)(n.h6,{id:"\u4E58\u6CD5\u4E0D\u6EA2\u51FA",children:"\u4E58\u6CD5\u4E0D\u6EA2\u51FA"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table test_decimal_mul_no_overflow(f1 decimal(19, 9), f2 decimal(19, 9)) properties('replication_num'='1');\ninsert into test_decimal_mul_no_overflow values('9999999999.999999999', '9999999999.999999999');\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u6839\u636E\u4E58\u6CD5\u7ED3\u679C\u7CBE\u5EA6\u7684\u8BA1\u7B97\u89C4\u5219\uFF0C\u7ED3\u679C\u7C7B\u578B\u662Fdecimal(38, 18)\uFF0C\u4E0D\u4F1A\u6EA2\u51FA\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 * f2 from test_decimal_mul_no_overflow;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 * f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_mul_no_overflow(test_decimal_mul_no_overflow), PREAGGREGATION: ON                                  |\n|      partitions=1/1 (test_decimal_mul_no_overflow)                                                                               |\n|      tablets=10/10, tabletList=1750210355691,1750210355693,1750210355695 ...                                                     |\n|      cardinality=1, avgRowSize=3065.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                        |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_no_overflow}                                                                          |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_no_overflow}                                                                          |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,18), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_no_overflow;\n+----------------------+----------------------+-----------------------------------------+\n| f1                   | f2                   | f1 * f2                                 |\n+----------------------+----------------------+-----------------------------------------+\n| 9999999999.999999999 | 9999999999.999999999 | 99999999999999999980.000000000000000001 |\n+----------------------+----------------------+-----------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h6,{id:"\u4E58\u6CD5\u6EA2\u51FA\u89C4\u5219",children:"\u4E58\u6CD5\u6EA2\u51FA\u89C4\u5219"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table test_decimal_mul_overflow1(f1 decimal(20, 5), f2 decimal(21, 6)) properties('replication_num'='1');\ninsert into test_decimal_mul_overflow1 values('12345678901234.12345', '12345678901234.123456');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6839\u636E\u4E58\u6CD5\u7ED3\u679C\u7CBE\u5EA6\u7684\u8BA1\u7B97\u89C4\u5219\uFF0C\u9ED8\u8BA4\u914D\u7F6E\u4E0B(",(0,s.jsx)(n.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),"=4)\uFF0C\u6B63\u5E38\u8BA1\u7B97\u51FA\u6765\u7684\u7ED3\u679C\u7C7B\u578B\u662F",(0,s.jsx)(n.code,{children:"decimal(41, 11)"}),"\uFF0Cprecision\u6EA2\u51FA\u4E86\uFF0C\u9700\u8981\u6309\u7167\u6EA2\u51FA\u65F6\u7684\u89C4\u5219\u91CD\u65B0\u8BA1\u7B97\uFF1A",(0,s.jsx)(n.code,{children:"MAX_P"})," - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32\uFF0C",(0,s.jsx)(n.code,{children:"precision"})," - ",(0,s.jsx)(n.code,{children:"scale"})," = 41 - 11 = 30 < 32\uFF0C \u9002\u7528\u89C4\u52191\uFF0C\u6700\u7EC8\u7ED3\u679Cscale = min(11, 38 - 30) = 8\uFF0C\u6700\u7EC8\u7ED3\u679C\u7C7B\u578B\u662Fdecimal(38, 8)\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:" explain verbose select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 * f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test.test_decimal_mul_overflow1(test_decimal_mul_overflow1), PREAGGREGATION: ON                                     |\n|      partitions=1/1 (test_decimal_mul_overflow1)                                                                                |\n|      tablets=10/10, tabletList=1750210355791,1750210355793,1750210355795 ...                                                    |\n|      cardinality=1, avgRowSize=3115.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                       |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,8), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------+-----------------------+--------------------------------------+\n| f1                   | f2                    | f1 * f2                              |\n+----------------------+-----------------------+--------------------------------------+\n| 12345678901234.12345 | 12345678901234.123456 | 152415787532377393748917544.09724464 |\n+----------------------+-----------------------+--------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679C\u8C03\u5927",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\u7684\u503C\uFF0C\u6BD4\u5982",(0,s.jsx)(n.code,{children:"set decimal_overflow_scale=9;"}),"\uFF0C\u6309\u7167\u6EA2\u51FA\u65F6\u7684\u89C4\u5219\u8FDB\u884C\u8BA1\u7B97\uFF1A",(0,s.jsx)(n.code,{children:"MAX_P"})," - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," = 38 - 9 = 29\uFF0C",(0,s.jsx)(n.code,{children:"precision"})," - ",(0,s.jsx)(n.code,{children:"scale"})," = 41 - 11 = 30 > 29\uFF0C\u4E14scale > ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u9002\u7528\u6EA2\u51FA\u89C4\u52193\uFF0C\u6700\u7EC8\u8BA1\u7B97\u51FA\u7684\u7ED3\u679C\u7C7B\u578B\u4E3A\uFF1A",(0,s.jsx)(n.code,{children:"decimal(38,9)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 * f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test.test_decimal_mul_overflow1(test_decimal_mul_overflow1), PREAGGREGATION: ON                                     |\n|      partitions=1/1 (test_decimal_mul_overflow1)                                                                                |\n|      tablets=10/10, tabletList=1750210355963,1750210355965,1750210355967 ...                                                    |\n|      cardinality=1, avgRowSize=3145.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                       |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,9), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------+-----------------------+---------------------------------------+\n| f1                   | f2                    | f1 * f2                               |\n+----------------------+-----------------------+---------------------------------------+\n| 12345678901234.12345 | 12345678901234.123456 | 152415787532377393748917544.097244643 |\n+----------------------+-----------------------+---------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679C\u7EE7\u7EED\u8C03\u5927",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\u7684\u503C\uFF0C\u6BD4\u5982",(0,s.jsx)(n.code,{children:"set decimal_overflow_scale=12;"}),"\uFF0C\u6309\u7167\u6EA2\u51FA\u65F6\u7684\u89C4\u5219\u8FDB\u884C\u8BA1\u7B97\uFF1A",(0,s.jsx)(n.code,{children:"MAX_P"})," - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," = 38 - 12 = 26\uFF0C",(0,s.jsx)(n.code,{children:"precision"})," - ",(0,s.jsx)(n.code,{children:"scale"})," = 41 - 11 = 30 > 26\uFF0C\u4E14scale < ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u6B64\u65F6\u9002\u7528\u6EA2\u51FA\u89C4\u52192\uFF0C\u6700\u7EC8\u8BA1\u7B97\u51FA\u7684\u7ED3\u679C\u7C7B\u578B\u4E3A\uFF1A",(0,s.jsx)(n.code,{children:"decimal(38,11)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 * f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_mul_overflow1(test_decimal_mul_overflow1), PREAGGREGATION: ON                                      |\n|      partitions=1/1 (test_decimal_mul_overflow1)                                                                                 |\n|      tablets=10/10, tabletList=1750210355963,1750210355965,1750210355967 ...                                                     |\n|      cardinality=1, avgRowSize=3145.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                        |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_overflow1}                                                                            |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_overflow1}                                                                            |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,11), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------+-----------------------+-----------------------------------------+\n| f1                   | f2                    | f1 * f2                                 |\n+----------------------+-----------------------+-----------------------------------------+\n| 12345678901234.12345 | 12345678901234.123456 | 152415787532377393748917544.09724464320 |\n+----------------------+-----------------------+-----------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h6,{id:"\u4E58\u6CD5\u6EA2\u51FA\u65F6\u5F00\u542Fdecimal256",children:"\u4E58\u6CD5\u6EA2\u51FA\u65F6\u5F00\u542Fdecimal256"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table test_decimal_mul_overflow_dec256(f1 decimal(38, 19), f2 decimal(38, 19)) properties('replication_num'='1');\ninsert into test_decimal_mul_overflow_dec256 values('9999999999999999999.9999999999999999999', '9999999999999999999.9999999999999999999');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u9ED8\u8BA4\u60C5\u51B5\u4E0B(",(0,s.jsx)(n.code,{children:"enable_decimal256"}),"=false)\uFF0C\u76F8\u4E58\u7684\u5B9E\u9645\u7ED3\u679C\u4F1A\u6EA2\u51FA\uFF0C\u6B64\u65F6\u53EF\u4EE5\u5F00\u542Fdecimal256\uFF1A",(0,s.jsx)(n.code,{children:"set enable_decimal256=true"}),"\uFF0C\u53EF\u4EE5\u8BA1\u7B97\u51FA\u7CBE\u786E\u7684\u7ED3\u679C\uFF0C\u7ED3\u679C\u7C7B\u578B\u4E3Adecimal(76, 38)\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"set enable_decimal256=true;\n\nelect f1, f2, f1 * f2 from test_decimal_mul_overflow_dec256;\n+-----------------------------------------+-----------------------------------------+-------------------------------------------------------------------------------+\n| f1                                      | f2                                      | f1 * f2                                                                       |\n+-----------------------------------------+-----------------------------------------+-------------------------------------------------------------------------------+\n| 9999999999999999999.9999999999999999999 | 9999999999999999999.9999999999999999999 | 99999999999999999999999999999999999998.00000000000000000000000000000000000001 |\n+-----------------------------------------+-----------------------------------------+-------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h6,{id:"\u9664\u6CD5\u4E0D\u6EA2\u51FA",children:"\u9664\u6CD5\u4E0D\u6EA2\u51FA"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table test_decimal_div_no_overflow(f1 decimal(19, 9), f2 decimal(19, 9)) properties('replication_num'='1');\n\ninsert into test_decimal_div_no_overflow values('1234567890.123456789', '234567890.123456789');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6839\u636E\u9664\u6CD5\u7ED3\u679C\u7CBE\u5EA6\u7684\u8BA1\u7B97\u89C4\u5219\uFF0C\u9ED8\u8BA4\u914D\u7F6E\u4E0B(",(0,s.jsx)(n.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),"=4)\uFF0C\u6B63\u5E38\u8BA1\u7B97\u51FA\u6765\u7684\u7ED3\u679C\u7C7B\u578B\u662F",(0,s.jsx)(n.code,{children:"decimal(19 + 9 + 4, 9 + 4)"}),"\uFF0C\u5373",(0,s.jsx)(n.code,{children:"decimal(32, 13)"}),"\uFF0Cprecision\u6CA1\u6709\u6EA2\u51FA\uFF0C\u7ED3\u679C\u7684\u6700\u7EC8\u7C7B\u578B\u5C31\u662F",(0,s.jsx)(n.code,{children:"decimal(32, 13)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:" explain verbose select f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal_div_no_overflow(test_decimal_div_no_overflow), PREAGGREGATION: ON                                  |\n|      partitions=1/1 (test_decimal_div_no_overflow)                                                                                   |\n|      tablets=10/10, tabletList=1750210335692,1750210335694,1750210335696 ...                                                     |\n|      cardinality=1, avgRowSize=0.0, numNodes=1                                                                                   |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(32,22)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(32,13), nullable=true, isAutoIncrement=false, subColPath=null} |\n\nselect f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------+---------------------+-----------------+\n| f1                   | f2                  | f1 / f2         |\n+----------------------+---------------------+-----------------+\n| 1234567890.123456789 | 234567890.123456789 | 5.2631580966759 |\n+----------------------+---------------------+-----------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679C\u671F\u671B\u7ED3\u679C\u4FDD\u7559\u66F4\u591A\u5C0F\u6570\u4F4D\uFF0C\u53EF\u4EE5\u8C03\u5927",(0,s.jsx)(n.code,{children:"div_precision_increment"}),", \u6BD4\u5982",(0,s.jsx)(n.code,{children:"admin set frontend config('div_precision_increment'='8');"}),"\uFF0C\u5219\u6839\u636E\u4E0A\u8FF0\u8BA1\u7B97\u89C4\u5219\uFF0C\u8BA1\u7B97\u51FA\u7684\u7ED3\u679C\u7C7B\u578B\u4E3A",(0,s.jsx)(n.code,{children:"decimal(36, 17)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"admin set frontend config('div_precision_increment'='8');\nexplain verbose select f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_div_no_overflow(test_decimal_div_no_overflow), PREAGGREGATION: ON                                          |\n|      partitions=1/1 (test_decimal_div_no_overflow)                                                                                   |\n|      tablets=10/10, tabletList=1750210354910,1750210354912,1750210354914 ...                                                     |\n|      cardinality=1, avgRowSize=3120.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(36,26)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(36,17), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------+---------------------+---------------------+\n| f1                   | f2                  | f1 / f2             |\n+----------------------+---------------------+---------------------+\n| 1234567890.123456789 | 234567890.123456789 | 5.26315809667590986 |\n+----------------------+---------------------+---------------------+\n"})}),"\n",(0,s.jsx)(n.h6,{id:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52191",children:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52191"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table test_decimal_div_overflow1(f1 decimal(27, 8), f2 decimal(27, 8)) properties('replication_num'='1');\n\ninsert into test_decimal_div_overflow1 values('123456789012345678.12345678', '23456789012345678.12345678');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6839\u636E\u9664\u6CD5\u7ED3\u679C\u7CBE\u5EA6\u7684\u8BA1\u7B97\u89C4\u5219\uFF0C\u9ED8\u8BA4\u914D\u7F6E\u4E0B(",(0,s.jsx)(n.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),"=4)\uFF0C\u6B63\u5E38\u8BA1\u7B97\u51FA\u6765\u7684\u7ED3\u679C\u7C7B\u578B\u662F",(0,s.jsx)(n.code,{children:"decimal(27 + 8 + 4, 8 + 4)"}),"\uFF0C\u5373",(0,s.jsx)(n.code,{children:"decimal(39, 12)"}),"\u3002precision\u6EA2\u51FA\u4E86\uFF0C\u9700\u8981\u6309\u7167\u6EA2\u51FA\u65F6\u7684\u89C4\u5219\u91CD\u65B0\u8BA1\u7B97\uFF1A",(0,s.jsx)(n.code,{children:"MAX_P"})," - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32\uFF0C",(0,s.jsx)(n.code,{children:"precision"})," - s1 = 39 - 8 = 31 < 32\uFF0C\u6240\u4EE5\u9002\u7528",(0,s.jsx)(n.code,{children:"\u6EA2\u51FA\u65F6scale"}),"\u89C4\u52191\uFF0C\u7ED3\u679Cscale\u4E3A(",(0,s.jsx)(n.code,{children:"MAX_P"})," - (",(0,s.jsx)(n.code,{children:"precision"})," - ",(0,s.jsx)(n.code,{children:"s1"}),"))+ ",(0,s.jsx)(n.code,{children:"div_precision_increment"})," = (38 - (39 - 8)) + 4 = 11\uFF0C\u7ED3\u679C\u7C7B\u578B\u4E3A",(0,s.jsx)(n.code,{children:"decimal(38, 11)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 / f2 from test_decimal_div_overflow1;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal_div_overflow1(test_decimal_div_overflow1), PREAGGREGATION: ON                                      |\n|      partitions=1/1 (test_decimal_div_overflow1)                                                                                     |\n|      tablets=10/10, tabletList=1750210336251,1750210336253,1750210336255 ...                                                     |\n|      cardinality=1, avgRowSize=3455.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,19)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,11), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_overflow1; \n+-----------------------------+----------------------------+---------------+\n| f1                          | f2                         | f1 / f2       |\n+-----------------------------+----------------------------+---------------+\n| 123456789012345678.12345678 | 23456789012345678.12345678 | 5.26315809667 |\n+-----------------------------+----------------------------+---------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679C\u8C03\u5927",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\u7684\u503C\uFF0C\u6BD4\u5982",(0,s.jsx)(n.code,{children:"set decimal_overflow_scale=8;"}),"\uFF0C\u6309\u7167\u6EA2\u51FA\u65F6\u7684\u89C4\u5219\u8FDB\u884C\u8BA1\u7B97\uFF1A",(0,s.jsx)(n.code,{children:"MAX_P"})," - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," = 38 - 8 = 30\uFF0C",(0,s.jsx)(n.code,{children:"precision"})," - s1 = 39 - 8 = 31 > 30\uFF0C\u4E14s1 == ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u9002\u7528\u6EA2\u51FA\u89C4\u52193\uFF0C\u6700\u7EC8\u8BA1\u7B97\u51FA\u7684\u7ED3\u679C\u7C7B\u578B\u4E3A\uFF1A",(0,s.jsx)(n.code,{children:"decimalv3(38,12)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"set decimal_overflow_scale=8;\nexplain verbose select f1, f2, f1 / f2 from test_decimal_div_overflow1;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_div_overflow1(test_decimal_div_overflow1), PREAGGREGATION: ON                                              |\n|      partitions=1/1 (test_decimal_div_overflow1)                                                                                     |\n|      tablets=10/10, tabletList=1750210355035,1750210355037,1750210355039 ...                                                     |\n|      cardinality=1, avgRowSize=3355.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,20)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,12), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_overflow1;\n+-----------------------------+----------------------------+----------------+\n| f1                          | f2                         | f1 / f2        |\n+-----------------------------+----------------------------+----------------+\n| 123456789012345678.12345678 | 23456789012345678.12345678 | 5.263158096675 |\n+-----------------------------+----------------------------+----------------+\n"})}),"\n",(0,s.jsx)(n.h6,{id:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52192",children:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52192"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table test_decimal(f1 decimal(38, 4), f2 decimal(38, 4)) properties('replication_num'='1');\n\ninsert into test_decimal values('123456789012345678.1234', '23456789012345678.1234');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6839\u636E\u9664\u6CD5\u7ED3\u679C\u7CBE\u5EA6\u7684\u8BA1\u7B97\u89C4\u5219\uFF0C\u9ED8\u8BA4\u914D\u7F6E\u4E0B(",(0,s.jsx)(n.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),"=4)\uFF0C\u6B63\u5E38\u8BA1\u7B97\u51FA\u6765\u7684\u7ED3\u679C\u7C7B\u578B\u662F",(0,s.jsx)(n.code,{children:"decimal(38 + 4 + 4, 4 + 4)"}),"\uFF0C\u5373",(0,s.jsx)(n.code,{children:"decimal(46, 8)"}),"\u3002precision\u6EA2\u51FA\u4E86\uFF0C\u9700\u8981\u6309\u7167\u6EA2\u51FA\u65F6\u7684\u89C4\u5219\u91CD\u65B0\u8BA1\u7B97\uFF1A",(0,s.jsx)(n.code,{children:"MAX_P"})," - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32\uFF0C",(0,s.jsx)(n.code,{children:"precision"})," - s1 = 46 - 4 = 42 > 32\uFF0Cs1 = 4 < ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u6240\u4EE5\u9002\u7528",(0,s.jsx)(n.code,{children:"\u6EA2\u51FA\u65F6scale"}),"\u89C4\u52192\uFF0C\u7ED3\u679Cscale\u4E3A",(0,s.jsx)(n.code,{children:"s1"})," + ",(0,s.jsx)(n.code,{children:"div_precision_increment"})," = 4 + 4 = 8\uFF0C\u7ED3\u679C\u7C7B\u578B\u4E3A",(0,s.jsx)(n.code,{children:"decimal(38, 8)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 / f2 from test_decimal;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 / f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test_decimal.test_decimal(test_decimal), PREAGGREGATION: ON                                                         |\n|      partitions=1/1 (test_decimal)                                                                                              |\n|      tablets=10/10, tabletList=1750210334096,1750210334098,1750210334100 ...                                                    |\n|      cardinality=1, avgRowSize=3250.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,12)) / f2[#1])                                             |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,8), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal;\n+-------------------------+------------------------+-------------+\n| f1                      | f2                     | f1 / f2     |\n+-------------------------+------------------------+-------------+\n| 123456789012345678.1234 | 23456789012345678.1234 |  5.26315809 |\n+-------------------------+------------------------+-------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679C\u671F\u671B\u7ED3\u679C\u4FDD\u7559\u66F4\u591A\u5C0F\u6570\u4F4D\uFF0C\u53EF\u4EE5\u8C03\u5927",(0,s.jsx)(n.code,{children:"div_precision_increment"}),", \u6BD4\u5982",(0,s.jsx)(n.code,{children:"admin set frontend config('div_precision_increment'='8');"}),"\uFF0C\u5219\u6839\u636E\u4E0A\u8FF0\u8BA1\u7B97\u89C4\u5219\uFF0C\u8BA1\u7B97\u51FA\u7684\u7ED3\u679C\u7C7B\u578B\u4E3A",(0,s.jsx)(n.code,{children:"decimal(38, 12)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"admin set frontend config('div_precision_increment'='8');\n\nexplain verbose select f1, f2, f1 / f2 from test_decimal;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal(test_decimal), PREAGGREGATION: ON                                                          |\n|      partitions=1/1 (test_decimal)                                                                                               |\n|      tablets=10/10, tabletList=1750210334096,1750210334098,1750210334100 ...                                                     |\n|      cardinality=2, avgRowSize=3240.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,16)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal}                                                                                          |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal}                                                                                          |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,12), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal;\n+-------------------------+------------------------+-----------------+\n| f1                      | f2                     | f1 / f2         |\n+-------------------------+------------------------+-----------------+\n| 123456789012345678.1234 | 23456789012345678.1234 |  5.263158096675 |\n+-------------------------+------------------------+-----------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679C\u5F00\u542Fdecimal256(",(0,s.jsx)(n.code,{children:"set enable_decimal256 = true;"}),")\uFF0C\u5219\u6B63\u5E38\u8BA1\u7B97\u51FA\u7684\u7ED3\u679Cprecision\u6CA1\u6709\u6EA2\u51FA\uFF0C\u7ED3\u679C\u7C7B\u578B\u662F",(0,s.jsx)(n.code,{children:"decimal(46, 8)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"set enable_decimal256=true;\n\nadmin set frontend config('div_precision_increment'='4');\n\nexplain verbose select f1, f2, f1 / f2 from test_decimal;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 / f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test_decimal.test_decimal(test_decimal), PREAGGREGATION: ON                                                         |\n|      partitions=1/1 (test_decimal)                                                                                              |\n|      tablets=10/10, tabletList=1750210334096,1750210334098,1750210334100 ...                                                    |\n|      cardinality=2, avgRowSize=3240.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(46,12)) / f2[#1])                                             |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(46,8), nullable=true, isAutoIncrement=false, subColPath=null} |\n\nselect f1, f2, f1 / f2 from test_decimal;\n+-------------------------+------------------------+-------------+\n| f1                      | f2                     | f1 / f2     |\n+-------------------------+------------------------+-------------+\n| 123456789012345678.1234 | 23456789012345678.1234 |  5.26315809 |\n+-------------------------+------------------------+-------------+\n"})}),"\n",(0,s.jsx)(n.h6,{id:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52193",children:"\u9664\u6CD5\u6EA2\u51FA\u89C4\u52193"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table test_decimal_div_overflow3(f1 decimal(38, 7), f2 decimal(38, 7)) properties('replication_num'='1');\n\ninsert into test_decimal_div_overflow3 values('123456789012345678.1234567', '23456789012345678.1234567');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6839\u636E\u9664\u6CD5\u7ED3\u679C\u7CBE\u5EA6\u7684\u8BA1\u7B97\u89C4\u5219\uFF0C\u9ED8\u8BA4\u914D\u7F6E\u4E0B(",(0,s.jsx)(n.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(n.code,{children:"div_precision_increment"}),"=4)\uFF0C\u6B63\u5E38\u8BA1\u7B97\u51FA\u6765\u7684\u7ED3\u679C\u7C7B\u578B\u662F",(0,s.jsx)(n.code,{children:"decimal(38 + 7 + 4, 7 + 4)"}),"\uFF0C\u5373",(0,s.jsx)(n.code,{children:"decimal(49, 11)"}),"\u3002precision\u6EA2\u51FA\u4E86\uFF0C\u9700\u8981\u6309\u7167\u6EA2\u51FA\u65F6\u7684\u89C4\u5219\u91CD\u65B0\u8BA1\u7B97\uFF1A",(0,s.jsx)(n.code,{children:"MAX_P"})," - ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32\uFF0C",(0,s.jsx)(n.code,{children:"precision"})," - s1 = 49 - 7 = 42 > 32\uFF0Cs1 = 7 > ",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"}),"\uFF0C\u6240\u4EE5\u9002\u7528",(0,s.jsx)(n.code,{children:"\u6EA2\u51FA\u65F6scale"}),"\u89C4\u52193\uFF0C\u7ED3\u679Cscale\u4E3A",(0,s.jsx)(n.code,{children:"decimal_overflow_scale"})," + ",(0,s.jsx)(n.code,{children:"div_precision_increment"})," = 6 + 4 = 10\uFF0C\u7ED3\u679C\u7C7B\u578B\u4E3A",(0,s.jsx)(n.code,{children:"decimal(38, 10)"}),"\uFF1A"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 / f2 from test_decimal_div_overflow3;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal_div_overflow3(test_decimal_div_overflow3), PREAGGREGATION: ON                                      |\n|      partitions=1/1 (test_decimal_div_overflow3)                                                                                     |\n|      tablets=10/10, tabletList=1750210336825,1750210336827,1750210336829 ...                                                     |\n|      cardinality=1, avgRowSize=0.0, numNodes=1                                                                                   |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,17)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_overflow3}                                                                                |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_overflow3}                                                                                |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,10), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8BA1\u7B97\u7ED3\u679C\uFF1A"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_overflow3; \n+----------------------------+---------------------------+--------------+\n| f1                         | f2                        | f1 / f2      |\n+----------------------------+---------------------------+--------------+\n| 123456789012345678.1234567 | 23456789012345678.1234567 | 5.2631580966 |\n+----------------------------+---------------------------+--------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"\u805A\u5408\u8FD0\u7B97",children:"\u805A\u5408\u8FD0\u7B97"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SUM / MULTI_DISTINCT_SUM: SUM(DECIMAL(a, b)) -> DECIMAL(MAX_P, b)."}),"\n",(0,s.jsx)(n.li,{children:"AVG: AVG(DECIMAL(a, b)) -> DECIMAL(MAX_P, max(b, 4))."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"\u9ED8\u8BA4\u89C4\u5219",children:"\u9ED8\u8BA4\u89C4\u5219"}),"\n",(0,s.jsxs)(n.p,{children:["\u9664\u4E0A\u8FF0\u63D0\u5230\u7684\u51FD\u6570\u5916\uFF0C\u5176\u4F59\u8868\u8FBE\u5F0F\u90FD\u4F7F\u7528\u9ED8\u8BA4\u89C4\u5219\u8FDB\u884C\u7CBE\u5EA6\u63A8\u6F14\u3002\u5373\u5BF9\u4E8E\u8868\u8FBE\u5F0F ",(0,s.jsx)(n.code,{children:"expr(DECIMAL(a, b))"}),"\uFF0C\u7ED3\u679C\u7C7B\u578B\u540C\u6837\u4E5F\u662F DECIMAL(a, b)\u3002"]}),"\n",(0,s.jsx)(n.h4,{id:"\u8C03\u6574\u7ED3\u679C\u7CBE\u5EA6",children:"\u8C03\u6574\u7ED3\u679C\u7CBE\u5EA6"}),"\n",(0,s.jsxs)(n.p,{children:["\u4E0D\u540C\u7528\u6237\u5BF9 DECIMAL \u7684\u7CBE\u5EA6\u8981\u6C42\u5404\u4E0D\u76F8\u540C\uFF0C\u4E0A\u8FF0\u89C4\u5219\u4E3A\u5F53\u524D Doris \u7684\u9ED8\u8BA4\u884C\u4E3A\uFF0C\u5982\u679C\u7528\u6237",(0,s.jsx)(n.strong,{children:"\u6709\u4E0D\u540C\u7684\u7CBE\u5EA6\u9700\u6C42\uFF0C\u53EF\u4EE5\u901A\u8FC7\u4EE5\u4E0B\u65B9\u5F0F\u8FDB\u884C\u7CBE\u5EA6\u8C03\u6574"}),"\uFF1A"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\u5982\u679C\u671F\u671B\u7684\u7ED3\u679C\u7CBE\u5EA6\u5927\u4E8E\u9ED8\u8BA4\u7CBE\u5EA6\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8C03\u6574\u5165\u53C2\u7CBE\u5EA6\u6765\u8C03\u6574\u7ED3\u679C\u7CBE\u5EA6\u3002\u4F8B\u5982\u7528\u6237\u671F\u671B\u8BA1\u7B97",(0,s.jsx)(n.code,{children:"AVG(col)"}),"\u5F97\u5230 DECIMAL(x, y) \u4F5C\u4E3A\u7ED3\u679C\uFF0C\u5176\u4E2D",(0,s.jsx)(n.code,{children:"col"}),"\u7684\u7C7B\u578B\u4E3A DECIMAL(a, b)\uFF0C\u5219\u53EF\u4EE5\u6539\u5199\u8868\u8FBE\u5F0F\u4E3A",(0,s.jsx)(n.code,{children:"AVG(CAST(col as DECIMAL(x, y)))"}),"\u3002"]}),"\n",(0,s.jsxs)(n.li,{children:["\u5982\u679C\u671F\u671B\u7684\u7ED3\u679C\u7CBE\u5EA6\u5C0F\u4E8E\u9ED8\u8BA4\u7CBE\u5EA6\uFF0C\u53EF\u4EE5\u901A\u8FC7\u5BF9\u8F93\u51FA\u7ED3\u679C\u6C42\u8FD1\u4F3C\u5F97\u5230\u60F3\u8981\u7684\u7CBE\u5EA6\u3002\u4F8B\u5982\u7528\u6237\u671F\u671B\u8BA1\u7B97",(0,s.jsx)(n.code,{children:"AVG(col)"}),"\u5F97\u5230 DECIMAL(x, y) \u4F5C\u4E3A\u7ED3\u679C\uFF0C\u5176\u4E2D",(0,s.jsx)(n.code,{children:"col"}),"\u7684\u7C7B\u578B\u4E3A DECIMAL(a, b)\uFF0C\u5219\u53EF\u4EE5\u6539\u5199\u8868\u8FBE\u5F0F\u4E3A",(0,s.jsx)(n.code,{children:"ROUND(AVG(col), y)"}),"\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u4E3A\u4EC0\u4E48\u9700\u8981-decimal",children:"\u4E3A\u4EC0\u4E48\u9700\u8981 DECIMAL"}),"\n",(0,s.jsx)(n.p,{children:"Doris \u4E2D\u7684 DECIMAL \u662F\u771F\u6B63\u610F\u4E49\u4E0A\u7684\u9AD8\u7CBE\u5EA6\u5B9A\u70B9\u6570\uFF0CDecimal \u6709\u4EE5\u4E0B\u6838\u5FC3\u4F18\u52BF\uFF1A"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\u53EF\u8868\u793A\u8303\u56F4\u66F4\u5927\u3002DECIMAL \u4E2D precision \u548C scale \u7684\u53D6\u503C\u8303\u56F4\u90FD\u8FDB\u884C\u4E86\u660E\u663E\u6269\u5145\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u6027\u80FD\u66F4\u9AD8\u3002\u8001\u7248\u672C\u7684 DECIMAL \u5728\u5185\u5B58\u4E2D\u9700\u8981\u5360\u7528 16 bytes\uFF0C\u5728\u5B58\u50A8\u4E2D\u5360\u7528 12 bytes\uFF0C\u800C DECIMAL \u8FDB\u884C\u4E86\u81EA\u9002\u5E94\u8C03\u6574\uFF08\u5982\u4E0B\u8868\u683C\uFF09\u3002"}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"precision"}),(0,s.jsx)(n.th,{children:"\u5360\u7528\u7A7A\u95F4\uFF08\u5185\u5B58/\u78C1\u76D8\uFF09"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"0 < precision <= 9"}),(0,s.jsx)(n.td,{children:"4 bytes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"9 < precision <= 18"}),(0,s.jsx)(n.td,{children:"8 bytes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"18 < precision <= 38"}),(0,s.jsx)(n.td,{children:"16 bytes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"38 < precision <= 76"}),(0,s.jsx)(n.td,{children:"32 bytes"})]})]})]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"\u66F4\u5B8C\u5907\u7684\u7CBE\u5EA6\u63A8\u6F14\u3002\u5BF9\u4E8E\u4E0D\u540C\u7684\u8868\u8FBE\u5F0F\uFF0C\u5E94\u7528\u4E0D\u540C\u7684\u7CBE\u5EA6\u63A8\u6F14\u89C4\u5219\u5BF9\u7ED3\u679C\u7684\u7CBE\u5EA6\u8FDB\u884C\u63A8\u6F14\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"keywords",children:"keywords"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DECIMAL\n"})})]})}function u(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},250065:function(e,n,l){l.d(n,{Z:function(){return d},a:function(){return t}});var i=l(667294);let s={},c=i.createContext(s);function t(e){let n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);