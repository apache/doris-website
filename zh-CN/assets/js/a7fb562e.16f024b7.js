"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["328055"],{736643:function(n,i,t){t.r(i),t.d(i,{default:()=>d,frontMatter:()=>a,metadata:()=>e,assets:()=>r,toc:()=>o,contentTitle:()=>c});var e=JSON.parse('{"id":"query-acceleration/hints/leading-hint","title":"Leading Hint","description":"Leading Hint \u662F\u4E00\u79CD\u5F3A\u5927\u7684\u67E5\u8BE2\u4F18\u5316\u6280\u672F\uFF0C\u5141\u8BB8\u7528\u6237\u6307\u5BFC Doris \u4F18\u5316\u5668\u786E\u5B9A\u67E5\u8BE2\u8BA1\u5212\u4E2D\u7684\u8868\u8FDE\u63A5\u987A\u5E8F\u3002\u6B63\u786E\u4F7F\u7528 Leading Hint \u53EF\u4EE5\u663E\u8457\u63D0\u9AD8\u590D\u6742\u67E5\u8BE2\u7684\u6027\u80FD\u3002\u672C\u6587\u5C06\u8BE6\u7EC6\u4ECB\u7ECD\u5982\u4F55\u5728 Doris \u4E2D\u4F7F\u7528 Leading Hint \u6765\u63A7\u5236 join \u987A\u5E8F\u3002","source":"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/query-acceleration/hints/leading-hint.md","sourceDirName":"query-acceleration/hints","slug":"/query-acceleration/hints/leading-hint","permalink":"/zh-CN/docs/dev/query-acceleration/hints/leading-hint","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Leading Hint","language":"zh-CN"},"sidebar":"docs","previous":{"title":"Hint \u6982\u8FF0","permalink":"/zh-CN/docs/dev/query-acceleration/hints/hints-overview"},"next":{"title":"Distribute Hint","permalink":"/zh-CN/docs/dev/query-acceleration/hints/distribute-hint"}}'),s=t("785893"),l=t("250065");let a={title:"Leading Hint",language:"zh-CN"},c=void 0,r={},o=[{value:"\u5E38\u89C4 Leading Hint",id:"\u5E38\u89C4-leading-hint",level:2},{value:"\u8BED\u6CD5",id:"\u8BED\u6CD5",level:3},{value:"\u6848\u4F8B",id:"\u6848\u4F8B",level:3},{value:"\u57FA\u7840\u573A\u666F",id:"\u57FA\u7840\u573A\u666F",level:4},{value:"\u6269\u5C55\u573A\u666F",id:"\u6269\u5C55\u573A\u666F",level:4},{value:"Ordered Hint",id:"ordered-hint",level:2},{value:"\u8BED\u6CD5",id:"\u8BED\u6CD5-1",level:3},{value:"\u6848\u4F8B",id:"\u6848\u4F8B-1",level:3},{value:"\u603B\u7ED3",id:"\u603B\u7ED3",level:2}];function h(n){let i={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.p,{children:"Leading Hint \u662F\u4E00\u79CD\u5F3A\u5927\u7684\u67E5\u8BE2\u4F18\u5316\u6280\u672F\uFF0C\u5141\u8BB8\u7528\u6237\u6307\u5BFC Doris \u4F18\u5316\u5668\u786E\u5B9A\u67E5\u8BE2\u8BA1\u5212\u4E2D\u7684\u8868\u8FDE\u63A5\u987A\u5E8F\u3002\u6B63\u786E\u4F7F\u7528 Leading Hint \u53EF\u4EE5\u663E\u8457\u63D0\u9AD8\u590D\u6742\u67E5\u8BE2\u7684\u6027\u80FD\u3002\u672C\u6587\u5C06\u8BE6\u7EC6\u4ECB\u7ECD\u5982\u4F55\u5728 Doris \u4E2D\u4F7F\u7528 Leading Hint \u6765\u63A7\u5236 join \u987A\u5E8F\u3002"}),"\n",(0,s.jsx)(i.h2,{id:"\u5E38\u89C4-leading-hint",children:"\u5E38\u89C4 Leading Hint"}),"\n",(0,s.jsx)(i.h3,{id:"\u8BED\u6CD5",children:"\u8BED\u6CD5"}),"\n",(0,s.jsx)(i.p,{children:"Leading Hint \u5141\u8BB8\u6307\u5B9A\u5E0C\u671B\u4F18\u5316\u5668\u9075\u5FAA\u7684\u8868\u8FDE\u63A5\u987A\u5E8F\u3002\u5728 Doris \u91CC\u9762\uFF0CLeading Hint \u7684\u57FA\u672C\u8BED\u6CD5\u5982\u4E0B\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT /*+ LEADING(tablespec [tablespec]...) */ ...\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u5176\u4E2D\u9700\u8981\u6CE8\u610F\u7684\u662F\uFF1A"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Leading Hint \u7531 ",(0,s.jsx)(i.code,{children:"/*+"})," \u548C ",(0,s.jsx)(i.code,{children:"*/"})," \u5305\u56F4\uFF0C\u5E76\u7F6E\u4E8E SQL \u8BED\u53E5\u4E2D SELECT \u5173\u952E\u5B57\u4E4B\u540E\u3002"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"tablespec"})," \u662F\u8868\u540D\u6216\u8868\u522B\u540D\uFF0C\u81F3\u5C11\u9700\u8981\u6307\u5B9A\u4E24\u4E2A\u8868\u3002"]}),"\n",(0,s.jsx)(i.li,{children:"\u591A\u4E2A\u8868\u4E4B\u95F4\u7528\u7A7A\u683C\u6216','\u5206\u9694\u3002"}),"\n",(0,s.jsxs)(i.li,{children:["\u53EF\u4EE5\u4F7F\u7528\u5927\u62EC\u53F7 ",(0,s.jsx)(i.code,{children:"{}"})," \u6765\u663E\u5F0F\u5730\u6307\u5B9A Join Tree \u7684\u5F62\u72B6\u3002"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"\u4E3E\u4F8B\u8BF4\u660E\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                              |\n+------------------------------------------------------------------------------+\n| PhysicalResultSink                                                           |\n| --PhysicalDistribute[DistributionSpecGather]                                 |\n| ----PhysicalProject                                                          |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| --------PhysicalOlapScan[t2]                                                 |\n| --------PhysicalDistribute[DistributionSpecHash]                             |\n| ----------PhysicalOlapScan[t1]                                               |\n|                                                                              |\n| Hint log:                                                                    |\n| Used: leading(t2 t1)                                                         |\n| UnUsed:                                                                      |\n| SyntaxError:                                                                 |\n+------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u5F53 Leading Hint \u4E0D\u751F\u6548\u7684\u65F6\u5019\u4F1A\u8D70\u6B63\u5E38\u7684\u6D41\u7A0B\u751F\u6210\u8BA1\u5212\uFF0CEXPLAIN \u4F1A\u663E\u793A\u4F7F\u7528\u7684 Hint \u662F\u5426\u751F\u6548\uFF0C\u4E3B\u8981\u5206\u4E09\u79CD\u6765\u663E\u793A\uFF1A"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"\u72B6\u6001"}),(0,s.jsx)(i.th,{children:"\u63CF\u8FF0"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"Used"})}),(0,s.jsx)(i.td,{children:"Leading Hint \u6B63\u5E38\u751F\u6548"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"Unused"})}),(0,s.jsx)(i.td,{children:"\u8FD9\u91CC\u4E0D\u652F\u6301\u7684\u60C5\u51B5\u5305\u542B Leading Hint \u6307\u5B9A\u7684 join order \u4E0E\u539F SQL \u4E0D\u7B49\u4EF7\u6216\u672C\u7248\u672C\u6682\u4E0D\u652F\u6301\u7279\u6027\uFF08\u8BE6\u89C1\u9650\u5236\uFF09"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"SyntaxError"})}),(0,s.jsx)(i.td,{children:"\u6307 Leading Hint \u8BED\u6CD5\u9519\u8BEF\uFF0C\u5982\u627E\u4E0D\u5230\u5BF9\u5E94\u7684\u8868\u7B49"})]})]})]}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Leading Hint \u8BED\u6CD5\u9ED8\u8BA4\u6784\u9020\u51FA\u5DE6\u6DF1\u6811\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 t2 t3) */ * from t1 join t2 on c1 = c2 join t3 on c2=c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: leading(t1 t2 t3)                                                        |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u540C\u65F6\u5141\u8BB8\u4F7F\u7528\u5927\u62EC\u53F7\u6307\u5B9A Join \u6811\u5F62\u72B6\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 join t2 on c1 = c2 join t3 on c2=c3;\n+----------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                  |\n+----------------------------------------------------------------------------------+\n| PhysicalResultSink                                                               |\n| --PhysicalDistribute[DistributionSpecGather]                                     |\n| ----PhysicalProject                                                              |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()     |\n| --------PhysicalOlapScan[t1]                                                     |\n| --------PhysicalDistribute[DistributionSpecHash]                                 |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ------------PhysicalOlapScan[t2]                                                 |\n| ------------PhysicalDistribute[DistributionSpecHash]                             |\n| --------------PhysicalOlapScan[t3]                                               |\n|                                                                                  |\n| Hint log:                                                                        |\n| Used: leading(t1 { t2 t3 })                                                      |\n| UnUsed:                                                                          |\n| SyntaxError:                                                                     |\n+----------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u5F53\u6709 View \u4F5C\u4E3A\u522B\u540D\u53C2\u4E0E JoinReorder \u7684\u65F6\u5019\u53EF\u4EE5\u6307\u5B9A\u5BF9\u5E94\u7684 View \u4F5C\u4E3A Leading Hint \u7684\u53C2\u6570\u3002\u4F8B\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n  +--------------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                      |\n  +--------------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                                   |\n  | --hashAgg[GLOBAL]                                                                    |\n  | ----PhysicalDistribute[DistributionSpecGather]                                       |\n  | ------hashAgg[LOCAL]                                                                 |\n  | --------PhysicalProject                                                              |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()  |\n  | ------------PhysicalProject                                                          |\n  | --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n  | ----------------PhysicalProject                                                      |\n  | ------------------PhysicalOlapScan[t2]                                               |\n  | ----------------PhysicalDistribute[DistributionSpecHash]                             |\n  | ------------------PhysicalProject                                                    |\n  | --------------------PhysicalOlapScan[t3]                                             |\n  | ------------PhysicalDistribute[DistributionSpecHash]                                 |\n  | --------------PhysicalProject                                                        |\n  | ----------------PhysicalOlapScan[t1]                                                 |\n  |                                                                                      |\n  | Hint log:                                                                            |\n  | Used: leading(alias t1)                                                              |\n  | UnUsed:                                                                              |\n  | SyntaxError:                                                                         |\n  +--------------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"\u6848\u4F8B",children:"\u6848\u4F8B"}),"\n",(0,s.jsx)(i.h4,{id:"\u57FA\u7840\u573A\u666F",children:"\u57FA\u7840\u573A\u666F"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u5EFA\u8868\u8BED\u53E5\u5982\u4E0B\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"CREATE DATABASE testleading;\nUSE testleading;\n\ncreate table t1 (c1 int, c11 int) distributed by hash(c1) buckets 3 properties('replication_num' = '1');\ncreate table t2 (c2 int, c22 int) distributed by hash(c2) buckets 3 properties('replication_num' = '1');\ncreate table t3 (c3 int, c33 int) distributed by hash(c3) buckets 3 properties('replication_num' = '1');\ncreate table t4 (c4 int, c44 int) distributed by hash(c4) buckets 3 properties('replication_num' = '1');\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u539F\u59CB plan\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select * from t1 join t2 on t1.c1 = c2;\n+-------------------------------------------+\n| Explain String                            |\n+-------------------------------------------+\n| PhysicalResultSink                        |\n| --PhysicalDistribute                      |\n| ----PhysicalProject                       |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2) |\n| --------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                |\n| ----------PhysicalOlapScan[t1]            |\n+-------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\u5F53\u6211\u4EEC\u9700\u8981\u4EA4\u6362 t1 \u548C t2 \u7684 join \u987A\u5E8F\u65F6\uFF0C\u53EA\u9700\u5728\u524D\u9762\u52A0\u4E0A ",(0,s.jsx)(i.code,{children:"leading(t2 t1)"})," \u5373\u53EF\u3002\u5728\u6267\u884C ",(0,s.jsx)(i.code,{children:"explain"})," \u65F6\uFF0C\u4F1A\u663E\u793A\u662F\u5426\u4F7F\u7528\u4E86\u8FD9\u4E2A hint\u3002\u5982\u4E0B Leading plan\uFF1A",(0,s.jsx)(i.code,{children:"Used"})," \u8868\u793A Hint \u6B63\u5E38\u751F\u6548"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                              |\n+------------------------------------------------------------------------------+\n| PhysicalResultSink                                                           |\n| --PhysicalDistribute[DistributionSpecGather]                                 |\n| ----PhysicalProject                                                          |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| --------PhysicalOlapScan[t2]                                                 |\n| --------PhysicalDistribute[DistributionSpecHash]                             |\n| ----------PhysicalOlapScan[t1]                                               |\n|                                                                              |\n| Hint log:                                                                    |\n| Used: leading(t2 t1)                                                         |\n| UnUsed:                                                                      |\n| SyntaxError:                                                                 |\n+------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\u5982\u679C Leading Hint \u5B58\u5728\u8BED\u6CD5\u9519\u8BEF\uFF0C",(0,s.jsx)(i.code,{children:"explain"})," \u65F6\u4F1A\u5728 ",(0,s.jsx)(i.code,{children:"SyntaxError"})," \u91CC\u663E\u793A\u76F8\u5E94\u4FE1\u606F\uFF0C\u4F46\u8BA1\u5212\u4ECD\u80FD\u7167\u5E38\u751F\u6210\uFF0C\u53EA\u662F\u4E0D\u4F1A\u4F7F\u7528 Leading \u800C\u5DF2\u3002\u4F8B\u5982\uFF1A"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t2 t3) */ * from t1 join t2 on t1.c1 = c2;\n+--------------------------------------------------------+\n| Explain String                                         |\n+--------------------------------------------------------+\n| PhysicalResultSink                                     |\n| --PhysicalDistribute                                   |\n| ----PhysicalProject                                    |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2)              |\n| --------PhysicalOlapScan[t1]                           |\n| --------PhysicalDistribute                             |\n| ----------PhysicalOlapScan[t2]                         |\n|                                                        |\n| Used:                                                  |\n| UnUsed:                                                |\n| SyntaxError: leading(t2 t3) Msg:can not find table: t3 |\n+--------------------------------------------------------+\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"\u6269\u5C55\u573A\u666F",children:"\u6269\u5C55\u573A\u666F"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u5DE6\u6DF1\u6811"}),"\n",(0,s.jsx)(i.p,{children:"\u4E0A\u6587\u6211\u4EEC\u63D0\u53CA\uFF0CDoris \u5728\u67E5\u8BE2\u8BED\u53E5\u4E0D\u4F7F\u7528\u4EFB\u4F55\u62EC\u53F7\u7684\u60C5\u51B5\u4E0B\uFF0CLeading \u4F1A\u9ED8\u8BA4\u751F\u6210\u5DE6\u6DF1\u6811\u3002"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 t2 t3) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: leading(t1 t2 t3)                                                        |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u53F3\u6DF1\u6811"}),"\n",(0,s.jsx)(i.p,{children:"\u5F53\u9700\u8981\u5C06\u8BA1\u5212\u7684\u5F62\u72B6\u505A\u6210\u53F3\u6DF1\u6811\u3001Bushy \u6811\u6216\u8005 zig-zag \u6811\u65F6\uFF0C\u53EA\u9700\u52A0\u4E0A\u5927\u62EC\u53F7\u6765\u9650\u5236 plan \u7684\u5F62\u72B6\u5373\u53EF\uFF0C\u65E0\u9700\u50CF Oracle \u4F7F\u7528 swap \u4ECE\u5DE6\u6DF1\u6811\u4E00\u6B65\u6B65\u8C03\u6574\u3002"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3;\n+-----------------------------------------------+\n| Explain String                                |\n+-----------------------------------------------+\n| PhysicalResultSink                            |\n| --PhysicalDistribute                          |\n| ----PhysicalProject                           |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2)     |\n| --------PhysicalOlapScan[t1]                  |\n| --------PhysicalDistribute                    |\n| ----------hashJoin[INNER_JOIN](t2.c2 = t3.c3) |\n| ------------PhysicalOlapScan[t2]              |\n| ------------PhysicalDistribute                |\n| --------------PhysicalOlapScan[t3]            |\n|                                               |\n| Used: leading(t1 { t2 t3 })                   |\n| UnUsed:                                       |\n| SyntaxError:                                  |\n+-----------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Bushy \u6811"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading({t1 t2} {t3 t4}) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3 join t4 on c3 = c4;\n+-----------------------------------------------+\n| Explain String                                |\n+-----------------------------------------------+\n| PhysicalResultSink                            |\n| --PhysicalDistribute                          |\n| ----PhysicalProject                           |\n| ------hashJoin[INNER_JOIN](t2.c2 = t3.c3)     |\n| --------hashJoin[INNER_JOIN](t1.c1 = t2.c2)   |\n| ----------PhysicalOlapScan[t1]                |\n| ----------PhysicalDistribute                  |\n| ------------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                    |\n| ----------hashJoin[INNER_JOIN](t3.c3 = t4.c4) |\n| ------------PhysicalOlapScan[t3]              |\n| ------------PhysicalDistribute                |\n| --------------PhysicalOlapScan[t4]            |\n|                                               |\n| Used: leading({ t1 t2 } { t3 t4 })            |\n| UnUsed:                                       |\n| SyntaxError:                                  |\n+-----------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"zig-zag \u6811"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 {t2 t3} t4) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3 join t4 on c3 = c4;\n+--------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                      |\n+--------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                   |\n| --PhysicalDistribute[DistributionSpecGather]                                         |\n| ----PhysicalProject                                                                  |\n| ------hashJoin[INNER_JOIN] hashCondition=((t3.c3 = t4.c4)) otherCondition=()         |\n| --------PhysicalDistribute[DistributionSpecHash]                                     |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()     |\n| ------------PhysicalOlapScan[t1]                                                     |\n| ------------PhysicalDistribute[DistributionSpecHash]                                 |\n| --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ----------------PhysicalOlapScan[t2]                                                 |\n| ----------------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------------PhysicalOlapScan[t3]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                                     |\n| ----------PhysicalOlapScan[t4]                                                       |\n|                                                                                      |\n| Hint log:                                                                            |\n| Used: leading(t1 { t2 t3 } t4)                                                       |\n| UnUsed:                                                                              |\n| SyntaxError:                                                                         |\n+--------------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Non-inner Join"}),"\n",(0,s.jsxs)(i.p,{children:["\u5F53\u9047\u5230\u975E inner-join\uFF08\u5982 Outer Join \u6216 Semi/Anti Join\uFF09\u65F6\uFF0CLeading Hint \u4F1A\u6839\u636E\u539F\u59CB SQL \u8BED\u4E49\u81EA\u52A8\u63A8\u5BFC\u5404\u4E2A Join \u7684\u65B9\u5F0F\u3002\u82E5 Leading Hint \u4E0E\u539F\u59CB SQL \u8BED\u4E49\u4E0D\u540C\u6216\u65E0\u6CD5\u751F\u6210\uFF0C\u5219\u4F1A\u5C06\u5176\u653E\u5165 ",(0,s.jsx)(i.code,{children:"UnUsed"})," \u4E2D\uFF0C\u4F46\u8FD9\u5E76\u4E0D\u5F71\u54CD\u8BA1\u5212\u6B63\u5E38\u6D41\u7A0B\u7684\u751F\u6210\u3002"]}),"\n",(0,s.jsx)(i.p,{children:"\u4EE5\u4E0B\u662F\u4E00\u4E2A\u4E0D\u80FD\u4EA4\u6362\u7684\u4F8B\u5B50\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"-------- test outer join which can not swap\n-- t1 leftjoin (t2 join t3 on (P23)) on (P12) != (t1 leftjoin t2 on (P12)) join t3 on (P23)\nmysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used:                                                                          |\n| UnUsed: leading(t1 { t2 t3 })                                                  |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u4E0B\u9762\u662F\u4E00\u4E9B\u53EF\u4EE5\u4EA4\u6362\u7684\u4F8B\u5B50\u548C\u4E0D\u80FD\u4EA4\u6362\u7684\u4F8B\u5B50\uFF0C\u8BFB\u8005\u53EF\u81EA\u884C\u9A8C\u8BC1\u3002"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"-------- test outer join which can swap\n-- (t1 leftjoin t2  on (P12)) innerjoin t3 on (P13) = (t1 innerjoin t3 on (P13)) leftjoin t2  on (P12)\nexplain shape plan select * from t1 left join t2 on c1 = c2 join t3 on c1 = c3;\nexplain shape plan select /*+ leading(t1 t3 t2) */ * from t1 left join t2 on c1 = c2 join t3 on c1 = c3;\n\n-- (t1 leftjoin t2  on (P12)) leftjoin t3 on (P13) = (t1 leftjoin t3 on (P13)) leftjoin t2  on (P12)\nexplain shape plan select * from t1 left join t2 on c1 = c2 left join t3 on c1 = c3;\nexplain shape plan select /*+ leading(t1 t3 t2) */ * from t1 left join t2 on c1 = c2 left join t3 on c1 = c3;\n\n-- (t1 leftjoin t2  on (P12)) leftjoin t3 on (P23) = t1 leftjoin (t2  leftjoin t3 on (P23)) on (P12)\nselect /*+ leading(t2 t3 t1) SWAP_INPUT(t1) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\n\n-------- test outer join which can not swap\n--  t1 leftjoin (t2  join t3 on (P23)) on (P12) != (t1 leftjoin t2  on (P12)) join t3 on (P23)\n-- eliminated to inner join\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 join t3 on c2 = c3;\nexplain graph select /*+ leading(t1 t2 t3) */ * from t1 left join (select * from t2 join t3 on c2 = c3) on c1 = c2;\n\n-- test semi join\nexplain shape plan select * from t1 where c1 in (select c2 from t2);\nexplain shape plan select /*+ leading(t2 t1) */ * from t1 where c1 in (select c2 from t2);\n\n-- test anti join\nexplain shape plan select * from t1 where exists (select c2 from t2);\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"View"}),"\n",(0,s.jsx)(i.p,{children:"\u5728\u6D89\u53CA\u522B\u540D\uFF08Alias\uFF09\u7684\u60C5\u51B5\u4E0B\uFF0C\u53EF\u4EE5\u5C06\u522B\u540D\u4F5C\u4E3A\u4E00\u4E2A\u5B8C\u6574\u72EC\u7ACB\u7684\u5B50\u6811\u8FDB\u884C\u6307\u5B9A\uFF0C\u5E76\u5728\u8FD9\u4E9B\u5B50\u6811\u5185\u90E8\u6839\u636E\u6587\u672C\u5E8F\u751F\u6210 Join \u987A\u5E8F"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql>  explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n+--------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                      |\n+--------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                   |\n| --hashAgg[GLOBAL]                                                                    |\n| ----PhysicalDistribute[DistributionSpecGather]                                       |\n| ------hashAgg[LOCAL]                                                                 |\n| --------PhysicalProject                                                              |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()  |\n| ------------PhysicalProject                                                          |\n| --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ----------------PhysicalProject                                                      |\n| ------------------PhysicalOlapScan[t2]                                               |\n| ----------------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------------PhysicalProject                                                    |\n| --------------------PhysicalOlapScan[t3]                                             |\n| ------------PhysicalDistribute[DistributionSpecHash]                                 |\n| --------------PhysicalProject                                                        |\n| ----------------PhysicalOlapScan[t1]                                                 |\n|                                                                                      |\n| Hint log:                                                                            |\n| Used: leading(alias t1)                                                              |\n| UnUsed:                                                                              |\n| SyntaxError:                                                                         |\n+--------------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"ordered-hint",children:"Ordered Hint"}),"\n",(0,s.jsx)(i.p,{children:"Ordered hint \u53EF\u4EE5\u770B\u505A leading hint \u7684\u4E00\u79CD\u7279\u4F8B\uFF0C\u7528\u4E8E\u63A7\u5236 join order \u4E3A\u6587\u672C\u5E8F\u3002"}),"\n",(0,s.jsx)(i.h3,{id:"\u8BED\u6CD5-1",children:"\u8BED\u6CD5"}),"\n",(0,s.jsxs)(i.p,{children:["Ordered Hint \u7684\u8BED\u6CD5\u4E3A ",(0,s.jsx)(i.code,{children:"/*+ ORDERED */"}),"\uFF0C\u653E\u7F6E\u5728 ",(0,s.jsx)(i.code,{children:"SELECT"})," \u8BED\u53E5\u4E2D\u7684 ",(0,s.jsx)(i.code,{children:"SELECT"})," \u5173\u952E\u5B57\u4E4B\u540E\uFF0C\u7D27\u63A5\u7740\u67E5\u8BE2\u7684\u5176\u4F59\u90E8\u5206\u3002"]}),"\n",(0,s.jsx)(i.h3,{id:"\u6848\u4F8B-1",children:"\u6848\u4F8B"}),"\n",(0,s.jsx)(i.p,{children:"\u4EE5\u4E0B\u662F\u4E00\u4E2A\u4F7F\u7528 Ordered Hint \u7684\u793A\u4F8B\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ ORDERED */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t2]                                               |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalProject                                                    |\n| --------------PhysicalOlapScan[t1]                                             |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t3]                                               |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: ORDERED                                                                  |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u4E0E Leading Hint \u7684\u5173\u7CFB\uFF1A"}),"\n",(0,s.jsx)(i.p,{children:"\u5F53 Ordered Hint \u548C Leading Hint \u540C\u65F6\u4F7F\u7528\u65F6\uFF0COrdered Hint \u5C06\u4F18\u5148\u4E8E Leading Hint\u3002\u8FD9\u610F\u5473\u7740\uFF0C\u5373\u4F7F\u6307\u5B9A\u4E86 Leading Hint\uFF0C\u5982\u679C\u540C\u65F6\u5B58\u5728 Ordered Hint\uFF0C\u67E5\u8BE2\u8BA1\u5212\u5C06\u6309\u7167 Ordered Hint \u7684\u89C4\u5219\u6765\u6267\u884C\uFF0C\u800C Leading Hint \u5C06\u88AB\u5FFD\u7565\u3002\u4EE5\u4E0B\u662F\u4E00\u4E2A\u793A\u4F8B\uFF0C\u5C55\u793A\u4E86\u5F53\u4E24\u8005\u540C\u65F6\u4F7F\u7528\u65F6\u7684\u60C5\u51B5\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ ORDERED LEADING(t1 t2 t3) */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n  +--------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                |\n  +--------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                             |\n  | --PhysicalDistribute[DistributionSpecGather]                                   |\n  | ----PhysicalProject                                                            |\n  | ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n  | --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n  | ----------PhysicalProject                                                      |\n  | ------------PhysicalOlapScan[t2]                                               |\n  | ----------PhysicalDistribute[DistributionSpecHash]                             |\n  | ------------PhysicalProject                                                    |\n  | --------------PhysicalOlapScan[t1]                                             |\n  | --------PhysicalDistribute[DistributionSpecHash]                               |\n  | ----------PhysicalProject                                                      |\n  | ------------PhysicalOlapScan[t3]                                               |\n  |                                                                                |\n  | Hint log:                                                                      |\n  | Used: ORDERED                                                                  |\n  | UnUsed: leading(t1 t2 t3)                                                      |\n  | SyntaxError:                                                                   |\n  +--------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(i.h2,{id:"\u603B\u7ED3",children:"\u603B\u7ED3"}),"\n",(0,s.jsx)(i.p,{children:"Leading Hint \u662F\u4E00\u4E2A\u5F3A\u5927\u7684\u624B\u5DE5\u63A7\u5236 join order \u7684\u7279\u6027\uFF0C\u5728\u751F\u4EA7\u4E1A\u52A1\u8C03\u4F18\u4E2D\u5E94\u7528\u5E7F\u6CDB\u3002\u4F7F\u7528\u597D leading hint \u80FD\u591F\u6EE1\u8DB3\u73B0\u573A\u9488\u5BF9 join order \u7684\u8C03\u4F18\u9700\u6C42\uFF0C\u589E\u52A0\u7CFB\u7EDF\u63A7\u5236\u7684\u7075\u6D3B\u6027\u3002Ordered hint \u662F\u4E00\u79CD\u7279\u6B8A\u7684 leading hint\uFF0C\u7528\u4E8E\u56FA\u5B9A\u5F53\u524D\u4E1A\u52A1\u7684 join order \u4E3A\u6587\u672C\u5E8F\uFF0C\u4F7F\u7528\u65F6\u9700\u8981\u6CE8\u610F\u548C\u5176\u4ED6 Hint \u4E4B\u95F4\u7684\u4F18\u5148\u7EA7\u5173\u7CFB\u3002"})]})}function d(n={}){let{wrapper:i}={...(0,l.a)(),...n.components};return i?(0,s.jsx)(i,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},250065:function(n,i,t){t.d(i,{Z:function(){return c},a:function(){return a}});var e=t(667294);let s={},l=e.createContext(s);function a(n){let i=e.useContext(l);return e.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function c(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),e.createElement(l.Provider,{value:i},n.children)}}}]);