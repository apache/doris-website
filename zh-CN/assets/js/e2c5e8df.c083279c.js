"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["429741"],{972889:function(n,i,t){t.r(i),t.d(i,{default:()=>d,frontMatter:()=>a,metadata:()=>e,assets:()=>o,toc:()=>r,contentTitle:()=>c});var e=JSON.parse('{"id":"query/join-optimization/join-hint","title":"Join Hint","description":"Doris 2.0.4 \u7248\u672C\u4E4B\u540E\u652F\u6301 Join Hint \u529F\u80FD","source":"@site/i18n/zh-CN/docusaurus-plugin-content-docs/version-2.0/query/join-optimization/join-hint.md","sourceDirName":"query/join-optimization","slug":"/query/join-optimization/join-hint","permalink":"/zh-CN/docs/2.0/query/join-optimization/join-hint","draft":false,"unlisted":false,"tags":[],"version":"2.0","frontMatter":{"title":"Join Hint","language":"zh-CN"},"sidebar":"docs","previous":{"title":"Runtime Filter","permalink":"/zh-CN/docs/2.0/query/join-optimization/runtime-filter"},"next":{"title":"BITMAP \u7CBE\u51C6\u53BB\u91CD","permalink":"/zh-CN/docs/2.0/query/duplicate/orthogonal-bitmap-manual"}}'),s=t("785893"),l=t("250065");let a={title:"Join Hint",language:"zh-CN"},c=void 0,o={},r=[{value:"\u80CC\u666F",id:"\u80CC\u666F",level:2},{value:"Leading hint \u4F7F\u7528\u8BF4\u660E",id:"leading-hint-\u4F7F\u7528\u8BF4\u660E",level:2},{value:"\u57FA\u672C\u7528\u4F8B",id:"\u57FA\u672C\u7528\u4F8B",level:3},{value:"\u6269\u5C55\u573A\u666F",id:"\u6269\u5C55\u573A\u666F",level:3},{value:"Non-inner join:",id:"non-inner-join",level:3},{value:"View",id:"view",level:3},{value:"\u4E0E ordered \u6DF7\u5408\u4F7F\u7528",id:"\u4E0E-ordered-\u6DF7\u5408\u4F7F\u7528",level:3},{value:"\u4F7F\u7528\u9650\u5236",id:"\u4F7F\u7528\u9650\u5236",level:3},{value:"OrderedHint \u4F7F\u7528\u8BF4\u660E",id:"orderedhint-\u4F7F\u7528\u8BF4\u660E",level:2},{value:"DistributeHint \u4F7F\u7528\u8BF4\u660E",id:"distributehint-\u4F7F\u7528\u8BF4\u660E",level:2},{value:"\u5F85\u652F\u6301",id:"\u5F85\u652F\u6301",level:2}];function h(n){let i={admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsx)(i.p,{children:"Doris 2.0.4 \u7248\u672C\u4E4B\u540E\u652F\u6301 Join Hint \u529F\u80FD"})}),"\n",(0,s.jsx)(i.h2,{id:"\u80CC\u666F",children:"\u80CC\u666F"}),"\n",(0,s.jsx)(i.p,{children:'\u5728\u6570\u636E\u5E93\u4E2D\uFF0C"Hint" \u662F\u4E00\u79CD\u7528\u4E8E\u6307\u5BFC\u67E5\u8BE2\u4F18\u5316\u5668\u6267\u884C\u8BA1\u5212\u7684\u6307\u4EE4\u3002\u901A\u8FC7\u5728 SQL \u8BED\u53E5\u4E2D\u5D4C\u5165 Hint\uFF0C\u53EF\u4EE5\u5F71\u54CD\u4F18\u5316\u5668\u7684\u51B3\u7B56\uFF0C\u4EE5\u9009\u4E2D\u671F\u671B\u7684\u6267\u884C\u8DEF\u5F84\u3002\u4EE5\u4E0B\u662F\u4E00\u4E2A\u4F7F\u7528 Hint \u7684\u80CC\u666F\u793A\u4F8B\uFF1A\n\u5047\u8BBE\u6709\u4E00\u4E2A\u5305\u542B\u5927\u91CF\u6570\u636E\u7684\u8868\uFF0C\u800C\u4F60\u77E5\u9053\u5728\u67D0\u4E9B\u7279\u5B9A\u60C5\u51B5\u4E0B\uFF0C\u5728\u4E00\u4E2A\u67E5\u8BE2\u4E2D\uFF0C\u8868\u7684\u8FDE\u63A5\u987A\u5E8F\u53EF\u80FD\u4F1A\u5F71\u54CD\u67E5\u8BE2\u6027\u80FD\u3002Leading Hint \u5141\u8BB8\u4F60\u6307\u5B9A\u5E0C\u671B\u4F18\u5316\u5668\u9075\u5FAA\u7684\u8868\u8FDE\u63A5\u7684\u987A\u5E8F\u3002'}),"\n",(0,s.jsx)(i.p,{children:"\u4F8B\u5982\uFF0C\u8003\u8651\u4EE5\u4E0B SQL \u67E5\u8BE2\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select * from t1 join t2 on t1.c1 = c2;\n+-------------------------------------------+\n| Explain String                            |\n+-------------------------------------------+\n| PhysicalResultSink                        |\n| --PhysicalDistribute                      |\n| ----PhysicalProject                       |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2) |\n| --------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                |\n| ----------PhysicalOlapScan[t1]            |\n+-------------------------------------------+\n7 rows in set (0.06 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u5728\u4E0A\u8FF0\u4F8B\u5B50\u91CC\u9762\uFF0C\u5728\u6267\u884C\u6548\u7387\u4E0D\u7406\u60F3\u7684\u65F6\u5019\uFF0C\u6211\u4EEC\u5E0C\u671B\u8C03\u6574\u4E0B join \u987A\u5E8F\u800C\u4E0D\u6539\u53D8\u539F\u59CB sql \u4EE5\u514D\u5F71\u54CD\u5230\u7528\u6237\u539F\u59CB\u573A\u666F\u4E14\u80FD\u8FBE\u5230\u8C03\u4F18\u7684\u76EE\u7684\u3002\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528 leading \u4EFB\u610F\u6539\u53D8 t1 \u548C t2 \u7684 join \u987A\u5E8F\u3002\u4F8B\u5982\u53EF\u4EE5\u5199\u6210\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+-----------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                     |\n+-----------------------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                                  |\n| --PhysicalDistribute                                                                                |\n| ----PhysicalProject                                                                                 |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() build RFs:RF0 c1->[c2] |\n| --------PhysicalOlapScan[t2] apply RFs: RF0                                                         |\n| --------PhysicalDistribute                                                                          |\n| ----------PhysicalOlapScan[t1]                                                                      |\n|                                                                                                     |\n| Hint log:                                                                                           |\n| Used: leading(t2 t1)                                                                                |\n| UnUsed:                                                                                             |\n| SyntaxError:                                                                                        |\n+-----------------------------------------------------------------------------------------------------+\n12 rows in set (0.06 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u5728\u8FD9\u4E2A\u4F8B\u5B50\u4E2D\uFF0C\u4F7F\u7528\u4E86 /*+ leading(t2 t1) */ \u8FD9\u4E2A Hint\u3002\u8FD9\u4E2A Hint \u544A\u8BC9\u4F18\u5316\u5668\u5728\u6267\u884C\u8BA1\u5212\u4E2D\u4F7F\u7528\u6307\u5B9A\u8868\uFF08t2\uFF09\u4F5C\u4E3A\u9A71\u52A8\u8868\uFF0C\u5E76\u7F6E\u4E8E (t1) \u4E4B\u524D\u3002\n\u672C\u6587\u4E3B\u8981\u9610\u8FF0\u5982\u4F55\u5728 Doris \u91CC\u9762\u4F7F\u7528 join \u76F8\u5173\u7684 hint\uFF1Aleading hint\u3001ordered hint \u548C distribute hint"}),"\n",(0,s.jsx)(i.h2,{id:"leading-hint-\u4F7F\u7528\u8BF4\u660E",children:"Leading hint \u4F7F\u7528\u8BF4\u660E"}),"\n",(0,s.jsx)(i.p,{children:"Leading Hint \u7528\u4E8E\u6307\u5BFC\u4F18\u5316\u5668\u786E\u5B9A\u67E5\u8BE2\u8BA1\u5212\u7684\u8FDE\u63A5\u987A\u5E8F\u3002\u5728\u4E00\u4E2A\u67E5\u8BE2\u4E2D\uFF0C\u8868\u7684\u8FDE\u63A5\u987A\u5E8F\u53EF\u80FD\u4F1A\u5F71\u54CD\u67E5\u8BE2\u6027\u80FD\u3002"}),"\n",(0,s.jsx)(i.p,{children:"Leading Hint \u5141\u8BB8\u4F60\u6307\u5B9A\u5E0C\u671B\u4F18\u5316\u5668\u9075\u5FAA\u7684\u8868\u8FDE\u63A5\u7684\u987A\u5E8F\u3002"}),"\n",(0,s.jsxs)(i.p,{children:["\u5728 doris \u91CC\u9762\uFF0C\u5176\u8BED\u6CD5\u4E3A /",(0,s.jsxs)(i.em,{children:["+LEADING( tablespec [ tablespec ]...  ) ",(0,s.jsx)(i.em,{children:'/,leading \u7531"/'}),'+"\u548C"']}),'/"\u5305\u56F4\u5E76\u7F6E\u4E8E select \u8BED\u53E5\u91CC\u9762 select \u7684\u6B63\u540E\u65B9\u3002']}),"\n",(0,s.jsx)(i.p,{children:"\u6CE8\u610F\uFF0Cleading \u540E\u65B9\u7684 '/' \u548C selectlist \u9700\u8981\u9694\u5F00\u81F3\u5C11\u4E00\u4E2A\u5206\u5272\u7B26\u4F8B\u5982\u7A7A\u683C\u3002\u81F3\u5C11\u9700\u8981\u5199\u4E24\u4E2A\u4EE5\u4E0A\u7684\u8868\u624D\u8BA4\u4E3A\u8FD9\u4E2A leadinghint \u662F\u5408\u7406\u7684\u3002\u4E14\u4EFB\u610F\u7684 join \u91CC\u9762\u53EF\u4EE5\u7528\u5927\u62EC\u53F7\u62EC\u53F7\u8D77\u6765\uFF0C\u6765\u663E\u5F0F\u5730\u6307\u5B9A joinTree \u7684\u5F62\u72B6\u3002\u4F8B\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                              |\n+------------------------------------------------------------------------------+\n| PhysicalResultSink                                                           |\n| --PhysicalDistribute[DistributionSpecGather]                                 |\n| ----PhysicalProject                                                          |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| --------PhysicalOlapScan[t2]                                                 |\n| --------PhysicalDistribute[DistributionSpecHash]                             |\n| ----------PhysicalOlapScan[t1]                                               |\n|                                                                              |\n| Hint log:                                                                    |\n| Used: leading(t2 t1)                                                         |\n| UnUsed:                                                                      |\n| SyntaxError:                                                                 |\n+------------------------------------------------------------------------------+\n12 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u5F53 leadinghint \u4E0D\u751F\u6548\u7684\u65F6\u5019\u4F1A\u8D70\u6B63\u5E38\u7684\u6D41\u7A0B\u751F\u6210\u8BA1\u5212\uFF0Cexplain \u4F1A\u663E\u793A\u4F7F\u7528\u7684 hint \u662F\u5426\u751F\u6548\uFF0C\u4E3B\u8981\u5206\u4E09\u79CD\u6765\u663E\u793A\uFF1A"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Used\uFF1Aleading hint \u6B63\u5E38\u751F\u6548"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Unused\uFF1A\u8FD9\u91CC\u4E0D\u652F\u6301\u7684\u60C5\u51B5\u5305\u542B leading \u6307\u5B9A\u7684 join order \u4E0E\u539F sql \u4E0D\u7B49\u4EF7\u6216\u672C\u7248\u672C\u6682\u4E0D\u652F\u6301\u7279\u6027"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"SyntaxError\uFF1A\u6307 leading hint \u8BED\u6CD5\u9519\u8BEF\uFF0C\u5982\u627E\u4E0D\u5230\u5BF9\u5E94\u7684\u8868\u7B49"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"leading hint \u8BED\u6CD5\u9ED8\u8BA4\u9020\u51FA\u6765\u5DE6\u6DF1\u6811\uFF0C\u4F8B\uFF1Aselect /*+ leading(t1 t2 t3) */ * from t1 join t2 on...\u9ED8\u8BA4\u6307\u5B9A\u51FA\u6765"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"      join\n     /    \\\n   join    t3\n  /    \\\n t1    t2\n\nmysql> explain shape plan select /*+ leading(t1 t2 t3) */ * from t1 join t2 on c1 = c2 join t3 on c2=c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: leading(t1 t2 t3)                                                        |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n15 rows in set (0.00 sec)\n"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\u540C\u65F6\u5141\u8BB8\u4F7F\u7528\u5927\u62EC\u53F7\u6307\u5B9A join \u6811\u5F62\u72B6\u3002\u4F8B\uFF1A/*+ leading(t1 {t2 t3}) */\njoin\n/    ",(0,s.jsx)(i.br,{}),"\nt1    join\n/    ",(0,s.jsx)(i.br,{}),"\nt2    t3"]}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 join t2 on c1 = c2 join t3 on c2=c3;\n+----------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                  |\n+----------------------------------------------------------------------------------+\n| PhysicalResultSink                                                               |\n| --PhysicalDistribute[DistributionSpecGather]                                     |\n| ----PhysicalProject                                                              |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()     |\n| --------PhysicalOlapScan[t1]                                                     |\n| --------PhysicalDistribute[DistributionSpecHash]                                 |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ------------PhysicalOlapScan[t2]                                                 |\n| ------------PhysicalDistribute[DistributionSpecHash]                             |\n| --------------PhysicalOlapScan[t3]                                               |\n|                                                                                  |\n| Hint log:                                                                        |\n| Used: leading(t1 { t2 t3 })                                                      |\n| UnUsed:                                                                          |\n| SyntaxError:                                                                     |\n+----------------------------------------------------------------------------------+\n15 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"\u5F53\u6709 view \u4F5C\u4E3A\u522B\u540D\u53C2\u4E0E joinReorder \u7684\u65F6\u5019\u53EF\u4EE5\u6307\u5B9A\u5BF9\u5E94\u7684 view \u4F5C\u4E3A leading \u7684\u53C2\u6570\u3002\u4F8B\uFF1A"}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n  +--------------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                      |\n  +--------------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                                   |\n  | --hashAgg[GLOBAL]                                                                    |\n  | ----PhysicalDistribute[DistributionSpecGather]                                       |\n  | ------hashAgg[LOCAL]                                                                 |\n  | --------PhysicalProject                                                              |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()  |\n  | ------------PhysicalProject                                                          |\n  | --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n  | ----------------PhysicalProject                                                      |\n  | ------------------PhysicalOlapScan[t2]                                               |\n  | ----------------PhysicalDistribute[DistributionSpecHash]                             |\n  | ------------------PhysicalProject                                                    |\n  | --------------------PhysicalOlapScan[t3]                                             |\n  | ------------PhysicalDistribute[DistributionSpecHash]                                 |\n  | --------------PhysicalProject                                                        |\n  | ----------------PhysicalOlapScan[t1]                                                 |\n  |                                                                                      |\n  | Hint log:                                                                            |\n  | Used: leading(alias t1)                                                              |\n  | UnUsed:                                                                              |\n  | SyntaxError:                                                                         |\n  +--------------------------------------------------------------------------------------+\n  21 rows in set (0.06 sec)\n"})}),"\n",(0,s.jsx)(i.h3,{id:"\u57FA\u672C\u7528\u4F8B",children:"\u57FA\u672C\u7528\u4F8B"}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsx)(i.p,{children:"\u6CE8\u610F\u8FD9\u91CC\u5217\u547D\u540D\u548C\u8868\u547D\u540D\u76F8\u5173\uFF0C\u4F8B\uFF1A\u53EA\u6709 t1 \u4E2D\u6709 c1 \u5B57\u6BB5\uFF0C\u540E\u7EED\u4F8B\u5B50\u4E3A\u4E86\u7B80\u5316\u4F1A\u5C06 t1.c1 \u76F4\u63A5\u5199\u6210 c1"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"CREATE DATABASE testleading;\nUSE testleading;\n\ncreate table t1 (c1 int, c11 int) distributed by hash(c1) buckets 3 properties('replication_num' = '1');\ncreate table t2 (c2 int, c22 int) distributed by hash(c2) buckets 3 properties('replication_num' = '1');\ncreate table t3 (c3 int, c33 int) distributed by hash(c3) buckets 3 properties('replication_num' = '1');\ncreate table t4 (c4 int, c44 int) distributed by hash(c4) buckets 3 properties('replication_num' = '1');\n\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u4E3E\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50\uFF0C\u5F53\u6211\u4EEC\u9700\u8981\u4EA4\u6362 t1 \u548C t2 \u7684 join \u987A\u5E8F\u7684\u65F6\u5019\u53EA\u9700\u8981\u5728\u524D\u9762\u52A0\u4E0A leading(t2 t1) \u5373\u53EF\uFF0Cexplain \u7684\u65F6\u5019\u4F1A\u663E\u793A\u662F\u5426\u7528\u4E0A\u4E86\u8FD9\u4E2A hint\u3002"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"\u539F\u59CB plan"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select * from t1 join t2 on t1.c1 = c2;\n+-------------------------------------------+\n| Explain String                            |\n+-------------------------------------------+\n| PhysicalResultSink                        |\n| --PhysicalDistribute                      |\n| ----PhysicalProject                       |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2) |\n| --------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                |\n| ----------PhysicalOlapScan[t1]            |\n+-------------------------------------------+\n7 rows in set (0.06 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Leading plan"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                              |\n+------------------------------------------------------------------------------+\n| PhysicalResultSink                                                           |\n| --PhysicalDistribute[DistributionSpecGather]                                 |\n| ----PhysicalProject                                                          |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| --------PhysicalOlapScan[t2]                                                 |\n| --------PhysicalDistribute[DistributionSpecHash]                             |\n| ----------PhysicalOlapScan[t1]                                               |\n|                                                                              |\n| Hint log:                                                                    |\n| Used: leading(t2 t1)                                                         |\n| UnUsed:                                                                      |\n| SyntaxError:                                                                 |\n+------------------------------------------------------------------------------+\n12 rows in set (0.00 sec)\n"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"hint \u6548\u679C\u5C55\u793A"}),"\n\uFF08Used unused\uFF09"]}),"\n",(0,s.jsx)(i.p,{children:"\u82E5 leading hint \u6709\u8BED\u6CD5\u9519\u8BEF\uFF0Cexplain \u7684\u65F6\u5019\u4F1A\u5728 syntax error \u91CC\u9762\u663E\u793A\u76F8\u5E94\u7684\u4FE1\u606F\uFF0C\u4F46\u662F\u8BA1\u5212\u80FD\u7167\u5E38\u751F\u6210\uFF0C\u53EA\u4E0D\u8FC7\u6CA1\u6709\u4F7F\u7528 leading \u800C\u5DF2"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t2 t3) */ * from t1 join t2 on t1.c1 = c2;\n+--------------------------------------------------------+\n| Explain String                                         |\n+--------------------------------------------------------+\n| PhysicalResultSink                                     |\n| --PhysicalDistribute                                   |\n| ----PhysicalProject                                    |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2)              |\n| --------PhysicalOlapScan[t1]                           |\n| --------PhysicalDistribute                             |\n| ----------PhysicalOlapScan[t2]                         |\n|                                                        |\n| Used:                                                  |\n| UnUsed:                                                |\n| SyntaxError: leading(t2 t3) Msg:can not find table: t3 |\n+--------------------------------------------------------+\n11 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsx)(i.h3,{id:"\u6269\u5C55\u573A\u666F",children:"\u6269\u5C55\u573A\u666F"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"\u5DE6\u6DF1\u6811"})}),"\n",(0,s.jsx)(i.p,{children:"\u5F53\u6211\u4EEC\u4E0D\u4F7F\u7528\u4EFB\u4F55\u62EC\u53F7\u7684\u60C5\u51B5\u4E0B leading \u4F1A\u9ED8\u8BA4\u751F\u6210\u5DE6\u6DF1\u6811"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 t2 t3) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: leading(t1 t2 t3)                                                        |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n15 rows in set (0.10 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"\u53F3\u6DF1\u6811"})}),"\n",(0,s.jsx)(i.p,{children:"\u5F53\u6211\u4EEC\u60F3\u5C06\u8BA1\u5212\u7684\u5F62\u72B6\u505A\u6210\u53F3\u6DF1\u6811\u6216\u8005 bushy \u6811\u6216\u8005 zigzag \u6811\u7684\u65F6\u5019\uFF0C\u53EA\u9700\u8981\u52A0\u4E0A\u5927\u62EC\u53F7\u6765\u9650\u5236 plan \u7684\u5F62\u72B6\u5373\u53EF\uFF0C\u4E0D\u9700\u8981\u50CF oracle \u4E00\u6837\u7528 swap \u4ECE\u5DE6\u6DF1\u6811\u4E00\u6B65\u6B65\u8C03\u6574\u3002"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3;\n+-----------------------------------------------+\n| Explain String                                |\n+-----------------------------------------------+\n| PhysicalResultSink                            |\n| --PhysicalDistribute                          |\n| ----PhysicalProject                           |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2)     |\n| --------PhysicalOlapScan[t1]                  |\n| --------PhysicalDistribute                    |\n| ----------hashJoin[INNER_JOIN](t2.c2 = t3.c3) |\n| ------------PhysicalOlapScan[t2]              |\n| ------------PhysicalDistribute                |\n| --------------PhysicalOlapScan[t3]            |\n|                                               |\n| Used: leading(t1 { t2 t3 })                   |\n| UnUsed:                                       |\n| SyntaxError:                                  |\n+-----------------------------------------------+\n14 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Bushy \u6811"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading({t1 t2} {t3 t4}) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3 join t4 on c3 = c4;\n+-----------------------------------------------+\n| Explain String                                |\n+-----------------------------------------------+\n| PhysicalResultSink                            |\n| --PhysicalDistribute                          |\n| ----PhysicalProject                           |\n| ------hashJoin[INNER_JOIN](t2.c2 = t3.c3)     |\n| --------hashJoin[INNER_JOIN](t1.c1 = t2.c2)   |\n| ----------PhysicalOlapScan[t1]                |\n| ----------PhysicalDistribute                  |\n| ------------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                    |\n| ----------hashJoin[INNER_JOIN](t3.c3 = t4.c4) |\n| ------------PhysicalOlapScan[t3]              |\n| ------------PhysicalDistribute                |\n| --------------PhysicalOlapScan[t4]            |\n|                                               |\n| Used: leading({ t1 t2 } { t3 t4 })            |\n| UnUsed:                                       |\n| SyntaxError:                                  |\n+-----------------------------------------------+\n17 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Zig-Zag \u6811"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 {t2 t3} t4) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3 join t4 on c3 = c4;\n+--------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                      |\n+--------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                   |\n| --PhysicalDistribute[DistributionSpecGather]                                         |\n| ----PhysicalProject                                                                  |\n| ------hashJoin[INNER_JOIN] hashCondition=((t3.c3 = t4.c4)) otherCondition=()         |\n| --------PhysicalDistribute[DistributionSpecHash]                                     |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()     |\n| ------------PhysicalOlapScan[t1]                                                     |\n| ------------PhysicalDistribute[DistributionSpecHash]                                 |\n| --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ----------------PhysicalOlapScan[t2]                                                 |\n| ----------------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------------PhysicalOlapScan[t3]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                                     |\n| ----------PhysicalOlapScan[t4]                                                       |\n|                                                                                      |\n| Hint log:                                                                            |\n| Used: leading(t1 { t2 t3 } t4)                                                       |\n| UnUsed:                                                                              |\n| SyntaxError:                                                                         |\n+--------------------------------------------------------------------------------------+\n19 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsx)(i.h3,{id:"non-inner-join",children:"Non-inner join:"}),"\n",(0,s.jsx)(i.p,{children:"\u5F53\u9047\u5230\u975E inner-join \u7684\u65F6\u5019\uFF0C\u4F8B\u5982 Outer join \u6216\u8005 semi/anti join \u7684\u65F6\u5019\uFF0Cleading hint \u4F1A\u6839\u636E\u539F\u59CB sql \u8BED\u4E49\u81EA\u52A8\u63A8\u5BFC\u5404\u4E2A join \u7684 join \u65B9\u5F0F\u3002\u82E5\u9047\u5230\u4E0E\u539F\u59CB sql \u8BED\u4E49\u4E0D\u540C\u7684 leading hint \u6216\u8005\u751F\u6210\u4E0D\u4E86\u7684\u60C5\u51B5\u5219\u4F1A\u653E\u5230 unused \u91CC\u9762\uFF0C\u4F46\u662F\u4E0D\u5F71\u54CD\u8BA1\u5212\u6B63\u5E38\u6D41\u7A0B\u7684\u751F\u6210\u3002\n\u4E0B\u9762\u662F\u4E0D\u80FD\u4EA4\u6362\u7684\u4F8B\u5B50\uFF1A"}),"\n",(0,s.jsxs)(i.p,{children:["-------- test outer join which can not swap",(0,s.jsx)(i.br,{}),"\n--  t1 leftjoin (t2 join t3 on (P23)) on (P12) != (t1 leftjoin t2 on (P12)) join t3 on (P23)"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used:                                                                          |\n| UnUsed: leading(t1 { t2 t3 })                                                  |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n15 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u4E0B\u9762\u662F\u4E00\u4E9B\u53EF\u4EE5\u4EA4\u6362\u7684\u4F8B\u5B50\u548C\u4E0D\u80FD\u4EA4\u6362\u7684\u4F8B\u5B50\uFF0C\u8BFB\u8005\u53EF\u81EA\u884C\u9A8C\u8BC1"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"-------- test outer join which can swap\n-- (t1 leftjoin t2  on (P12)) innerjoin t3 on (P13) = (t1 innerjoin t3 on (P13)) leftjoin t2  on (P12)\nexplain shape plan select * from t1 left join t2 on c1 = c2 join t3 on c1 = c3;\nexplain shape plan select /*+ leading(t1 t3 t2) */ * from t1 left join t2 on c1 = c2 join t3 on c1 = c3;\n\n-- (t1 leftjoin t2  on (P12)) leftjoin t3 on (P13) = (t1 leftjoin t3 on (P13)) leftjoin t2  on (P12)\nexplain shape plan select * from t1 left join t2 on c1 = c2 left join t3 on c1 = c3;\nexplain shape plan select /*+ leading(t1 t3 t2) */ * from t1 left join t2 on c1 = c2 left join t3 on c1 = c3;\n\n-- (t1 leftjoin t2  on (P12)) leftjoin t3 on (P23) = t1 leftjoin (t2  leftjoin t3 on (P23)) on (P12)\nselect /*+ leading(t2 t3 t1) SWAP_INPUT(t1) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\n\n-------- test outer join which can not swap\n--  t1 leftjoin (t2  join t3 on (P23)) on (P12) != (t1 leftjoin t2  on (P12)) join t3 on (P23)\n-- eliminated to inner join\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 join t3 on c2 = c3;\nexplain graph select /*+ leading(t1 t2 t3) */ * from t1 left join (select * from t2 join t3 on c2 = c3) on c1 = c2;\n\n-- test semi join\nexplain shape plan select * from t1 where c1 in (select c2 from t2);\nexplain shape plan select /*+ leading(t2 t1) */ * from t1 where c1 in (select c2 from t2);\n\n-- test anti join\nexplain shape plan select * from t1 where exists (select c2 from t2);\n"})}),"\n",(0,s.jsx)(i.h3,{id:"view",children:"View"}),"\n",(0,s.jsx)(i.p,{children:"\u9047\u5230\u522B\u540D\u7684\u60C5\u51B5\uFF0C\u53EF\u4EE5\u5C06\u522B\u540D\u4F5C\u4E3A\u4E00\u4E2A\u5B8C\u6574\u7684\u5B50\u6811\u8FDB\u884C\u6307\u5B9A\uFF0C\u5B50\u6811\u91CC\u9762\u7684 joinOrder \u7531\u6587\u672C\u5E8F\u751F\u6210\u3002"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql>  explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n+--------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                      |\n+--------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                   |\n| --hashAgg[GLOBAL]                                                                    |\n| ----PhysicalDistribute[DistributionSpecGather]                                       |\n| ------hashAgg[LOCAL]                                                                 |\n| --------PhysicalProject                                                              |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()  |\n| ------------PhysicalProject                                                          |\n| --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ----------------PhysicalProject                                                      |\n| ------------------PhysicalOlapScan[t2]                                               |\n| ----------------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------------PhysicalProject                                                    |\n| --------------------PhysicalOlapScan[t3]                                             |\n| ------------PhysicalDistribute[DistributionSpecHash]                                 |\n| --------------PhysicalProject                                                        |\n| ----------------PhysicalOlapScan[t1]                                                 |\n|                                                                                      |\n| Hint log:                                                                            |\n| Used: leading(alias t1)                                                              |\n| UnUsed:                                                                              |\n| SyntaxError:                                                                         |\n+--------------------------------------------------------------------------------------+\n21 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsx)(i.h3,{id:"\u4E0E-ordered-\u6DF7\u5408\u4F7F\u7528",children:"\u4E0E ordered \u6DF7\u5408\u4F7F\u7528"}),"\n",(0,s.jsx)(i.p,{children:"\u5F53\u4E0E ordered hint \u6DF7\u5408\u4F7F\u7528\u7684\u65F6\u5019\u4EE5 ordered hint \u4E3A\u4E3B\uFF0C\u5373 ordered hint \u751F\u6548\u4F18\u5148\u7EA7\u9AD8\u4E8E leading hint\u3002\u4F8B\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql>  explain shape plan select /*+ ORDERED LEADING(t1 t2 t3) */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t2]                                               |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalProject                                                    |\n| --------------PhysicalOlapScan[t1]                                             |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t3]                                               |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: ORDERED                                                                  |\n| UnUsed: leading(t1 t2 t3)                                                      |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n18 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsx)(i.h3,{id:"\u4F7F\u7528\u9650\u5236",children:"\u4F7F\u7528\u9650\u5236"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"\u5F53\u524D\u7248\u672C\u53EA\u652F\u6301\u4F7F\u7528\u4E00\u4E2A leadingHint\u3002\u82E5\u548C\u5B50\u67E5\u8BE2\u540C\u65F6\u4F7F\u7528 leadinghint \u7684\u8BDD\u5219\u67E5\u8BE2\u4F1A\u62A5\u9519\u3002\u4F8B\uFF08\u8FD9\u4E2A\u4F8B\u5B50 explain \u4F1A\u62A5\u9519\uFF0C\u4F46\u662F\u4F1A\u8D70\u6B63\u5E38\u7684\u8DEF\u5F84\u751F\u6210\u8BA1\u5212\uFF09\uFF1A"}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql>  explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select /*+ leading(t3 t2) */ c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n  +----------------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                        |\n  +----------------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                                     |\n  | --hashAgg[GLOBAL]                                                                      |\n  | ----PhysicalDistribute[DistributionSpecGather]                                         |\n  | ------hashAgg[LOCAL]                                                                   |\n  | --------PhysicalProject                                                                |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()    |\n  | ------------PhysicalProject                                                            |\n  | --------------PhysicalOlapScan[t1]                                                     |\n  | ------------PhysicalDistribute[DistributionSpecHash]                                   |\n  | --------------PhysicalProject                                                          |\n  | ----------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n  | ------------------PhysicalProject                                                      |\n  | --------------------PhysicalOlapScan[t2]                                               |\n  | ------------------PhysicalDistribute[DistributionSpecHash]                             |\n  | --------------------PhysicalProject                                                    |\n  | ----------------------PhysicalOlapScan[t3]                                             |\n  |                                                                                        |\n  | Hint log:                                                                              |\n  | Used:                                                                                  |\n  | UnUsed: leading(alias t1)                                                              |\n  | SyntaxError: leading(t3 t2) Msg:one query block can only have one leading clause       |\n  +----------------------------------------------------------------------------------------+\n  21 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsx)(i.h2,{id:"orderedhint-\u4F7F\u7528\u8BF4\u660E",children:"OrderedHint \u4F7F\u7528\u8BF4\u660E"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u4F7F\u7528 ordered hint \u4F1A\u8BA9 join tree \u7684\u5F62\u72B6\u56FA\u5B9A\u4E0B\u6765\uFF0C\u6309\u7167\u6587\u672C\u5E8F\u6765\u663E\u793A"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\u8BED\u6CD5\u4E3A /",(0,s.jsxs)(i.em,{children:["+ ORDERED ",(0,s.jsx)(i.em,{children:'/,leading \u7531"/'}),'+"\u548C"']}),'/"\u5305\u56F4\u5E76\u7F6E\u4E8E select \u8BED\u53E5\u91CC\u9762 select \u7684\u6B63\u540E\u65B9\uFF0C\u4F8B\uFF1A\nexplain shape plan select /*+ ORDERED */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\njoin\n/    ',(0,s.jsx)(i.br,{}),"\njoin    t3\n/    ",(0,s.jsx)(i.br,{}),"\nt2    t1"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ ORDERED */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t2]                                               |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalProject                                                    |\n| --------------PhysicalOlapScan[t1]                                             |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t3]                                               |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: ORDERED                                                                  |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n18 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"\u5F53 ordered hint \u548C leading hint \u540C\u65F6\u4F7F\u7528\u65F6\u4EE5 ordered hint \u4E3A\u51C6\uFF0Cleading hint \u4F1A\u5931\u6548"}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ ORDERED LEADING(t1 t2 t3) */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n  +--------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                |\n  +--------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                             |\n  | --PhysicalDistribute[DistributionSpecGather]                                   |\n  | ----PhysicalProject                                                            |\n  | ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n  | --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n  | ----------PhysicalProject                                                      |\n  | ------------PhysicalOlapScan[t2]                                               |\n  | ----------PhysicalDistribute[DistributionSpecHash]                             |\n  | ------------PhysicalProject                                                    |\n  | --------------PhysicalOlapScan[t1]                                             |\n  | --------PhysicalDistribute[DistributionSpecHash]                               |\n  | ----------PhysicalProject                                                      |\n  | ------------PhysicalOlapScan[t3]                                               |\n  |                                                                                |\n  | Hint log:                                                                      |\n  | Used: ORDERED                                                                  |\n  | UnUsed: leading(t1 t2 t3)                                                      |\n  | SyntaxError:                                                                   |\n  +--------------------------------------------------------------------------------+\n  18 rows in set (0.02 sec)\n"})}),"\n",(0,s.jsx)(i.h2,{id:"distributehint-\u4F7F\u7528\u8BF4\u660E",children:"DistributeHint \u4F7F\u7528\u8BF4\u660E"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u76EE\u524D\u53EA\u80FD\u6307\u5B9A\u53F3\u8868\u7684 distribute Type \u800C\u4E14\u53EA\u6709[shuffle] \u548C [broadcast]\u4E24\u79CD\uFF0C\u5199\u5728 join \u53F3\u8868\u524D\u9762\u4E14\u5141\u8BB8\u4E2D\u62EC\u53F7\u548C/*+ */\u4E24\u79CD\u5199\u6CD5"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u76EE\u524D\u80FD\u4F7F\u7528\u4EFB\u610F\u4E2A DistributeHint"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u5F53\u9047\u5230\u65E0\u6CD5\u6B63\u786E\u751F\u6210\u8BA1\u5212\u7684 DistributeHint\uFF0C\u6CA1\u6709\u663E\u793A\uFF0C\u6309\u6700\u5927\u52AA\u529B\u751F\u6548\uFF0C\u6700\u540E\u4EE5 explain \u663E\u793A\u7684 distribute \u65B9\u5F0F\u4E3A\u4E3B"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u5F53\u524D\u7248\u672C\u6682\u4E0D\u4E0E leading \u6DF7\u7528\uFF0C\u4E14\u5F53 distribute \u6307\u5B9A\u7684\u8868\u4F4D\u4E8E join \u53F3\u8FB9\u624D\u53EF\u751F\u6548\u3002"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u591A\u4E0E ordered \u6DF7\u7528\uFF0C\u5229\u7528\u6587\u672C\u5E8F\u628A join \u987A\u5E8F\u56FA\u5B9A\u4E0B\u6765\uFF0C\u7136\u540E\u518D\u6307\u5B9A\u76F8\u5E94\u7684 join \u91CC\u9762\u6211\u4EEC\u9884\u671F\u4F7F\u7528\u4EC0\u4E48\u6837\u7684 distribute \u65B9\u5F0F\u3002\u4F8B\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"\u4F7F\u7528\u524D\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select count(*) from t1 join t2 on t1.c1 = t2.c2;\n  +----------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                  |\n  +----------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                               |\n  | --hashAgg[GLOBAL]                                                                |\n  | ----PhysicalDistribute[DistributionSpecGather]                                   |\n  | ------hashAgg[LOCAL]                                                             |\n  | --------PhysicalProject                                                          |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n  | ------------PhysicalProject                                                      |\n  | --------------PhysicalOlapScan[t1]                                               |\n  | ------------PhysicalDistribute[DistributionSpecHash]                             |\n  | --------------PhysicalProject                                                    |\n  | ----------------PhysicalOlapScan[t2]                                             |\n  +----------------------------------------------------------------------------------+\n  11 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsx)(i.p,{children:"\u4F7F\u7528\u540E\uFF1A"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"mysql> explain shape plan select /*+ ordered */ count(*) from t2 join[broadcast] t1 on t1.c1 = t2.c2;\n  +----------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                  |\n  +----------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                               |\n  | --hashAgg[GLOBAL]                                                                |\n  | ----PhysicalDistribute[DistributionSpecGather]                                   |\n  | ------hashAgg[LOCAL]                                                             |\n  | --------PhysicalProject                                                          |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n  | ------------PhysicalProject                                                      |\n  | --------------PhysicalOlapScan[t2]                                               |\n  | ------------PhysicalDistribute[DistributionSpecReplicated]                       |\n  | --------------PhysicalProject                                                    |\n  | ----------------PhysicalOlapScan[t1]                                             |\n  |                                                                                  |\n  | Hint log:                                                                        |\n  | Used: ORDERED                                                                    |\n  | UnUsed:                                                                          |\n  | SyntaxError:                                                                     |\n  +----------------------------------------------------------------------------------+\n  16 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Explain shape plan \u91CC\u9762\u4F1A\u663E\u793A distribute \u7B97\u5B50\u76F8\u5173\u7684\u4FE1\u606F\uFF0C\u5176\u4E2D DistributionSpecReplicated \u8868\u793A\u8BE5\u7B97\u5B50\u5C06\u5BF9\u5E94\u7684\u6570\u636E\u53D8\u6210\u6240\u6709 be \u8282\u70B9\u590D\u5236\u4E00\u4EFD\uFF0CDistributionSpecGather \u8868\u793A\u5C06\u6570\u636E gather \u5230 fe \u8282\u70B9\uFF0CDistributionSpecHash \u8868\u793A\u5C06\u6570\u636E\u6309\u7167\u7279\u5B9A\u7684 hashKey \u4EE5\u53CA\u7B97\u6CD5\u6253\u6563\u5230\u4E0D\u540C\u7684 be \u8282\u70B9\u3002"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"\u5F85\u652F\u6301",children:"\u5F85\u652F\u6301"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"leadingHint \u5F85\u652F\u6301\u5B50\u67E5\u8BE2\u89E3\u5D4C\u5957\u6307\u5B9A\uFF0C\u5F53\u524D\u548C\u5B50\u67E5\u8BE2\u63D0\u5347\u4EE5\u540E\u4E0D\u80FD\u6DF7\u7528\uFF0C\u9700\u8981\u6709 hint \u6765\u63A7\u5236\u662F\u5426\u53EF\u4EE5\u89E3\u5D4C\u5957"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u9700\u8981\u65B0\u7684 distributeHint \u6765\u66F4\u597D\u4E14\u66F4\u5168\u9762\u5730\u63A7\u5236 distribute \u7B97\u5B50"}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"\u6DF7\u5408\u4F7F\u7528 leadingHint \u4E0E distributeHint \u6765\u5171\u540C\u786E\u5B9A join \u7684\u5F62\u72B6"}),"\n"]}),"\n"]})]})}function d(n={}){let{wrapper:i}={...(0,l.a)(),...n.components};return i?(0,s.jsx)(i,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},250065:function(n,i,t){t.d(i,{Z:function(){return c},a:function(){return a}});var e=t(667294);let s={},l=e.createContext(s);function a(n){let i=e.useContext(l);return e.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function c(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),e.createElement(l.Provider,{value:i},n.children)}}}]);