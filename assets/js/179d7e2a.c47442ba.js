"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["609384"],{256404:function(e,n,s){s.r(n),s.d(n,{default:()=>d,frontMatter:()=>o,metadata:()=>i,assets:()=>a,toc:()=>c,contentTitle:()=>r});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/json-functions/normalize-json-numbers-to-double","title":"NORMALIZE_JSON_NUMBERS_TO_DOUBLE","description":"\x3c!--","source":"@site/docs/sql-manual/sql-functions/scalar-functions/json-functions/normalize-json-numbers-to-double.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/json-functions","slug":"/sql-manual/sql-functions/scalar-functions/json-functions/normalize-json-numbers-to-double","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/normalize-json-numbers-to-double","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"NORMALIZE_JSON_NUMBERS_TO_DOUBLE","language":"en"},"sidebar":"docs","previous":{"title":"JSON_VALID","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-valid"},"next":{"title":"SORT_JSON_OBJECT_KEYS","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/sort-json-object-keys"}}'),l=s("785893"),t=s("250065");let o={title:"NORMALIZE_JSON_NUMBERS_TO_DOUBLE",language:"en"},r=void 0,a={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Alias",id:"alias",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Purpose",id:"purpose",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Number Conversion",id:"basic-number-conversion",level:3},{value:"Processing Nested JSON",id:"processing-nested-json",level:3},{value:"Processing NULL Values",id:"processing-null-values",level:3},{value:"Notes",id:"notes",level:2}];function u(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"NORMALIZE_JSON_NUMBERS_TO_DOUBLE"})," function converts all numeric values in a JSON to double-precision floating-point type. This function takes a JSON value as input and returns a new JSON value with all numeric types converted to double-precision values."]}),"\n",(0,l.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"NORMALIZE_JSON_NUMBERS_TO_DOUBLE(json_value)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"alias",children:"Alias"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"NORMALIZE_JSONB_NUMBERS_TO_DOUBLE"})}),"\n",(0,l.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"json_value"})," - The JSON value to be processed. Must be of JSON type."]}),"\n",(0,l.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,l.jsx)(n.p,{children:"Returns a new JSON value with all numeric types converted to double-precision floating-point (double) type."}),"\n",(0,l.jsx)(n.p,{children:"When the input is NULL, the function returns NULL."}),"\n",(0,l.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,l.jsx)(n.p,{children:"Since the JSON standard does not specify the underlying type for Number, most systems implement Number type based on IEEE 754-2008 binary 64-bit (double-precision) floating-point numbers (such as the double type in C++).\nTo ensure data accuracy, Doris has extended the Number type with more refined types, supporting more precise types like Int128 and DECIMAL.\nHowever, this can lead to differences when compared to other systems."}),"\n",(0,l.jsx)(n.p,{children:"For example, for the following JSON string:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"'{\"abc\": 18446744073709551616}'\n"})}),"\n",(0,l.jsx)(n.p,{children:"In systems that use Double as the underlying type for JSON Numbers, such as MySQL, you would get:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+-----------------------------------------------+\n| cast(\'{"abc": 18446744073709551616}\' as json) |\n+-----------------------------------------------+\n| {"abc": 1.8446744073709552e19}                |\n+-----------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.p,{children:"But since Doris's JSON Number has types with higher precision, it would return:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+-----------------------------------------------+\n| cast(\'{"abc": 18446744073709551616}\' as json) |\n+-----------------------------------------------+\n| {"abc":18446744073709551616}                  |\n+-----------------------------------------------+\n'})}),"\n",(0,l.jsxs)(n.p,{children:["To be compatible with other systems, you can use ",(0,l.jsx)(n.code,{children:"NORMALIZE_JSON_NUMBERS_TO_DOUBLE"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+---------------------------------------------------------------------------------+\n| normalize_json_numbers_to_double(cast(\'{"abc": 18446744073709551616}\' as json)) |\n+---------------------------------------------------------------------------------+\n| {"abc":1.8446744073709552e+19}                                                  |\n+---------------------------------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.h3,{id:"basic-number-conversion",children:"Basic Number Conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT normalize_json_numbers_to_double(cast(\'{"b":1234567890123456789,"b":456,"a":789}\' as json));\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+---------------------------------------------------------------------------------------------+\n| normalize_json_numbers_to_double(cast(\'{"b":1234567890123456789,"b":456,"a":789}\' as json)) |\n+---------------------------------------------------------------------------------------------+\n| {"b":1.2345678901234568e+18,"b":456,"a":789}                                                |\n+---------------------------------------------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.h3,{id:"processing-nested-json",children:"Processing Nested JSON"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT normalize_json_numbers_to_double(cast(\'{"object":{"int":123,"bigint":1234567890123456789},"array":[123,456,789]}\' as json));\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+-----------------------------------------------------------------------------------------------------------------------------+\n| normalize_json_numbers_to_double(cast(\'{"object":{"int":123,"bigint":1234567890123456789},"array":[123,456,789]}\' as json)) |\n+-----------------------------------------------------------------------------------------------------------------------------+\n| {"object":{"int":123,"bigint":1.2345678901234568e+18},"array":[123,456,789]}                                                |\n+-----------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.h3,{id:"processing-null-values",children:"Processing NULL Values"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT normalize_json_numbers_to_double(null);\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+----------------------------------------+\n| normalize_json_numbers_to_double(null) |\n+----------------------------------------+\n| NULL                                   |\n+----------------------------------------+\n"})}),"\n",(0,l.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"NORMALIZE_JSON_NUMBERS_TO_DOUBLE"})," function has an alias ",(0,l.jsx)(n.code,{children:"NORMALIZE_JSONB_NUMBERS_TO_DOUBLE"}),", both functions have identical functionality."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"This function converts all numeric types in JSON (including integers, floating-point numbers, and DECIMALs) to double-precision floating-point representation."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"For particularly large integers, conversion to double-precision floating-point may result in precision loss, as shown in the example where 1234567890123456789 is converted to 1.2345678901234568e+18."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"This function does not alter the structure of JSON, it only modifies the numeric representations within it."}),"\n"]}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return r},a:function(){return o}});var i=s(667294);let l={},t=i.createContext(l);function o(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);