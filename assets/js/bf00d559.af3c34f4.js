"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["283488"],{930507:function(n,e,i){i.r(e),i.d(e,{default:()=>x,frontMatter:()=>t,metadata:()=>s,assets:()=>c,toc:()=>h,contentTitle:()=>d});var s=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/conversion/decimal-conversion","title":"Cast to DECIMAL Type","description":"From string","source":"@site/docs/sql-manual/basic-element/sql-data-types/conversion/decimal-conversion.md","sourceDirName":"sql-manual/basic-element/sql-data-types/conversion","slug":"/sql-manual/basic-element/sql-data-types/conversion/decimal-conversion","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/decimal-conversion","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Cast to DECIMAL Type","language":"en"},"sidebar":"docs","previous":{"title":"Cast to DATETIME Type","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/datetime-conversion"},"next":{"title":"Convert to FLOAT/DOUBLE","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/float-double-conversion"}}'),l=i("785893"),r=i("250065");let t={title:"Cast to DECIMAL Type",language:"en"},d=void 0,c={},h=[{value:"From string",id:"from-string",level:2},{value:"Strict mode",id:"strict-mode",level:3},{value:"BNF definition",id:"bnf-definition",level:4},{value:"Rule description",id:"rule-description",level:4},{value:"Examples",id:"examples",level:4},{value:"Non-strict mode",id:"non-strict-mode",level:3},{value:"BNF definition",id:"bnf-definition-1",level:4},{value:"Rule description",id:"rule-description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"From bool",id:"from-bool",level:2},{value:"Strict mode",id:"strict-mode-1",level:3},{value:"Non-strict mode",id:"non-strict-mode-1",level:3},{value:"From integer",id:"from-integer",level:2},{value:"Strict mode",id:"strict-mode-2",level:3},{value:"Examples",id:"examples-2",level:4},{value:"Non-strict mode",id:"non-strict-mode-2",level:3},{value:"Examples",id:"examples-3",level:4},{value:"From float/double",id:"from-floatdouble",level:2},{value:"Strict mode",id:"strict-mode-3",level:3},{value:"Examples",id:"examples-4",level:4},{value:"Non-strict mode",id:"non-strict-mode-3",level:3},{value:"Examples",id:"examples-5",level:4},{value:"Cast between decimals",id:"cast-between-decimals",level:2},{value:"Strict mode",id:"strict-mode-4",level:3},{value:"Examples",id:"examples-6",level:4},{value:"Non-strict mode",id:"non-strict-mode-4",level:3},{value:"Examples",id:"examples-7",level:4},{value:"From date",id:"from-date",level:2},{value:"From datetime",id:"from-datetime",level:2},{value:"From time",id:"from-time",level:2},{value:"From other types",id:"from-other-types",level:2}];function o(n){let e={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{id:"from-string",children:"From string"}),"\n",(0,l.jsx)(e.h3,{id:"strict-mode",children:"Strict mode"}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type;"}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable, returns non-nullable type;"}),"\n",(0,l.jsx)(e.h4,{id:"bnf-definition",children:"BNF definition"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<decimal>     ::= <whitespace>* <value> <whitespace>*\n\n<whitespace>  ::= " " | "\\t" | "\\n" | "\\r" | "\\f" | "\\v"\n\n<value>       ::= <sign>? <significand> <exponent>?\n\n<sign>        ::= "+" | "-"\n\n<significand> ::= <digits> "." <digits> | <digits> | <digits> "." | "." <digits>\n\n<digits>      ::= <digit>+\n\n<digit>       ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"\n\n<exponent>    ::= <e_marker> <sign>? <digits>\n\n<e_marker>    ::= "e" | "E"\n'})}),"\n",(0,l.jsx)(e.h4,{id:"rule-description",children:"Rule description"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Only supports decimal digits;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Supports scientific notation;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Supports rounding;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:'Strings allow arbitrary prefix and suffix whitespace characters, including: " ", "\\t", "\\n", "\\r", "\\f", "\\v".'}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Return error when integer part overflows;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Return error for invalid format."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"examples",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"String"}),(0,l.jsx)(e.th,{children:"Decimal(18, 6)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"123.1234567"'}),(0,l.jsx)(e.td,{children:"123.123457"}),(0,l.jsx)(e.td,{children:"Rounding"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"12345."'}),(0,l.jsx)(e.td,{children:"12345.000000"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"12345"'}),(0,l.jsx)(e.td,{children:"12345.000000"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'".123456"'}),(0,l.jsx)(e.td,{children:"0.123456"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v123.456 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123.456000"}),(0,l.jsx)(e.td,{children:"With prefix and suffix whitespace"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+123.456 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123.456000"}),(0,l.jsx)(e.td,{children:"With prefix and suffix whitespace, positive sign"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v-123.456 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"-123.456000"}),(0,l.jsx)(e.td,{children:"With prefix and suffix whitespace, negative sign"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+1.234e5 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123400.000000"}),(0,l.jsx)(e.td,{children:"Scientific notation"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+1.234e+5 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123400.000000"}),(0,l.jsx)(e.td,{children:"Scientific notation with positive exponent"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+1.234e-1 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"0.123400"}),(0,l.jsx)(e.td,{children:"Scientific notation with negative exponent"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"123.456a"'}),(0,l.jsx)(e.td,{children:"Error"}),(0,l.jsx)(e.td,{children:"Invalid format"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"1234567890123.123456"'}),(0,l.jsx)(e.td,{children:"Error"}),(0,l.jsx)(e.td,{children:"Overflow"})]})]})]}),"\n",(0,l.jsx)(e.h3,{id:"non-strict-mode",children:"Non-strict mode"}),"\n",(0,l.jsx)(e.p,{children:"Always returns nullable type;"}),"\n",(0,l.jsx)(e.h4,{id:"bnf-definition-1",children:"BNF definition"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-xml",children:'<decimal>     ::= <whitespace>* <value> <whitespace>*\n\n<whitespace>  ::= " " | "\\t" | "\\n" | "\\r" | "\\f" | "\\v"\n\n<value>       ::= <sign>? <significand> <exponent>\n\n<sign>        ::= "+" | "-"\n\n<significand> ::= <digits> | <digits> "." <digits> | <digits> "." | "." <digits>\n\n<digits>      ::= <digit>+\n\n<digit>       ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"\n\n<exponent>    ::= <e_marker> <sign>? <digits>\n\n<e_marker>    ::= "e" | "E"\n'})}),"\n",(0,l.jsx)(e.h4,{id:"rule-description-1",children:"Rule description"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Supports all valid formats from strict mode;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Converts to NULL when overflow occurs;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Converts to NULL for invalid format."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"examples-1",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"String"}),(0,l.jsx)(e.th,{children:"Decimal(18, 6)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"123.1234567"'}),(0,l.jsx)(e.td,{children:"123.123457"}),(0,l.jsx)(e.td,{children:"Rounding"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"12345."'}),(0,l.jsx)(e.td,{children:"12345.000000"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"12345"'}),(0,l.jsx)(e.td,{children:"12345.000000"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'".123456"'}),(0,l.jsx)(e.td,{children:"0.123456"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v123.456 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123.456000"}),(0,l.jsx)(e.td,{children:"With prefix and suffix whitespace"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+123.456 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123.456000"}),(0,l.jsx)(e.td,{children:"With prefix and suffix whitespace, positive sign"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v-123.456 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"-123.456000"}),(0,l.jsx)(e.td,{children:"With prefix and suffix whitespace, negative sign"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+1.234e5 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123400.000000"}),(0,l.jsx)(e.td,{children:"Scientific notation"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+1.234e+5 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"123400.000000"}),(0,l.jsx)(e.td,{children:"Scientific notation with positive exponent"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'" \\t\\r\\n\\f\\v+1.234e-1 \\t\\r\\n\\f\\v"'}),(0,l.jsx)(e.td,{children:"0.123400"}),(0,l.jsx)(e.td,{children:"Scientific notation with negative exponent"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"123.456a"'}),(0,l.jsx)(e.td,{children:"NULL"}),(0,l.jsx)(e.td,{children:"Invalid format"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:'"1234567890123.123456"'}),(0,l.jsx)(e.td,{children:"NULL"}),(0,l.jsx)(e.td,{children:"Overflow"})]})]})]}),"\n",(0,l.jsx)(e.h2,{id:"from-bool",children:"From bool"}),"\n",(0,l.jsx)(e.p,{children:"true converts to 1, false converts to 0."}),"\n",(0,l.jsx)(e.h3,{id:"strict-mode-1",children:"Strict mode"}),"\n",(0,l.jsxs)(e.p,{children:["Error when overflow occurs (e.g., ",(0,l.jsx)(e.code,{children:"cast bool as decimal(1, 1)"}),")."]}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable, returns non-nullable type."}),"\n",(0,l.jsx)(e.h3,{id:"non-strict-mode-1",children:"Non-strict mode"}),"\n",(0,l.jsx)(e.p,{children:"Converts to NULL when overflow occurs."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["If overflow is possible (e.g., ",(0,l.jsx)(e.code,{children:"cast bool as decimal(1, 1)"}),"), returns nullable type;"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Otherwise returns non-nullable type."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"from-integer",children:"From integer"}),"\n",(0,l.jsx)(e.h3,{id:"strict-mode-2",children:"Strict mode"}),"\n",(0,l.jsx)(e.p,{children:"Error when overflow occurs."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable, returns non-nullable type."}),"\n",(0,l.jsx)(e.h4,{id:"examples-2",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"int"}),(0,l.jsx)(e.th,{children:"Decimal(18, 9)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"123"}),(0,l.jsx)(e.td,{children:"123.00000000"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"2147483647"}),(0,l.jsx)(e.td,{children:"Error"}),(0,l.jsx)(e.td,{children:"Overflow"})]})]})]}),"\n",(0,l.jsx)(e.h3,{id:"non-strict-mode-2",children:"Non-strict mode"}),"\n",(0,l.jsx)(e.p,{children:"Converts to NULL when overflow occurs."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["If overflow is possible (e.g., ",(0,l.jsx)(e.code,{children:"cast int as decimal(1, 0)"}),"), returns nullable type;"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Otherwise returns non-nullable type (e.g., ",(0,l.jsx)(e.code,{children:"cast int as decimal(18, 0)"}),")."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"examples-3",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"int"}),(0,l.jsx)(e.th,{children:"Decimal(18, 9)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"123"}),(0,l.jsx)(e.td,{children:"123.00000000"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"2147483647"}),(0,l.jsx)(e.td,{children:"NULL"}),(0,l.jsx)(e.td,{children:"Overflow"})]})]})]}),"\n",(0,l.jsx)(e.h2,{id:"from-floatdouble",children:"From float/double"}),"\n",(0,l.jsx)(e.p,{children:"Supports rounding."}),"\n",(0,l.jsx)(e.h3,{id:"strict-mode-3",children:"Strict mode"}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable, returns non-nullable type."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Infinity and NaN cause errors."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Error when overflow occurs."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"examples-4",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"float/double"}),(0,l.jsx)(e.th,{children:"Decimal(18, 3)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"1.1239"}),(0,l.jsx)(e.td,{children:"1.124"}),(0,l.jsx)(e.td,{children:"Rounding"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"3.40282e+38"}),(0,l.jsx)(e.td,{children:"Error"}),(0,l.jsx)(e.td,{children:"Overflow"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"Infinity"}),(0,l.jsx)(e.td,{children:"Error"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"NaN"}),(0,l.jsx)(e.td,{children:"Error"}),(0,l.jsx)(e.td,{})]})]})]}),"\n",(0,l.jsx)(e.h3,{id:"non-strict-mode-3",children:"Non-strict mode"}),"\n",(0,l.jsx)(e.p,{children:"Always returns nullable type."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"+/-Inf converts to NULL;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"NaN converts to NULL;"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Converts to NULL when overflow occurs."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"examples-5",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"float/double"}),(0,l.jsx)(e.th,{children:"Decimal(18, 6)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"1.123456"}),(0,l.jsx)(e.td,{children:"1.123456"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"3.40282e+38"}),(0,l.jsx)(e.td,{children:"NULL"}),(0,l.jsx)(e.td,{children:"Overflow"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"Infinity"}),(0,l.jsx)(e.td,{children:"NULL"}),(0,l.jsx)(e.td,{})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"NaN"}),(0,l.jsx)(e.td,{children:"NULL"}),(0,l.jsx)(e.td,{})]})]})]}),"\n",(0,l.jsx)(e.h2,{id:"cast-between-decimals",children:"Cast between decimals"}),"\n",(0,l.jsx)(e.p,{children:"Supports rounding."}),"\n",(0,l.jsx)(e.h3,{id:"strict-mode-4",children:"Strict mode"}),"\n",(0,l.jsx)(e.p,{children:"Error when overflow occurs."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable, returns non-nullable type."}),"\n",(0,l.jsx)(e.h4,{id:"examples-6",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"Decimal(18, 8)"}),(0,l.jsx)(e.th,{children:"Decimal(10, 6)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"1234.12345678"}),(0,l.jsx)(e.td,{children:"1234.123457"}),(0,l.jsx)(e.td,{children:"Rounding"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"12345.12345678"}),(0,l.jsx)(e.td,{children:"Error"}),(0,l.jsx)(e.td,{children:"Integer part overflow"})]})]})]}),"\n",(0,l.jsx)(e.h3,{id:"non-strict-mode-4",children:"Non-strict mode"}),"\n",(0,l.jsx)(e.p,{children:"Converts to NULL when overflow occurs."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is nullable, returns nullable type."}),"\n",(0,l.jsx)(e.p,{children:"If the source type is non-nullable:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["If overflow is possible (e.g., ",(0,l.jsx)(e.code,{children:"cast decimal(18, 0) as decimal(9, 0)"}),"), returns nullable type;"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Otherwise returns non-nullable type (e.g., ",(0,l.jsx)(e.code,{children:"cast decimal(9, 0) as decimal(18, 0)"}),")."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"examples-7",children:"Examples"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"Decimal(18, 8)"}),(0,l.jsx)(e.th,{children:"Decimal(10, 6)"}),(0,l.jsx)(e.th,{children:"Comment"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"1234.12345678"}),(0,l.jsx)(e.td,{children:"1234.123457"}),(0,l.jsx)(e.td,{children:"Rounding"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"12345.12345678"}),(0,l.jsx)(e.td,{children:"NULL"}),(0,l.jsx)(e.td,{children:"Integer part overflow"})]})]})]}),"\n",(0,l.jsx)(e.h2,{id:"from-date",children:"From date"}),"\n",(0,l.jsx)(e.p,{children:"Not supported."}),"\n",(0,l.jsx)(e.h2,{id:"from-datetime",children:"From datetime"}),"\n",(0,l.jsx)(e.p,{children:"Not supported."}),"\n",(0,l.jsx)(e.h2,{id:"from-time",children:"From time"}),"\n",(0,l.jsx)(e.p,{children:"Not supported."}),"\n",(0,l.jsx)(e.h2,{id:"from-other-types",children:"From other types"}),"\n",(0,l.jsx)(e.p,{children:"Not supported"})]})}function x(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(o,{...n})}):o(n)}},250065:function(n,e,i){i.d(e,{Z:function(){return d},a:function(){return t}});var s=i(667294);let l={},r=s.createContext(l);function t(n){let e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:t(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);