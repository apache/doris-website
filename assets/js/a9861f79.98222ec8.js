"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["503629"],{413534:function(n,e,s){s.r(e),s.d(e,{default:()=>L,frontMatter:()=>r,metadata:()=>t,assets:()=>o,toc:()=>d,contentTitle:()=>a});var t=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/semi-structured/JSON","title":"JSON","description":"JSON Introduction","source":"@site/docs/sql-manual/basic-element/sql-data-types/semi-structured/JSON.md","sourceDirName":"sql-manual/basic-element/sql-data-types/semi-structured","slug":"/sql-manual/basic-element/sql-data-types/semi-structured/JSON","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/semi-structured/JSON","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"JSON","language":"en"},"sidebar":"docs","previous":{"title":"STRUCT","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/semi-structured/STRUCT"},"next":{"title":"VARIANT","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/semi-structured/VARIANT"}}'),i=s("785893"),l=s("250065");let r={title:"JSON",language:"en"},a=void 0,o={},d=[{value:"JSON Introduction",id:"json-introduction",level:2},{value:"JSON Number Precision Issues",id:"json-number-precision-issues",level:2},{value:"JSON Type in Doris",id:"json-type-in-doris",level:2},{value:"Supported Types",id:"supported-types",level:3},{value:"Important Notes:",id:"important-notes",level:3},{value:"Operations and Limitations",id:"operations-and-limitations",level:2},{value:"Syntax",id:"syntax",level:3},{value:"JSON Input",id:"json-input",level:2},{value:"Key Differences and Notes:",id:"key-differences-and-notes",level:3},{value:"Using to_json to Convert Doris Internal Types to JSONB Type",id:"using-to_json-to-convert-doris-internal-types-to-jsonb-type",level:2},{value:"JSONB Output",id:"jsonb-output",level:2},{value:"Number Precision Issues",id:"number-precision-issues",level:2},{value:"Configuration and Limitations",id:"configuration-and-limitations",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"create database and table",id:"create-database-and-table",level:4},{value:"Load data",id:"load-data",level:4},{value:"stream load test_json.csv test data",id:"stream-load-test_jsoncsv-test-data",level:5},{value:"write data using insert into",id:"write-data-using-insert-into",level:5},{value:"Query",id:"query",level:4},{value:"extract some filed from json by json_extract functions",id:"extract-some-filed-from-json-by-json_extract-functions",level:5},{value:"check if a field is existed in json by json_exists_path",id:"check-if-a-field-is-existed-in-json-by-json_exists_path",level:5},{value:"get the datatype of a field in json by json_type",id:"get-the-datatype-of-a-field-in-json-by-json_type",level:5},{value:"FAQ",id:"faq",level:3},{value:"keywords",id:"keywords",level:3}];function c(n){let e={a:"a",admonition:"admonition",code:"code",content:"content",element:"element",h2:"h2",h3:"h3",h4:"h4",h5:"h5",key:"key","key-value":"key-value",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",value:"value",...(0,l.a)(),...n.components},s=e["key-value"];return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"json-introduction",children:"JSON Introduction"}),"\n",(0,i.jsxs)(e.p,{children:["JSON (JavaScript Object Notation) is an open standard file format and data interchange format that uses human-readable text to store and transmit data. According to the official specification ",(0,i.jsx)(e.a,{href:"https://datatracker.ietf.org/doc/html/rfc7159",children:"RFC7159"}),", JSON supports the following basic types:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Bool"}),"\n",(0,i.jsx)(e.li,{children:"Null"}),"\n",(0,i.jsx)(e.li,{children:"Number"}),"\n",(0,i.jsx)(e.li,{children:"String"}),"\n",(0,i.jsx)(e.li,{children:"Array"}),"\n",(0,i.jsx)(e.li,{children:"Object"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["The JSON data type stores ",(0,i.jsx)(e.a,{href:"https://www.rfc-editor.org/rfc/rfc8785",children:"JSON"})," data efficiently in a binary format and allows access to its internal fields through JSON functions."]}),"\n",(0,i.jsxs)(e.p,{children:["By default, it supports up to 1048576 bytes (1MB), and can be increased up to 2147483643 bytes (2GB). This can be adjusted via the ",(0,i.jsx)(e.code,{children:"string_type_length_soft_limit_bytes"})," configuration."]}),"\n",(0,i.jsx)(e.p,{children:"Compared to storing JSON strings in a regular STRING type, the JSON type has two main advantages:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"JSON format validation during data insertion."}),"\n",(0,i.jsxs)(e.li,{children:["More efficient binary storage format, enabling faster access to JSON internal fields using functions like ",(0,i.jsx)(e.code,{children:"json_extract"}),", compared to ",(0,i.jsx)(e.code,{children:"get_json_xx"})," functions."]}),"\n"]}),"\n",(0,i.jsx)(e.admonition,{title:"Note",type:"caution",children:(0,i.jsx)(e.p,{children:"In version 1.2.x, the JSON type was named JSONB. To maintain compatibility with MySQL, it was renamed to JSON starting from version 2.0.0. Older tables can still use the previous name."})}),"\n",(0,i.jsx)(e.h2,{id:"json-number-precision-issues",children:"JSON Number Precision Issues"}),"\n",(0,i.jsx)(e.p,{children:"When using JSON, special attention is needed regarding number precision:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"In most systems, the Number type is implemented based on IEEE 754-2008 binary 64-bit (double-precision) floating-point numbers (e.g., double type in C++)"}),"\n",(0,i.jsx)(e.li,{children:"Since the JSON specification doesn't strictly define the underlying type for Number, and JSON data is exchanged between different systems as text, precision loss may occur"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["For a JSON string like ",(0,i.jsx)(e.code,{children:'{"abc": 18446744073709551616}'}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'-- Conversion result in MySQL\ncast(\'{"abc": 18446744073709551616}\' as json)\n-- Result: {"abc": 1.8446744073709552e19}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Conversion result in JavaScript\nconsole.log(JSON.parse('{\"abc\": 18446744073709551616}'));\n// Result: {abc: 18446744073709552000}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["To ensure numeric precision is preserved when exchanging data between systems, large numbers should be stored as strings, e.g., ",(0,i.jsx)(e.code,{children:'{"abc": "18446744073709551616"}'}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"json-type-in-doris",children:"JSON Type in Doris"}),"\n",(0,i.jsx)(e.p,{children:"Doris supports data types that conform to the JSON standard specification and uses an efficient JSONB (JSON Binary) format for binary encoding storage."}),"\n",(0,i.jsx)(e.h3,{id:"supported-types",children:"Supported Types"}),"\n",(0,i.jsx)(e.p,{children:"Doris JSONB supports all standard JSON types. The main difference is that Doris provides more fine-grained extensions for the Number type to more accurately map to Doris's internal types."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"JSON Type"}),(0,i.jsx)(e.th,{children:"Subtype"}),(0,i.jsx)(e.th,{children:"Corresponding Doris Type"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Bool"}),(0,i.jsx)(e.td,{children:"-"}),(0,i.jsx)(e.td,{children:"BOOLEAN"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Null"}),(0,i.jsx)(e.td,{children:"-"}),(0,i.jsx)(e.td,{children:"(No direct equivalent, represents JSON null value)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Number"}),(0,i.jsx)(e.td,{children:"Int8"}),(0,i.jsx)(e.td,{children:"TINYINT"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:"Int16"}),(0,i.jsx)(e.td,{children:"SMALLINT"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:"Int32"}),(0,i.jsx)(e.td,{children:"INT"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:"Int64"}),(0,i.jsx)(e.td,{children:"BIGINT"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:"Int128"}),(0,i.jsx)(e.td,{children:"LARGEINT"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:"Double"}),(0,i.jsx)(e.td,{children:"DOUBLE"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:"Float"}),(0,i.jsx)(e.td,{children:"FLOAT"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:"Decimal"}),(0,i.jsx)(e.td,{children:"DECIMAL"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"String"}),(0,i.jsx)(e.td,{children:"-"}),(0,i.jsx)(e.td,{children:"STRING"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Array"}),(0,i.jsx)(e.td,{children:"-"}),(0,i.jsx)(e.td,{children:"ARRAY"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Object"}),(0,i.jsx)(e.td,{children:"-"}),(0,i.jsx)(e.td,{children:"STRUCT"})]})]})]}),"\n",(0,i.jsx)(e.h3,{id:"important-notes",children:"Important Notes:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Meaning of Null:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:'Null in JSON is a valid value representing "empty value". This is different from SQL\'s NULL, which represents "unknown" or "missing".'}),"\n",(0,i.jsx)(e.li,{children:"CAST('null' AS JSON) results in a JSONB column containing a JSON null value, which itself is not NULL at the SQL level."}),"\n",(0,i.jsx)(e.li,{children:"CAST('null' AS JSON) IS NULL returns false (0), because the column contains a known JSON null value, which is not a SQL NULL."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"operations-and-limitations",children:"Operations and Limitations"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Comparison and Arithmetic:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"JSONB columns cannot be directly compared with other data types (including other JSONB columns) or used in arithmetic operations."}),"\n",(0,i.jsx)(e.li,{children:"Solution: Use JSON_EXTRACT function to extract scalar values (like INT, DOUBLE, STRING, BOOLEAN) from JSONB, then convert them to the corresponding native Doris types for comparison or calculation."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Sorting and Grouping:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"JSONB columns do not support ORDER BY and GROUP BY operations."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Implicit Conversion:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Input Only: When inputting data into a JSONB column, STRING type can be implicitly converted to JSONB (provided the string content is valid JSON text). Other Doris types cannot be implicitly converted to JSONB."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Definition:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"json_column_name JSON\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Insertion:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Using ",(0,i.jsx)(e.code,{children:"INSERT INTO VALUES"})," with the format as a string surrounded by quotes. For example:"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'INSERT INTO table_name(id, json_column_name) VALUES (1, \'{"k1": "100"}\')\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"For STREAM LOAD, the format for the corresponding column is a string without additional quotes. For example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'12	{"k1":"v31", "k2": 300}\n13	[]\n14	[123, 456]\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["When the special character with ",(0,i.jsx)(e.code,{children:"'\\'"})," such as ",(0,i.jsx)(e.code,{children:"'\\r'"}),", ",(0,i.jsx)(e.code,{children:"'\\t'"})," appears in JSON, you need to use the replace function to replace ",(0,i.jsx)(e.code,{children:'"\\"'})," with ",(0,i.jsx)(e.code,{children:'"\\\\"'}),", for example, you need replace ",(0,i.jsx)(e.code,{children:'"\\n"'})," to ",(0,i.jsx)(e.code,{children:'"\\\\n"'})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Query:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Directly select the entire JSON column:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT json_column_name FROM table_name;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Extract specific fields or other information from JSON using JSON functions. For example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT json_extract(json_column_name, '$.k1') FROM table_name;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"The JSON type can be cast to and from integers, strings, BOOLEAN, ARRAY, and MAP. For example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT CAST('{\"k1\": \"100\"}' AS JSON);\nSELECT CAST(json_column_name AS STRING) FROM table_name;\nSELECT CAST(json_extract(json_column_name, '$.k1') AS INT) FROM table_name;\n"})}),"\n",(0,i.jsx)(e.admonition,{type:"tip",children:(0,i.jsxs)(e.p,{children:["The JSON type currently cannot be used for ",(0,i.jsx)(e.code,{children:"GROUP BY"}),", ",(0,i.jsx)(e.code,{children:"ORDER BY"}),", or comparison operations."]})}),"\n",(0,i.jsx)(e.h2,{id:"json-input",children:"JSON Input"}),"\n",(0,i.jsx)(e.p,{children:"Convert a string that conforms to JSON syntax to JSONB using CAST."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'-- Simple scalar/basic values (numeric types, bool, null, string)\nmysql> SELECT cast(\'5\' as json);\n+-------------------+\n| cast(\'5\' as json) |\n+-------------------+\n| 5                 |\n+-------------------+\n\n-- Arrays with zero or more elements (elements don\'t need to be the same type)\nmysql> SELECT cast(\'[1, 2, "foo", null]\' as json);\n+-------------------------------------+\n| cast(\'[1, 2, "foo", null]\' as json) |\n+-------------------------------------+\n| [1,2,"foo",null]                    |\n+-------------------------------------+\n\n-- Objects containing key-value pairs\n-- Note that object keys must always be quoted strings\nmysql> SELECT cast(\'{"bar": "baz", "balance": 7.77, "active": false}\' as json);\n+------------------------------------------------------------------+\n| cast(\'{"bar": "baz", "balance": 7.77, "active": false}\' as json) |\n+------------------------------------------------------------------+\n| {"bar":"baz","balance":7.77,"active":false}                      |\n+------------------------------------------------------------------+\n\n-- Arrays and objects can be nested arbitrarily\nmysql> SELECT cast(\'{"foo": [true, "bar"], "tags": {"a": 1, "b": null}}\' as json);\n+---------------------------------------------------------------------+\n| cast(\'{"foo": [true, "bar"], "tags": {"a": 1, "b": null}}\' as json) |\n+---------------------------------------------------------------------+\n| {"foo":[true,"bar"],"tags":{"a":1,"b":null}}                        |\n+---------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Doris's JSONB doesn't preserve semantically irrelevant details like whitespace."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"mysql> -- The input text and JSON output may not look the same\nmysql> SELECT cast('[1,                 2]' as json);\n+----------------------------------------+\n| cast('[1,                 2]' as json) |\n+----------------------------------------+\n| [1,2]                                  |\n+----------------------------------------+\n"})}),"\n",(0,i.jsx)(e.h3,{id:"key-differences-and-notes",children:"Key Differences and Notes:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"CAST(string AS JSON): Used to parse strings that conform to JSON syntax."}),"\n",(0,i.jsx)(e.li,{children:"CAST(string AS JSON): For Number types, it will only parse Int8, Int16, Int32, Int64, Int128, and Double types, not Decimal type."}),"\n",(0,i.jsx)(e.li,{children:"Unlike most other JSON implementations, Doris's JSONB type supports up to Int128 precision. Numbers exceeding Int128 precision may overflow."}),"\n",(0,i.jsx)(e.li,{children:"If the input number string is 12.34, it will be parsed as a Double; if there's no decimal point, it will be parsed as an integer (if the size exceeds Int128 range, it will be converted to Double but with precision loss)"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"using-to_json-to-convert-doris-internal-types-to-jsonb-type",children:"Using to_json to Convert Doris Internal Types to JSONB Type"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT to_json(1) , to_json(3.14) , to_json("12345");\n+------------+---------------+------------------+\n| to_json(1) | to_json(3.14) | to_json("12345") |\n+------------+---------------+------------------+\n| 1          | 3.14          | "12345"          |\n+------------+---------------+------------------+\n\nmysql> SELECT to_json(array(array(1,2,3),array(4,5,6)));\n+-------------------------------------------+\n| to_json(array(array(1,2,3),array(4,5,6))) |\n+-------------------------------------------+\n| [[1,2,3],[4,5,6]]                         |\n+-------------------------------------------+\n\nmysql> SELECT json_extract(to_json(array(array(1,2,3),array(4,5,6))), \'$.[1].[2]\');\n+----------------------------------------------------------------------+\n| json_extract(to_json(array(array(1,2,3),array(4,5,6))), \'$.[1].[2]\') |\n+----------------------------------------------------------------------+\n| 6                                                                    |\n+----------------------------------------------------------------------+\n\nmysql> SELECT to_json(struct(123,array(4,5,6),"789"));\n+------------------------------------------+\n| to_json(struct(123,array(4,5,6),"789"))  |\n+------------------------------------------+\n| {"col1":123,"col2":[4,5,6],"col3":"789"} |\n+------------------------------------------+\n\nmysql> SELECT json_extract(to_json(struct(123,array(4,5,6),"789")),"$.col2");\n+----------------------------------------------------------------+\n| json_extract(to_json(struct(123,array(4,5,6),"789")),"$.col2") |\n+----------------------------------------------------------------+\n| [4,5,6]                                                        |\n+----------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"to_json only supports converting Doris types that map to JSONB types.\nFor example, DECIMAL can be used with to_json.\nHowever, DATE cannot; it needs to be converted to STRING first, then use to_json."}),"\n",(0,i.jsx)(e.h2,{id:"jsonb-output",children:"JSONB Output"}),"\n",(0,i.jsx)(e.p,{children:"When converting to plain text for interaction with other systems, Doris's JSONB type ensures generation of valid JSON text:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Null values:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Output as null (without quotes)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Boolean values:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"true \u2192 output true"}),"\n",(0,i.jsx)(e.li,{children:"false \u2192 output false"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Numeric types:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"All numeric values output directly"}),"\n",(0,i.jsx)(e.li,{children:"Example: 5 \u2192 output 5, 3.14 \u2192 output 3.14"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Strings:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:['Output in double quotes: "',(0,i.jsx)(e.content,{children:'"'})]}),"\n",(0,i.jsxs)(e.li,{children:["Special characters are escaped:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:'" \u2192 "'}),"\n",(0,i.jsx)(e.li,{children:"\\ \u2192 \\"}),"\n",(0,i.jsx)(e.li,{children:"/ \u2192 /"}),"\n",(0,i.jsx)(e.li,{children:"Backspace \u2192 \\b"}),"\n",(0,i.jsx)(e.li,{children:"Form feed \u2192 \\f"}),"\n",(0,i.jsx)(e.li,{children:"Newline \u2192 \\n"}),"\n",(0,i.jsx)(e.li,{children:"Carriage return \u2192 \\r"}),"\n",(0,i.jsx)(e.li,{children:"Tab \u2192 \\t"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Other control characters (ASCII < 32) convert to Unicode escape sequences: \\uXXXX"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Objects:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Format: {",(0,i.jsx)(s,{pairs:"",list:"",children:"}"})]}),"\n",(0,i.jsxs)(e.li,{children:['Key-value pair format: "',(0,i.jsxs)(e.key,{children:['": ',(0,i.jsx)(e.value,{})]})]}),"\n",(0,i.jsx)(e.li,{children:"Multiple key-value pairs separated by commas"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Arrays:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Format: [",(0,i.jsx)(e.element,{list:"",children:"]"})]}),"\n",(0,i.jsx)(e.li,{children:"Multiple elements separated by commas"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Nested structure handling:\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Objects and arrays support unlimited nesting levels"}),"\n",(0,i.jsx)(e.li,{children:"Each nesting level processed recursively using the same rules"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"number-precision-issues",children:"Number Precision Issues"}),"\n",(0,i.jsx)(e.p,{children:"When converting Doris internal types to JSONB using to_json, no precision loss occurs.\nWhen using Doris internal JSON functions, if the return value is also a JSONB type, no precision loss occurs.\nHowever, converting Doris JSONB to plain text and then back to JSONB can cause precision loss."}),"\n",(0,i.jsx)(e.p,{children:"Example: Doris JSON type object"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'Object{\n    "a": (Decimal 18446744073709551616.123)\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"Converted to plain text:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'{"a": 18446744073709551616.123}\n'})}),"\n",(0,i.jsx)(e.p,{children:"When plain text is converted back to Doris JSON type:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'Object{\n    "a": (Double 18446744073709552000)  // precision loss\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"configuration-and-limitations",children:"Configuration and Limitations"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"JSON supports 1,048,576 bytes (1 MB) by default"}),"\n",(0,i.jsx)(e.li,{children:"Size limit can be adjusted via the BE configuration parameter string_type_length_soft_limit_bytes"}),"\n",(0,i.jsx)(e.li,{children:"Maximum adjustment up to 2,147,483,643 bytes (approximately 2 GB)"}),"\n",(0,i.jsx)(e.li,{children:"In Doris JSON type Objects, key length cannot exceed 255 bytes"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(e.p,{children:"A tutorial for JSON datatype including create table, load data and query."}),"\n",(0,i.jsx)(e.h4,{id:"create-database-and-table",children:"create database and table"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'CREATE DATABASE testdb;\n\nUSE testdb;\n\nCREATE TABLE test_json (\n  id INT,\n  j JSON\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 10\nPROPERTIES("replication_num" = "1");\n'})}),"\n",(0,i.jsx)(e.h4,{id:"load-data",children:"Load data"}),"\n",(0,i.jsx)(e.h5,{id:"stream-load-test_jsoncsv-test-data",children:"stream load test_json.csv test data"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"there are 2 columns, the 1st column is id and the 2nd column is json string"}),"\n",(0,i.jsx)(e.li,{children:"there are 25 rows, the first 18 rows are valid json and the last 7 rows are invalid"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'1	\\N\n2	null\n3	true\n4	false\n5	100\n6	10000\n7	1000000000\n8	1152921504606846976\n9	6.18\n10	"abcd"\n11	{}\n12	{"k1":"v31", "k2": 300}\n13	[]\n14	[123, 456]\n15	["abc", "def"]\n16	[null, true, false, 100, 6.18, "abc"]\n17	[{"k1":"v41", "k2": 400}, 1, "a", 3.14]\n18	{"k1":"v31", "k2": 300, "a1": [{"k1":"v41", "k2": 400}, 1, "a", 3.14]}\n19	\'\'\n20	\'abc\'\n21	abc\n22	100x\n23	6.a8\n24	{x\n25	[123, abc]\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:'due to the 28% of rows is invalid, stream load with default configuration will fail with error message "too many filtered rows"'}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'curl --location-trusted -u root: -T test_json.csv http://127.0.0.1:8840/api/testdb/test_json/_stream_load\n{\n    "TxnId": 12019,\n    "Label": "744d9821-9c9f-43dc-bf3b-7ab048f14e32",\n    "TwoPhaseCommit": "false",\n    "Status": "Fail",\n    "Message": "too many filtered rows",\n    "NumberTotalRows": 25,\n    "NumberLoadedRows": 18,\n    "NumberFilteredRows": 7,\n    "NumberUnselectedRows": 0,\n    "LoadBytes": 380,\n    "LoadTimeMs": 48,\n    "BeginTxnTimeMs": 0,\n    "StreamLoadPutTimeMs": 1,\n    "ReadDataTimeMs": 0,\n    "WriteDataTimeMs": 45,\n    "CommitAndPublishTimeMs": 0,\n    "ErrorURL": "http://172.21.0.5:8840/api/_load_error_log?file=__shard_2/error_log_insert_stmt_95435c4bf5f156df-426735082a9296af_95435c4bf5f156df_426735082a9296af"\n}\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"stream load will success after set header configuration 'max_filter_ratio: 0.3'"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'curl --location-trusted -u root: -H \'max_filter_ratio: 0.3\' -T test_json.csv http://127.0.0.1:8840/api/testdb/test_json/_stream_load\n{\n    "TxnId": 12017,\n    "Label": "f37a50c1-43e9-4f4e-a159-a3db6abe2579",\n    "TwoPhaseCommit": "false",\n    "Status": "Success",\n    "Message": "OK",\n    "NumberTotalRows": 25,\n    "NumberLoadedRows": 18,\n    "NumberFilteredRows": 7,\n    "NumberUnselectedRows": 0,\n    "LoadBytes": 380,\n    "LoadTimeMs": 68,\n    "BeginTxnTimeMs": 0,\n    "StreamLoadPutTimeMs": 2,\n    "ReadDataTimeMs": 0,\n    "WriteDataTimeMs": 45,\n    "CommitAndPublishTimeMs": 19,\n    "ErrorURL": "http://172.21.0.5:8840/api/_load_error_log?file=__shard_0/error_log_insert_stmt_a1463f98a7b15caf-c79399b920f5bfa3_a1463f98a7b15caf_c79399b920f5bfa3"\n}\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"use SELECT to view the data loaded by stream load. The column with JSON type will be displayed as plain JSON string."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT * FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+\n| id   | j                                                             |\n+------+---------------------------------------------------------------+\n|    1 |                                                          NULL |\n|    2 |                                                          null |\n|    3 |                                                          true |\n|    4 |                                                         false |\n|    5 |                                                           100 |\n|    6 |                                                         10000 |\n|    7 |                                                    1000000000 |\n|    8 |                                           1152921504606846976 |\n|    9 |                                                          6.18 |\n|   10 |                                                        "abcd" |\n|   11 |                                                            {} |\n|   12 |                                         {"k1":"v31","k2":300} |\n|   13 |                                                            [] |\n|   14 |                                                     [123,456] |\n|   15 |                                                 ["abc","def"] |\n|   16 |                              [null,true,false,100,6.18,"abc"] |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |\n+------+---------------------------------------------------------------+\n18 rows in set (0.03 sec)\n\n'})}),"\n",(0,i.jsx)(e.h5,{id:"write-data-using-insert-into",children:"write data using insert into"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"total rows increae from 18 to 19 after insert 1 row"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> INSERT INTO test_json VALUES(26, \'{"k1":"v1", "k2": 200}\');\nQuery OK, 1 row affected (0.09 sec)\n{\'label\':\'insert_4ece6769d1b42fd_ac9f25b3b8f3dc02\', \'status\':\'VISIBLE\', \'txnId\':\'12016\'}\n\nmysql> SELECT * FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+\n| id   | j                                                             |\n+------+---------------------------------------------------------------+\n|    1 |                                                          NULL |\n|    2 |                                                          null |\n|    3 |                                                          true |\n|    4 |                                                         false |\n|    5 |                                                           100 |\n|    6 |                                                         10000 |\n|    7 |                                                    1000000000 |\n|    8 |                                           1152921504606846976 |\n|    9 |                                                          6.18 |\n|   10 |                                                        "abcd" |\n|   11 |                                                            {} |\n|   12 |                                         {"k1":"v31","k2":300} |\n|   13 |                                                            [] |\n|   14 |                                                     [123,456] |\n|   15 |                                                 ["abc","def"] |\n|   16 |                              [null,true,false,100,6.18,"abc"] |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |\n|   26 |                                          {"k1":"v1","k2":200} |\n+------+---------------------------------------------------------------+\n19 rows in set (0.03 sec)\n\n'})}),"\n",(0,i.jsx)(e.h4,{id:"query",children:"Query"}),"\n",(0,i.jsx)(e.h5,{id:"extract-some-filed-from-json-by-json_extract-functions",children:"extract some filed from json by json_extract functions"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"extract the whole json, '$' stands for root in json path"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'+------+---------------------------------------------------------------+---------------------------------------------------------------+\n| id   | j                                                             | json_extract(`j`, \'$\')                                       |\n+------+---------------------------------------------------------------+---------------------------------------------------------------+\n|    1 |                                                          NULL |                                                          NULL |\n|    2 |                                                          null |                                                          null |\n|    3 |                                                          true |                                                          true |\n|    4 |                                                         false |                                                         false |\n|    5 |                                                           100 |                                                           100 |\n|    6 |                                                         10000 |                                                         10000 |\n|    7 |                                                    1000000000 |                                                    1000000000 |\n|    8 |                                           1152921504606846976 |                                           1152921504606846976 |\n|    9 |                                                          6.18 |                                                          6.18 |\n|   10 |                                                        "abcd" |                                                        "abcd" |\n|   11 |                                                            {} |                                                            {} |\n|   12 |                                         {"k1":"v31","k2":300} |                                         {"k1":"v31","k2":300} |\n|   13 |                                                            [] |                                                            [] |\n|   14 |                                                     [123,456] |                                                     [123,456] |\n|   15 |                                                 ["abc","def"] |                                                 ["abc","def"] |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                              [null,true,false,100,6.18,"abc"] |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                            [{"k1":"v41","k2":400},1,"a",3.14] |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |\n|   26 |                                          {"k1":"v1","k2":200} |                                          {"k1":"v1","k2":200} |\n+------+---------------------------------------------------------------+---------------------------------------------------------------+\n19 rows in set (0.03 sec)\n'})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"extract k1 field, return NULL if it does not exist"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract(j, \'$.k1\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+----------------------------+\n| id   | j                                                             | json_extract(`j`, \'$.k1\') |\n+------+---------------------------------------------------------------+----------------------------+\n|    1 |                                                          NULL |                       NULL |\n|    2 |                                                          null |                       NULL |\n|    3 |                                                          true |                       NULL |\n|    4 |                                                         false |                       NULL |\n|    5 |                                                           100 |                       NULL |\n|    6 |                                                         10000 |                       NULL |\n|    7 |                                                    1000000000 |                       NULL |\n|    8 |                                           1152921504606846976 |                       NULL |\n|    9 |                                                          6.18 |                       NULL |\n|   10 |                                                        "abcd" |                       NULL |\n|   11 |                                                            {} |                       NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                      "v31" |\n|   13 |                                                            [] |                       NULL |\n|   14 |                                                     [123,456] |                       NULL |\n|   15 |                                                 ["abc","def"] |                       NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                       NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                       NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                      "v31" |\n|   26 |                                          {"k1":"v1","k2":200} |                       "v1" |\n+------+---------------------------------------------------------------+----------------------------+\n19 rows in set (0.03 sec)\n'})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"extract element 0 of the top level array"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract(j, \'$[0]\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+----------------------------+\n| id   | j                                                             | json_extract(`j`, \'$[0]\') |\n+------+---------------------------------------------------------------+----------------------------+\n|    1 |                                                          NULL |                       NULL |\n|    2 |                                                          null |                       NULL |\n|    3 |                                                          true |                       NULL |\n|    4 |                                                         false |                       NULL |\n|    5 |                                                           100 |                       NULL |\n|    6 |                                                         10000 |                       NULL |\n|    7 |                                                    1000000000 |                       NULL |\n|    8 |                                           1152921504606846976 |                       NULL |\n|    9 |                                                          6.18 |                       NULL |\n|   10 |                                                        "abcd" |                       NULL |\n|   11 |                                                            {} |                       NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                       NULL |\n|   13 |                                                            [] |                       NULL |\n|   14 |                                                     [123,456] |                        123 |\n|   15 |                                                 ["abc","def"] |                      "abc" |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                       null |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |      {"k1":"v41","k2":400} |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                       NULL |\n|   26 |                                          {"k1":"v1","k2":200} |                       NULL |\n+------+---------------------------------------------------------------+----------------------------+\n19 rows in set (0.03 sec)\n'})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"extract a whole json array of name a1"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract(j, \'$.a1\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+------------------------------------+\n| id   | j                                                             | json_extract(`j`, \'$.a1\')         |\n+------+---------------------------------------------------------------+------------------------------------+\n|    1 |                                                          NULL |                               NULL |\n|    2 |                                                          null |                               NULL |\n|    3 |                                                          true |                               NULL |\n|    4 |                                                         false |                               NULL |\n|    5 |                                                           100 |                               NULL |\n|    6 |                                                         10000 |                               NULL |\n|    7 |                                                    1000000000 |                               NULL |\n|    8 |                                           1152921504606846976 |                               NULL |\n|    9 |                                                          6.18 |                               NULL |\n|   10 |                                                        "abcd" |                               NULL |\n|   11 |                                                            {} |                               NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                               NULL |\n|   13 |                                                            [] |                               NULL |\n|   14 |                                                     [123,456] |                               NULL |\n|   15 |                                                 ["abc","def"] |                               NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                               NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                               NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} | [{"k1":"v41","k2":400},1,"a",3.14] |\n|   26 |                                          {"k1":"v1","k2":200} |                               NULL |\n+------+---------------------------------------------------------------+------------------------------------+\n19 rows in set (0.02 sec)\n'})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"extract nested field from an object in an array"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract(j, \'$.a1[0]\'), json_extract(j, \'$.a1[0].k1\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+-------------------------------+----------------------------------+\n| id   | j                                                             | json_extract(`j`, \'$.a1[0]\') | json_extract(`j`, \'$.a1[0].k1\') |\n+------+---------------------------------------------------------------+-------------------------------+----------------------------------+\n|    1 |                                                          NULL |                          NULL |                             NULL |\n|    2 |                                                          null |                          NULL |                             NULL |\n|    3 |                                                          true |                          NULL |                             NULL |\n|    4 |                                                         false |                          NULL |                             NULL |\n|    5 |                                                           100 |                          NULL |                             NULL |\n|    6 |                                                         10000 |                          NULL |                             NULL |\n|    7 |                                                    1000000000 |                          NULL |                             NULL |\n|    8 |                                           1152921504606846976 |                          NULL |                             NULL |\n|    9 |                                                          6.18 |                          NULL |                             NULL |\n|   10 |                                                        "abcd" |                          NULL |                             NULL |\n|   11 |                                                            {} |                          NULL |                             NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                          NULL |                             NULL |\n|   13 |                                                            [] |                          NULL |                             NULL |\n|   14 |                                                     [123,456] |                          NULL |                             NULL |\n|   15 |                                                 ["abc","def"] |                          NULL |                             NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                          NULL |                             NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                          NULL |                             NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |         {"k1":"v41","k2":400} |                            "v41" |\n|   26 |                                          {"k1":"v1","k2":200} |                          NULL |                             NULL |\n+------+---------------------------------------------------------------+-------------------------------+----------------------------------+\n19 rows in set (0.02 sec)\n\n'})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"extract field with specific datatype"}),"\n"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"json_extract_string will extract field with string type, convert to string if the field is not string"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract_string(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+---------------------------------------------------------------+\n| id   | j                                                             | json_extract_string(`j`, \'$\')                                |\n+------+---------------------------------------------------------------+---------------------------------------------------------------+\n|    1 | NULL                                                          | NULL                                                          |\n|    2 | null                                                          | null                                                          |\n|    3 | true                                                          | true                                                          |\n|    4 | false                                                         | false                                                         |\n|    5 | 100                                                           | 100                                                           |\n|    6 | 10000                                                         | 10000                                                         |\n|    7 | 1000000000                                                    | 1000000000                                                    |\n|    8 | 1152921504606846976                                           | 1152921504606846976                                           |\n|    9 | 6.18                                                          | 6.18                                                          |\n|   10 | "abcd"                                                        | abcd                                                          |\n|   11 | {}                                                            | {}                                                            |\n|   12 | {"k1":"v31","k2":300}                                         | {"k1":"v31","k2":300}                                         |\n|   13 | []                                                            | []                                                            |\n|   14 | [123,456]                                                     | [123,456]                                                     |\n|   15 | ["abc","def"]                                                 | ["abc","def"]                                                 |\n|   16 | [null,true,false,100,6.18,"abc"]                              | [null,true,false,100,6.18,"abc"]                              |\n|   17 | [{"k1":"v41","k2":400},1,"a",3.14]                            | [{"k1":"v41","k2":400},1,"a",3.14]                            |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |\n|   26 | {"k1":"v1","k2":200}                                          | {"k1":"v1","k2":200}                                          |\n+------+---------------------------------------------------------------+---------------------------------------------------------------+\n19 rows in set (0.02 sec)\n\nmysql> SELECT id, j, json_extract_string(j, \'$.k1\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+-----------------------------------+\n| id   | j                                                             | json_extract_string(`j`, \'$.k1\') |\n+------+---------------------------------------------------------------+-----------------------------------+\n|    1 |                                                          NULL | NULL                              |\n|    2 |                                                          null | NULL                              |\n|    3 |                                                          true | NULL                              |\n|    4 |                                                         false | NULL                              |\n|    5 |                                                           100 | NULL                              |\n|    6 |                                                         10000 | NULL                              |\n|    7 |                                                    1000000000 | NULL                              |\n|    8 |                                           1152921504606846976 | NULL                              |\n|    9 |                                                          6.18 | NULL                              |\n|   10 |                                                        "abcd" | NULL                              |\n|   11 |                                                            {} | NULL                              |\n|   12 |                                         {"k1":"v31","k2":300} | v31                               |\n|   13 |                                                            [] | NULL                              |\n|   14 |                                                     [123,456] | NULL                              |\n|   15 |                                                 ["abc","def"] | NULL                              |\n|   16 |                              [null,true,false,100,6.18,"abc"] | NULL                              |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] | NULL                              |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} | v31                               |\n|   26 |                                          {"k1":"v1","k2":200} | v1                                |\n+------+---------------------------------------------------------------+-----------------------------------+\n19 rows in set (0.03 sec)\n\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"json_extract_int will extract field with int type, return NULL if the field is not int"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract_int(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+-----------------------------+\n| id   | j                                                             | json_extract_int(`j`, \'$\') |\n+------+---------------------------------------------------------------+-----------------------------+\n|    1 |                                                          NULL |                        NULL |\n|    2 |                                                          null |                        NULL |\n|    3 |                                                          true |                        NULL |\n|    4 |                                                         false |                        NULL |\n|    5 |                                                           100 |                         100 |\n|    6 |                                                         10000 |                       10000 |\n|    7 |                                                    1000000000 |                  1000000000 |\n|    8 |                                           1152921504606846976 |                        NULL |\n|    9 |                                                          6.18 |                        NULL |\n|   10 |                                                        "abcd" |                        NULL |\n|   11 |                                                            {} |                        NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                        NULL |\n|   13 |                                                            [] |                        NULL |\n|   14 |                                                     [123,456] |                        NULL |\n|   15 |                                                 ["abc","def"] |                        NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                        NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                        NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                        NULL |\n|   26 |                                          {"k1":"v1","k2":200} |                        NULL |\n+------+---------------------------------------------------------------+-----------------------------+\n19 rows in set (0.02 sec)\n\nmysql> SELECT id, j, json_extract_int(j, \'$.k2\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+--------------------------------+\n| id   | j                                                             | json_extract_int(`j`, \'$.k2\') |\n+------+---------------------------------------------------------------+--------------------------------+\n|    1 |                                                          NULL |                           NULL |\n|    2 |                                                          null |                           NULL |\n|    3 |                                                          true |                           NULL |\n|    4 |                                                         false |                           NULL |\n|    5 |                                                           100 |                           NULL |\n|    6 |                                                         10000 |                           NULL |\n|    7 |                                                    1000000000 |                           NULL |\n|    8 |                                           1152921504606846976 |                           NULL |\n|    9 |                                                          6.18 |                           NULL |\n|   10 |                                                        "abcd" |                           NULL |\n|   11 |                                                            {} |                           NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                            300 |\n|   13 |                                                            [] |                           NULL |\n|   14 |                                                     [123,456] |                           NULL |\n|   15 |                                                 ["abc","def"] |                           NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                           NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                           NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                            300 |\n|   26 |                                          {"k1":"v1","k2":200} |                            200 |\n+------+---------------------------------------------------------------+--------------------------------+\n19 rows in set (0.03 sec)\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"json_extract_bigint will extract field with bigint type, return NULL if the field is not bigint"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract_bigint(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+--------------------------------+\n| id   | j                                                             | json_extract_bigint(`j`, \'$\') |\n+------+---------------------------------------------------------------+--------------------------------+\n|    1 |                                                          NULL |                           NULL |\n|    2 |                                                          null |                           NULL |\n|    3 |                                                          true |                           NULL |\n|    4 |                                                         false |                           NULL |\n|    5 |                                                           100 |                            100 |\n|    6 |                                                         10000 |                          10000 |\n|    7 |                                                    1000000000 |                     1000000000 |\n|    8 |                                           1152921504606846976 |            1152921504606846976 |\n|    9 |                                                          6.18 |                           NULL |\n|   10 |                                                        "abcd" |                           NULL |\n|   11 |                                                            {} |                           NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                           NULL |\n|   13 |                                                            [] |                           NULL |\n|   14 |                                                     [123,456] |                           NULL |\n|   15 |                                                 ["abc","def"] |                           NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                           NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                           NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                           NULL |\n|   26 |                                          {"k1":"v1","k2":200} |                           NULL |\n+------+---------------------------------------------------------------+--------------------------------+\n19 rows in set (0.03 sec)\n\nmysql> SELECT id, j, json_extract_bigint(j, \'$.k2\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+-----------------------------------+\n| id   | j                                                             | json_extract_bigint(`j`, \'$.k2\') |\n+------+---------------------------------------------------------------+-----------------------------------+\n|    1 |                                                          NULL |                              NULL |\n|    2 |                                                          null |                              NULL |\n|    3 |                                                          true |                              NULL |\n|    4 |                                                         false |                              NULL |\n|    5 |                                                           100 |                              NULL |\n|    6 |                                                         10000 |                              NULL |\n|    7 |                                                    1000000000 |                              NULL |\n|    8 |                                           1152921504606846976 |                              NULL |\n|    9 |                                                          6.18 |                              NULL |\n|   10 |                                                        "abcd" |                              NULL |\n|   11 |                                                            {} |                              NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                               300 |\n|   13 |                                                            [] |                              NULL |\n|   14 |                                                     [123,456] |                              NULL |\n|   15 |                                                 ["abc","def"] |                              NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                              NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                              NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                               300 |\n|   26 |                                          {"k1":"v1","k2":200} |                               200 |\n+------+---------------------------------------------------------------+-----------------------------------+\n19 rows in set (0.02 sec)\n\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"json_extract_double will extract field with double type, return NULL if the field is not double"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract_double(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+--------------------------------+\n| id   | j                                                             | json_extract_double(`j`, \'$\') |\n+------+---------------------------------------------------------------+--------------------------------+\n|    1 |                                                          NULL |                           NULL |\n|    2 |                                                          null |                           NULL |\n|    3 |                                                          true |                           NULL |\n|    4 |                                                         false |                           NULL |\n|    5 |                                                           100 |                            100 |\n|    6 |                                                         10000 |                          10000 |\n|    7 |                                                    1000000000 |                     1000000000 |\n|    8 |                                           1152921504606846976 |          1.152921504606847e+18 |\n|    9 |                                                          6.18 |                           6.18 |\n|   10 |                                                        "abcd" |                           NULL |\n|   11 |                                                            {} |                           NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                           NULL |\n|   13 |                                                            [] |                           NULL |\n|   14 |                                                     [123,456] |                           NULL |\n|   15 |                                                 ["abc","def"] |                           NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                           NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                           NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                           NULL |\n|   26 |                                          {"k1":"v1","k2":200} |                           NULL |\n+------+---------------------------------------------------------------+--------------------------------+\n19 rows in set (0.02 sec)\n\nmysql> SELECT id, j, json_extract_double(j, \'$.k2\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+-----------------------------------+\n| id   | j                                                             | json_extract_double(`j`, \'$.k2\') |\n+------+---------------------------------------------------------------+-----------------------------------+\n|    1 |                                                          NULL |                              NULL |\n|    2 |                                                          null |                              NULL |\n|    3 |                                                          true |                              NULL |\n|    4 |                                                         false |                              NULL |\n|    5 |                                                           100 |                              NULL |\n|    6 |                                                         10000 |                              NULL |\n|    7 |                                                    1000000000 |                              NULL |\n|    8 |                                           1152921504606846976 |                              NULL |\n|    9 |                                                          6.18 |                              NULL |\n|   10 |                                                        "abcd" |                              NULL |\n|   11 |                                                            {} |                              NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                               300 |\n|   13 |                                                            [] |                              NULL |\n|   14 |                                                     [123,456] |                              NULL |\n|   15 |                                                 ["abc","def"] |                              NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                              NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                              NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                               300 |\n|   26 |                                          {"k1":"v1","k2":200} |                               200 |\n+------+---------------------------------------------------------------+-----------------------------------+\n19 rows in set (0.03 sec)\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"json_extract_bool will extract field with boolean type, return NULL if the field is not boolean"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract_bool(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+------------------------------+\n| id   | j                                                             | json_extract_bool(`j`, \'$\') |\n+------+---------------------------------------------------------------+------------------------------+\n|    1 |                                                          NULL |                         NULL |\n|    2 |                                                          null |                         NULL |\n|    3 |                                                          true |                            1 |\n|    4 |                                                         false |                            0 |\n|    5 |                                                           100 |                         NULL |\n|    6 |                                                         10000 |                         NULL |\n|    7 |                                                    1000000000 |                         NULL |\n|    8 |                                           1152921504606846976 |                         NULL |\n|    9 |                                                          6.18 |                         NULL |\n|   10 |                                                        "abcd" |                         NULL |\n|   11 |                                                            {} |                         NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                         NULL |\n|   13 |                                                            [] |                         NULL |\n|   14 |                                                     [123,456] |                         NULL |\n|   15 |                                                 ["abc","def"] |                         NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                         NULL |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                         NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                         NULL |\n|   26 |                                          {"k1":"v1","k2":200} |                         NULL |\n+------+---------------------------------------------------------------+------------------------------+\n19 rows in set (0.01 sec)\n\nmysql> SELECT id, j, json_extract_bool(j, \'$[1]\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+---------------------------------+\n| id   | j                                                             | json_extract_bool(`j`, \'$[1]\') |\n+------+---------------------------------------------------------------+---------------------------------+\n|    1 |                                                          NULL |                            NULL |\n|    2 |                                                          null |                            NULL |\n|    3 |                                                          true |                            NULL |\n|    4 |                                                         false |                            NULL |\n|    5 |                                                           100 |                            NULL |\n|    6 |                                                         10000 |                            NULL |\n|    7 |                                                    1000000000 |                            NULL |\n|    8 |                                           1152921504606846976 |                            NULL |\n|    9 |                                                          6.18 |                            NULL |\n|   10 |                                                        "abcd" |                            NULL |\n|   11 |                                                            {} |                            NULL |\n|   12 |                                         {"k1":"v31","k2":300} |                            NULL |\n|   13 |                                                            [] |                            NULL |\n|   14 |                                                     [123,456] |                            NULL |\n|   15 |                                                 ["abc","def"] |                            NULL |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                               1 |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                            NULL |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                            NULL |\n|   26 |                                          {"k1":"v1","k2":200} |                            NULL |\n+------+---------------------------------------------------------------+---------------------------------+\n19 rows in set (0.01 sec)\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"json_extract_isnull will extract field with json null type, return 1 if the field is json null , else 0"}),"\n",(0,i.jsx)(e.li,{children:"json null is different from SQL NULL. SQL NULL stands for no value for a field, but json null stands for an field with special value null."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_extract_isnull(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+--------------------------------+\n| id   | j                                                             | json_extract_isnull(`j`, \'$\') |\n+------+---------------------------------------------------------------+--------------------------------+\n|    1 |                                                          NULL |                           NULL |\n|    2 |                                                          null |                              1 |\n|    3 |                                                          true |                              0 |\n|    4 |                                                         false |                              0 |\n|    5 |                                                           100 |                              0 |\n|    6 |                                                         10000 |                              0 |\n|    7 |                                                    1000000000 |                              0 |\n|    8 |                                           1152921504606846976 |                              0 |\n|    9 |                                                          6.18 |                              0 |\n|   10 |                                                        "abcd" |                              0 |\n|   11 |                                                            {} |                              0 |\n|   12 |                                         {"k1":"v31","k2":300} |                              0 |\n|   13 |                                                            [] |                              0 |\n|   14 |                                                     [123,456] |                              0 |\n|   15 |                                                 ["abc","def"] |                              0 |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                              0 |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                              0 |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                              0 |\n|   26 |                                          {"k1":"v1","k2":200} |                              0 |\n+------+---------------------------------------------------------------+--------------------------------+\n19 rows in set (0.03 sec)\n\n'})}),"\n",(0,i.jsx)(e.h5,{id:"check-if-a-field-is-existed-in-json-by-json_exists_path",children:"check if a field is existed in json by json_exists_path"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_exists_path(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+-----------------------------+\n| id   | j                                                             | json_exists_path(`j`, \'$\') |\n+------+---------------------------------------------------------------+-----------------------------+\n|    1 |                                                          NULL |                        NULL |\n|    2 |                                                          null |                           1 |\n|    3 |                                                          true |                           1 |\n|    4 |                                                         false |                           1 |\n|    5 |                                                           100 |                           1 |\n|    6 |                                                         10000 |                           1 |\n|    7 |                                                    1000000000 |                           1 |\n|    8 |                                           1152921504606846976 |                           1 |\n|    9 |                                                          6.18 |                           1 |\n|   10 |                                                        "abcd" |                           1 |\n|   11 |                                                            {} |                           1 |\n|   12 |                                         {"k1":"v31","k2":300} |                           1 |\n|   13 |                                                            [] |                           1 |\n|   14 |                                                     [123,456] |                           1 |\n|   15 |                                                 ["abc","def"] |                           1 |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                           1 |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                           1 |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                           1 |\n|   26 |                                          {"k1":"v1","k2":200} |                           1 |\n+------+---------------------------------------------------------------+-----------------------------+\n19 rows in set (0.02 sec)\n\nmysql> SELECT id, j, json_exists_path(j, \'$.k1\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+--------------------------------+\n| id   | j                                                             | json_exists_path(`j`, \'$.k1\') |\n+------+---------------------------------------------------------------+--------------------------------+\n|    1 |                                                          NULL |                           NULL |\n|    2 |                                                          null |                              0 |\n|    3 |                                                          true |                              0 |\n|    4 |                                                         false |                              0 |\n|    5 |                                                           100 |                              0 |\n|    6 |                                                         10000 |                              0 |\n|    7 |                                                    1000000000 |                              0 |\n|    8 |                                           1152921504606846976 |                              0 |\n|    9 |                                                          6.18 |                              0 |\n|   10 |                                                        "abcd" |                              0 |\n|   11 |                                                            {} |                              0 |\n|   12 |                                         {"k1":"v31","k2":300} |                              1 |\n|   13 |                                                            [] |                              0 |\n|   14 |                                                     [123,456] |                              0 |\n|   15 |                                                 ["abc","def"] |                              0 |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                              0 |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                              0 |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                              1 |\n|   26 |                                          {"k1":"v1","k2":200} |                              1 |\n+------+---------------------------------------------------------------+--------------------------------+\n19 rows in set (0.03 sec)\n\nmysql> SELECT id, j, json_exists_path(j, \'$[2]\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+--------------------------------+\n| id   | j                                                             | json_exists_path(`j`, \'$[2]\') |\n+------+---------------------------------------------------------------+--------------------------------+\n|    1 |                                                          NULL |                           NULL |\n|    2 |                                                          null |                              0 |\n|    3 |                                                          true |                              0 |\n|    4 |                                                         false |                              0 |\n|    5 |                                                           100 |                              0 |\n|    6 |                                                         10000 |                              0 |\n|    7 |                                                    1000000000 |                              0 |\n|    8 |                                           1152921504606846976 |                              0 |\n|    9 |                                                          6.18 |                              0 |\n|   10 |                                                        "abcd" |                              0 |\n|   11 |                                                            {} |                              0 |\n|   12 |                                         {"k1":"v31","k2":300} |                              0 |\n|   13 |                                                            [] |                              0 |\n|   14 |                                                     [123,456] |                              0 |\n|   15 |                                                 ["abc","def"] |                              0 |\n|   16 |                              [null,true,false,100,6.18,"abc"] |                              1 |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] |                              1 |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} |                              0 |\n|   26 |                                          {"k1":"v1","k2":200} |                              0 |\n+------+---------------------------------------------------------------+--------------------------------+\n19 rows in set (0.02 sec)\n\n\n'})}),"\n",(0,i.jsx)(e.h5,{id:"get-the-datatype-of-a-field-in-json-by-json_type",children:"get the datatype of a field in json by json_type"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"return the data type of the field specified by json path, NULL if not existed."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'mysql> SELECT id, j, json_type(j, \'$\') FROM test_json ORDER BY id;\n+------+---------------------------------------------------------------+----------------------+\n| id   | j                                                             | json_type(`j`, \'$\') |\n+------+---------------------------------------------------------------+----------------------+\n|    1 |                                                          NULL | NULL                 |\n|    2 |                                                          null | null                 |\n|    3 |                                                          true | bool                 |\n|    4 |                                                         false | bool                 |\n|    5 |                                                           100 | int                  |\n|    6 |                                                         10000 | int                  |\n|    7 |                                                    1000000000 | int                  |\n|    8 |                                           1152921504606846976 | bigint               |\n|    9 |                                                          6.18 | double               |\n|   10 |                                                        "abcd" | string               |\n|   11 |                                                            {} | object               |\n|   12 |                                         {"k1":"v31","k2":300} | object               |\n|   13 |                                                            [] | array                |\n|   14 |                                                     [123,456] | array                |\n|   15 |                                                 ["abc","def"] | array                |\n|   16 |                              [null,true,false,100,6.18,"abc"] | array                |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] | array                |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} | object               |\n|   26 |                                          {"k1":"v1","k2":200} | object               |\n+------+---------------------------------------------------------------+----------------------+\n19 rows in set (0.02 sec)\n\nmysql> select id, j, json_type(j, \'$.k1\') from test_json order by id;\n+------+---------------------------------------------------------------+-------------------------+\n| id   | j                                                             | json_type(`j`, \'$.k1\') |\n+------+---------------------------------------------------------------+-------------------------+\n|    1 |                                                          NULL | NULL                    |\n|    2 |                                                          null | NULL                    |\n|    3 |                                                          true | NULL                    |\n|    4 |                                                         false | NULL                    |\n|    5 |                                                           100 | NULL                    |\n|    6 |                                                         10000 | NULL                    |\n|    7 |                                                    1000000000 | NULL                    |\n|    8 |                                           1152921504606846976 | NULL                    |\n|    9 |                                                          6.18 | NULL                    |\n|   10 |                                                        "abcd" | NULL                    |\n|   11 |                                                            {} | NULL                    |\n|   12 |                                         {"k1":"v31","k2":300} | string                  |\n|   13 |                                                            [] | NULL                    |\n|   14 |                                                     [123,456] | NULL                    |\n|   15 |                                                 ["abc","def"] | NULL                    |\n|   16 |                              [null,true,false,100,6.18,"abc"] | NULL                    |\n|   17 |                            [{"k1":"v41","k2":400},1,"a",3.14] | NULL                    |\n|   18 | {"k1":"v31","k2":300,"a1":[{"k1":"v41","k2":400},1,"a",3.14]} | string                  |\n|   26 |                                          {"k1":"v1","k2":200} | string                  |\n+------+---------------------------------------------------------------+-------------------------+\n19 rows in set (0.03 sec)\n\n'})}),"\n",(0,i.jsx)(e.h3,{id:"faq",children:"FAQ"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Is there a difference between null in JSON and NULL in SQL (i.e., IS NULL)?"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:'Yes, there is a difference. In JSON, null (e.g., {"key1": null}) means that the key key1 exists and its value is explicitly null. This is a special type that gets encoded into JSON binary.'}),"\n",(0,i.jsx)(e.p,{children:"In contrast, SQL NULL (when using IS NULL) can indicate that the key doesn\u2019t exist at all in the JSON object."}),"\n",(0,i.jsx)(e.p,{children:"For example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT JSON_EXTRACT_STRING(\'{"key1" : null}\', "$.key1") IS NULL;\n+----------------------------------------------------------+\n| JSON_EXTRACT_STRING(\'{"key1" : null}\', "$.key1") IS NULL |\n+----------------------------------------------------------+\n|                                                        0 |\n+----------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_EXTRACT_STRING(\'{"key1" : null}\', "$.key_not_exist") IS NULL;\n+-------------------------------------------------------------------+\n| JSON_EXTRACT_STRING(\'{"key1" : null}\', "$.key_not_exist") IS NULL |\n+-------------------------------------------------------------------+\n|                                                                 1 |\n+-------------------------------------------------------------------+\n1 row in set (0.01 sec)\n'})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsxs)(e.li,{children:["What\u2019s the difference between ",(0,i.jsx)(e.code,{children:"GET_JSON_XXX"})," and ",(0,i.jsx)(e.code,{children:"JSON_EXTRACT_XXX"})," functions, and how should I choose between them?"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"GET_JSON_XXX"})," functions are designed for use on string types \u2014 they extract values directly from raw JSON strings. On the other hand, ",(0,i.jsx)(e.code,{children:"JSON_EXTRACT_XXX"})," functions are implemented specifically for the JSON data type and are optimized for it."]}),"\n",(0,i.jsx)(e.h3,{id:"keywords",children:"keywords"}),"\n",(0,i.jsx)(e.p,{children:"JSONB, JSON, json_parse, json_parse_error_to_null, json_parse_error_to_value, json_extract, json_extract_isnull, json_extract_bool, json_extract_int, json_extract_bigint, json_extract_double, json_extract_string, json_exists_path, json_type"})]})}function L(n={}){let{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},250065:function(n,e,s){s.d(e,{Z:function(){return a},a:function(){return r}});var t=s(667294);let i={},l=t.createContext(i);function r(n){let e=t.useContext(l);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);