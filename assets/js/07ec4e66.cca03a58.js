"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["160745"],{715685:function(n,e,a){a.r(e),a.d(e,{default:()=>u,frontMatter:()=>c,metadata:()=>r,assets:()=>i,toc:()=>o,contentTitle:()=>l});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-concat","title":"ARRAY_CONCAT","description":"array_concat","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-concat.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-concat","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-concat","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_CONCAT","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_COMPACT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-compact"},"next":{"title":"ARRAY_CONTAINS","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-contains"}}'),t=a("785893"),s=a("250065");let c={title:"ARRAY_CONCAT",language:"en"},l=void 0,i={},o=[{value:"array_concat",id:"array_concat",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Examples",id:"examples",level:3},{value:"Notes",id:"notes",level:3},{value:"Keywords",id:"keywords",level:3}];function d(n){let e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",version:"version",...(0,s.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"array_concat",children:"array_concat"}),"\n",(0,t.jsx)(e.version,{since:"2.0.0",children:"\n"}),"\n",(0,t.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(e.p,{children:"Concatenates all input arrays into a single array. The function accepts one or more arrays as parameters and connects them into a new array in the order of the parameters."}),"\n",(0,t.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"array_concat(ARRAY<T> arr1, [ARRAY<T> arr2, ...])\n"})}),"\n",(0,t.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"arr1, arr2, ..."}),"\uFF1AARRAY<T> type, the arrays to concatenate. Supports column names or constant values."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"T supported types:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,t.jsx)(e.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,t.jsx)(e.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,t.jsx)(e.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,t.jsx)(e.li,{children:"IP types: IPV4, IPV6"}),"\n",(0,t.jsx)(e.li,{children:"Complex data types: ARRAY, MAP, STRUCT"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsx)(e.p,{children:"Return type: ARRAY<T>"}),"\n",(0,t.jsx)(e.p,{children:"Return value meaning:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"The concatenated new array containing all elements from the input arrays, maintaining the original order"}),"\n",(0,t.jsx)(e.li,{children:"NULL: if any input array is NULL"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Usage notes:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Empty arrays will be ignored and will not add any elements"}),"\n",(0,t.jsx)(e.li,{children:"When there is only one array and it is empty, returns an empty array; when there is only one array and it is NULL, returns NULL"}),"\n",(0,t.jsx)(e.li,{children:"Complex types (nested arrays, MAP, STRUCT) require completely consistent structure when concatenating, otherwise an error will be thrown"}),"\n",(0,t.jsx)(e.li,{children:"For null values in array elements: null elements will be normally retained in the concatenation result"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE array_concat_test (\n    id INT,\n    int_array1 ARRAY<INT>,\n    int_array2 ARRAY<INT>,\n    string_array1 ARRAY<STRING>,\n    string_array2 ARRAY<STRING>\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 3\nPROPERTIES (\n    \"replication_num\" = \"1\"\n);\n\nINSERT INTO array_concat_test VALUES\n(1, [1, 2, 3], [4, 5, 6], ['a', 'b'], ['c', 'd']),\n(2, [10, 20], [30, 40], [], ['x', 'y']),\n(3, NULL, [100, 200], NULL, ['z']),\n(4, [], [], [], []),\n(5, [1, null, 3], [null, 5, 6], ['a', null, 'c'], ['d', 'e']);\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Query examples:"})}),"\n",(0,t.jsx)(e.p,{children:"Concatenating multiple array literals:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat([1, 2], [7, 8], [5, 6]);\n+--------------------------------------+\n| array_concat([1, 2], [7, 8], [5, 6]) |\n+--------------------------------------+\n| [1, 2, 7, 8, 5, 6]                   |\n+--------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"String array concatenation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'SELECT array_concat(string_array1, string_array2) FROM array_concat_test WHERE id = 1;\n+--------------------------------------------+\n| array_concat(string_array1, string_array2) |\n+--------------------------------------------+\n| ["a", "b", "c", "d"]                       |\n+--------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Empty array concatenation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat([], []);\n+----------------------+\n| array_concat([], []) |\n+----------------------+\n| []                   |\n+----------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"NULL array concatenation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat(int_array1, int_array2) FROM array_concat_test WHERE id = 3;\n+--------------------------------------+\n| array_concat(int_array1, int_array2) |\n+--------------------------------------+\n| NULL                                 |\n+--------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Array concatenation containing null elements: null elements will be normally retained in the concatenation result."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat(int_array1, int_array2) FROM array_concat_test WHERE id = 5;\n+--------------------------------------+\n| array_concat(int_array1, int_array2) |\n+--------------------------------------+\n| [1, null, 3, null, 5, 6]             |\n+--------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Type compatibility example: concatenating int_array1 and string_array1, string elements cannot be converted to int, resulting in null."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat(int_array1, string_array1) FROM array_concat_test WHERE id = 1;\n+-----------------------------------------+\n| array_concat(int_array1, string_array1) |\n+-----------------------------------------+\n| [1, 2, 3, null, null]                   |\n+-----------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Complex type examples:"}),"\n",(0,t.jsx)(e.p,{children:"Nested array concatenation, can be concatenated when structures are consistent."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat([[1,2],[3,4]], [[5,6],[7,8]]);\n+--------------------------------------------+\n| array_concat([[1,2],[3,4]], [[5,6],[7,8]]) |\n+--------------------------------------------+\n| [[1, 2], [3, 4], [5, 6], [7, 8]]           |\n+--------------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"When nested array structures are inconsistent, an error is thrown."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat([[1,2]], [{'k':1}]);\nERROR 1105 (HY000): errCode = 2, detailMessage = can not cast from origin type ARRAY<ARRAY<INT>> to target type=ARRAY<DOUBLE>\n"})}),"\n",(0,t.jsx)(e.p,{children:"Map type concatenation, can be concatenated when structures are consistent."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat([{'k':1}], [{'k':2}]);\n+------------------------------------+\n| array_concat([{'k':1}], [{'k':2}]) |\n+------------------------------------+\n| [{\"k\":1}, {\"k\":2}]                 |\n+------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Struct type concatenation, can be concatenated when structures are consistent."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat(array(named_struct('name','Alice','age',20)), array(named_struct('name','Bob','age',30)));\n+--------------------------------------------------------------------------------------------------------+\n| array_concat(array(named_struct('name','Alice','age',20)), array(named_struct('name','Bob','age',30))) |\n+--------------------------------------------------------------------------------------------------------+\n| [{\"name\":\"Alice\", \"age\":20}, {\"name\":\"Bob\", \"age\":30}]                                                 |\n+--------------------------------------------------------------------------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"When struct structures are inconsistent, an error is thrown."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat(array(named_struct('name','Alice','age',20)), array(named_struct('id',1,'score',95.5,'age',10)));\nERROR 1105 (HY000): errCode = 2, detailMessage = can not cast from origin type ARRAY<STRUCT<name:VARCHAR(5),age:TINYINT>> to target type=ARRAY<DOUBLE>\n"})}),"\n",(0,t.jsx)(e.p,{children:"Incorrect number of parameters will cause an error."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat();\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not found function 'array_concat' which has 0 arity. Candidate functions are: [array_concat(Expression, Expression, ...)]\n"})}),"\n",(0,t.jsx)(e.p,{children:"Passing non-array type will cause an error."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT array_concat('not_an_array');\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: array_concat(VARCHAR(12))\n"})}),"\n",(0,t.jsx)(e.h3,{id:"notes",children:"Notes"}),"\n",(0,t.jsx)(e.p,{children:"Ensure that all input array element types are compatible, especially for nested complex types where the structure should be consistent to avoid type conversion errors at runtime."}),"\n",(0,t.jsx)(e.h3,{id:"keywords",children:"Keywords"}),"\n",(0,t.jsx)(e.p,{children:"ARRAY, CONCAT, ARRAY_CONCAT"})]})}function u(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},250065:function(n,e,a){a.d(e,{Z:function(){return l},a:function(){return c}});var r=a(667294);let t={},s=r.createContext(t);function c(n){let e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:c(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);