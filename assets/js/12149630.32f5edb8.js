"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["36650"],{349493:function(e,n,t){t.r(n),t.d(n,{default:()=>l,frontMatter:()=>r,metadata:()=>s,assets:()=>o,toc:()=>i,contentTitle:()=>a});var s=JSON.parse('{"id":"sql-manual/sql-functions/aggregate-functions/sequence-count","title":"SEQUENCE-COUNT","description":"SEQUENCE-COUNT","source":"@site/versioned_docs/version-2.0/sql-manual/sql-functions/aggregate-functions/sequence-count.md","sourceDirName":"sql-manual/sql-functions/aggregate-functions","slug":"/sql-manual/sql-functions/aggregate-functions/sequence-count","permalink":"/docs/2.0/sql-manual/sql-functions/aggregate-functions/sequence-count","draft":false,"unlisted":false,"tags":[],"version":"2.0","frontMatter":{"title":"SEQUENCE-COUNT","language":"en"},"sidebar":"docs","previous":{"title":"SEQUENCE_MATCH","permalink":"/docs/2.0/sql-manual/sql-functions/aggregate-functions/sequence-match"},"next":{"title":"GROUPING","permalink":"/docs/2.0/sql-manual/sql-functions/aggregate-functions/grouping"}}'),c=t("785893"),u=t("250065");let r={title:"SEQUENCE-COUNT",language:"en"},a=void 0,o={},i=[{value:"SEQUENCE-COUNT",id:"sequence-count",level:2},{value:"Description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Arguments",id:"arguments",level:4},{value:"Returned value",id:"returned-value",level:4},{value:"example",id:"example",level:3},{value:"keywords",id:"keywords",level:3}];function d(e){let n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,u.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"sequence-count",children:"SEQUENCE-COUNT"}),"\n",(0,c.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,c.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.code,{children:"sequence_count(pattern, timestamp, cond1, cond2, ...);"})}),"\n",(0,c.jsx)(n.p,{children:"Counts the number of event chains that matched the pattern. The function searches event chains that do not overlap. It starts to search for the next chain after the current chain is matched."}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"WARNING!"})}),"\n",(0,c.jsx)(n.p,{children:"Events that occur at the same second may lay in the sequence in an undefined order affecting the result."}),"\n",(0,c.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"pattern"})," \u2014 Pattern string."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Pattern syntax"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"(?N)"})," \u2014 Matches the condition argument at position N. Conditions are numbered in the ",(0,c.jsx)(n.code,{children:"[1, 32]"})," range. For example, ",(0,c.jsx)(n.code,{children:"(?1)"})," matches the argument passed to the ",(0,c.jsx)(n.code,{children:"cond1"})," parameter."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:".*"})," \u2014 Matches any number of events. You do not need conditional arguments to count this element of the pattern."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"(?t operator value)"})," \u2014  Sets the time in seconds that should separate two events."]}),"\n",(0,c.jsxs)(n.p,{children:["We define ",(0,c.jsx)(n.code,{children:"t"})," as the difference in seconds between two times,  For example, pattern ",(0,c.jsx)(n.code,{children:"(?1)(?t>1800)(?2)"})," matches events that occur more than 1800 seconds from each other. pattern ",(0,c.jsx)(n.code,{children:"(?1)(?t>10000)(?2)"})," matches events that occur more than 10000 seconds from each other. An arbitrary number of any events can lay between these events. You can use the ",(0,c.jsx)(n.code,{children:">="}),", ",(0,c.jsx)(n.code,{children:">"}),", ",(0,c.jsx)(n.code,{children:"<"}),", ",(0,c.jsx)(n.code,{children:"<="}),", ",(0,c.jsx)(n.code,{children:"=="})," operators."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"timestamp"})," \u2014 Column considered to contain time data. Typical data types are ",(0,c.jsx)(n.code,{children:"Date"})," and ",(0,c.jsx)(n.code,{children:"DateTime"}),". You can also use any of the supported UInt data types."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"cond1"}),", ",(0,c.jsx)(n.code,{children:"cond2"})," \u2014 Conditions that describe the chain of events. Data type: ",(0,c.jsx)(n.code,{children:"UInt8"}),". You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them."]}),"\n",(0,c.jsx)(n.h4,{id:"returned-value",children:"Returned value"}),"\n",(0,c.jsx)(n.p,{children:"Number of non-overlapping event chains that are matched."}),"\n",(0,c.jsx)(n.h3,{id:"example",children:"example"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"count examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sql",children:"DROP TABLE IF EXISTS sequence_count_test2;\n\nCREATE TABLE sequence_count_test2(\n                `uid` int COMMENT 'user id',\n                `date` datetime COMMENT 'date time', \n                `number` int NULL COMMENT 'number' \n                )\nDUPLICATE KEY(uid) \nDISTRIBUTED BY HASH(uid) BUCKETS 3 \nPROPERTIES ( \n    \"replication_num\" = \"1\"\n); \n\nINSERT INTO sequence_count_test2(uid, date, number) values (1, '2022-11-02 10:41:00', 1),\n                                                   (2, '2022-11-02 13:28:02', 2),\n                                                   (3, '2022-11-02 16:15:01', 1),\n                                                   (4, '2022-11-02 19:05:04', 2),\n                                                   (5, '2022-11-02 20:08:44', 3); \n\nSELECT * FROM sequence_count_test2 ORDER BY date;\n\n+------+---------------------+--------+\n| uid  | date                | number |\n+------+---------------------+--------+\n|    1 | 2022-11-02 10:41:00 |      1 |\n|    2 | 2022-11-02 13:28:02 |      2 |\n|    3 | 2022-11-02 16:15:01 |      1 |\n|    4 | 2022-11-02 19:05:04 |      2 |\n|    5 | 2022-11-02 20:08:44 |      3 |\n+------+---------------------+--------+\n\nSELECT sequence_count('(?1)(?2)', date, number = 1, number = 3) FROM sequence_count_test2;\n\n+----------------------------------------------------------------+\n| sequence_count('(?1)(?2)', `date`, `number` = 1, `number` = 3) |\n+----------------------------------------------------------------+\n|                                                              1 |\n+----------------------------------------------------------------+\n\nSELECT sequence_count('(?1)(?2)', date, number = 1, number = 2) FROM sequence_count_test2;\n\n+----------------------------------------------------------------+\n| sequence_count('(?1)(?2)', `date`, `number` = 1, `number` = 2) |\n+----------------------------------------------------------------+\n|                                                              2 |\n+----------------------------------------------------------------+\n\nSELECT sequence_count('(?1)(?t>=10000)(?2)', date, number = 1, number = 2) FROM sequence_count_test1;\n\n+---------------------------------------------------------------------------+\n| sequence_count('(?1)(?t>=3600)(?2)', `date`, `number` = 1, `number` = 2) |\n+---------------------------------------------------------------------------+\n|                                                                         2 |\n+---------------------------------------------------------------------------+\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"not count examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sql",children:"DROP TABLE IF EXISTS sequence_count_test1;\n\nCREATE TABLE sequence_count_test1(\n                `uid` int COMMENT 'user id',\n                `date` datetime COMMENT 'date time', \n                `number` int NULL COMMENT 'number' \n                )\nDUPLICATE KEY(uid) \nDISTRIBUTED BY HASH(uid) BUCKETS 3 \nPROPERTIES ( \n    \"replication_num\" = \"1\"\n); \n\nINSERT INTO sequence_count_test1(uid, date, number) values (1, '2022-11-02 10:41:00', 1),\n                                                   (2, '2022-11-02 11:41:00', 7),\n                                                   (3, '2022-11-02 16:15:01', 3),\n                                                   (4, '2022-11-02 19:05:04', 4),\n                                                   (5, '2022-11-02 21:24:12', 5);\n\nSELECT * FROM sequence_count_test1 ORDER BY date;\n\n+------+---------------------+--------+\n| uid  | date                | number |\n+------+---------------------+--------+\n|    1 | 2022-11-02 10:41:00 |      1 |\n|    2 | 2022-11-02 11:41:00 |      7 |\n|    3 | 2022-11-02 16:15:01 |      3 |\n|    4 | 2022-11-02 19:05:04 |      4 |\n|    5 | 2022-11-02 21:24:12 |      5 |\n+------+---------------------+--------+\n\nSELECT sequence_count('(?1)(?2)', date, number = 1, number = 2) FROM sequence_count_test1;\n\n+----------------------------------------------------------------+\n| sequence_count('(?1)(?2)', `date`, `number` = 1, `number` = 2) |\n+----------------------------------------------------------------+\n|                                                              0 |\n+----------------------------------------------------------------+\n\nSELECT sequence_count('(?1)(?2).*', date, number = 1, number = 2) FROM sequence_count_test1;\n\n+------------------------------------------------------------------+\n| sequence_count('(?1)(?2).*', `date`, `number` = 1, `number` = 2) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+\n\nSELECT sequence_count('(?1)(?t>3600)(?2)', date, number = 1, number = 7) FROM sequence_count_test1;\n\n+--------------------------------------------------------------------------+\n| sequence_count('(?1)(?t>3600)(?2)', `date`, `number` = 1, `number` = 7) |\n+--------------------------------------------------------------------------+\n|                                                                        0 |\n+--------------------------------------------------------------------------+\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"special examples"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sql",children:"DROP TABLE IF EXISTS sequence_count_test3;\n\nCREATE TABLE sequence_count_test3(\n                `uid` int COMMENT 'user id',\n                `date` datetime COMMENT 'date time', \n                `number` int NULL COMMENT 'number' \n                )\nDUPLICATE KEY(uid) \nDISTRIBUTED BY HASH(uid) BUCKETS 3 \nPROPERTIES ( \n    \"replication_num\" = \"1\"\n); \n\nINSERT INTO sequence_count_test3(uid, date, number) values (1, '2022-11-02 10:41:00', 1),\n                                                   (2, '2022-11-02 11:41:00', 7),\n                                                   (3, '2022-11-02 16:15:01', 3),\n                                                   (4, '2022-11-02 19:05:04', 4),\n                                                   (5, '2022-11-02 21:24:12', 5);\n\nSELECT * FROM sequence_count_test3 ORDER BY date;\n\n+------+---------------------+--------+\n| uid  | date                | number |\n+------+---------------------+--------+\n|    1 | 2022-11-02 10:41:00 |      1 |\n|    2 | 2022-11-02 11:41:00 |      7 |\n|    3 | 2022-11-02 16:15:01 |      3 |\n|    4 | 2022-11-02 19:05:04 |      4 |\n|    5 | 2022-11-02 21:24:12 |      5 |\n+------+---------------------+--------+\n"})}),"\n",(0,c.jsx)(n.p,{children:"Perform the query:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sql",children:"SELECT sequence_count('(?1)(?2)', date, number = 1, number = 5) FROM sequence_count_test3;\n\n+----------------------------------------------------------------+\n| sequence_count('(?1)(?2)', `date`, `number` = 1, `number` = 5) |\n+----------------------------------------------------------------+\n|                                                              1 |\n+----------------------------------------------------------------+\n"})}),"\n",(0,c.jsx)(n.p,{children:"This is a very simple example. The function found the event chain where number 5 follows number 1. It skipped number 7,3,4 between them, because the number is not described as an event. If we want to take this number into account when searching for the event chain given in the example, we should make a condition for it."}),"\n",(0,c.jsx)(n.p,{children:"Now, perform this query:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sql",children:"SELECT sequence_count('(?1)(?2)', date, number = 1, number = 5, number = 4) FROM sequence_count_test3;\n\n+------------------------------------------------------------------------------+\n| sequence_count('(?1)(?2)', `date`, `number` = 1, `number` = 5, `number` = 4) |\n+------------------------------------------------------------------------------+\n|                                                                            0 |\n+------------------------------------------------------------------------------+\n"})}),"\n",(0,c.jsx)(n.p,{children:"The result is kind of confusing. In this case, the function couldn\u2019t find the event chain matching the pattern, because the event for number 4 occurred between 1 and 5. If in the same case we checked the condition for number 6, the sequence would count the pattern."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sql",children:"SELECT sequence_count('(?1)(?2)', date, number = 1, number = 5, number = 6) FROM sequence_count_test3;\n\n+------------------------------------------------------------------------------+\n| sequence_count('(?1)(?2)', `date`, `number` = 1, `number` = 5, `number` = 6) |\n+------------------------------------------------------------------------------+\n|                                                                            1 |\n+------------------------------------------------------------------------------+\n"})}),"\n",(0,c.jsx)(n.h3,{id:"keywords",children:"keywords"}),"\n",(0,c.jsx)(n.p,{children:"SEQUENCE_COUNT"})]})}function l(e={}){let{wrapper:n}={...(0,u.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var s=t(667294);let c={},u=s.createContext(c);function r(e){let n=s.useContext(u);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(u.Provider,{value:n},e.children)}}}]);