"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["326252"],{794092:function(e,n,s){s.r(n),s.d(n,{default:()=>u,frontMatter:()=>t,metadata:()=>a,assets:()=>c,toc:()=>o,contentTitle:()=>i});var a=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/json-functions/json-array","title":"JSON_ARRAY","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/json-functions/json-array.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/json-functions","slug":"/sql-manual/sql-functions/scalar-functions/json-functions/json-array","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-array","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"JSON_ARRAY","language":"en"},"sidebar":"docs","previous":{"title":"GET_JSON_STRING","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/get-json-string"},"next":{"title":"JSON_ARRAY_IGNORE_NULL","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-array-ignore-null"}}'),r=s("785893"),l=s("250065");let t={title:"JSON_ARRAY",language:"en"},i=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Variable arguments:",id:"variable-arguments",level:3},{value:"Returns",id:"returns",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Variable parameters:",id:"variable-parameters",level:3},{value:"Return Value",id:"return-value",level:2},{value:"Usage Notes",id:"usage-notes",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Generate a JSON array containing the specified elements. Returns an empty array when no parameters are passed."}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"JSON_ARRAY([<expression>, ...]) \n"})}),"\n",(0,r.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.h3,{id:"variable-arguments",children:"Variable arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<expression>"}),": Elements to be included in the JSON array can be of a single type or multiple types, including NULL."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/semi-structured/JSON",children:(0,r.jsx)(n.code,{children:"Nullable(JSON)"})}),": Returns a JSON array containing the specified values. If no values are specified, an empty JSON array is returned."]}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.h3,{id:"variable-parameters",children:"Variable parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<expression>"}),": Elements to be included in the JSON array. Can be single or multiple values of different types, including NULL."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/semi-structured/JSON",children:(0,r.jsx)(n.code,{children:"JSON"})}),": Returns a JSON array composed of the parameter list."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JSON_ARRAY implementation converts different types of parameters to JSON values by implicitly calling the ",(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/to-json",children:(0,r.jsx)(n.code,{children:"TO_JSON"})})," function, so parameters must be types supported by ",(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/to-json",children:(0,r.jsx)(n.code,{children:"TO_JSON"})})]}),"\n",(0,r.jsxs)(n.li,{children:["NULL will be converted to JSON null. If you don't want to retain null values in the array, you can use the function ",(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-array-ignore-null",children:(0,r.jsx)(n.code,{children:"JSON_ARRAY_IGNORE_NULL"})}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the parameter type is not supported by ",(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/to-json",children:(0,r.jsx)(n.code,{children:"TO_JSON"})}),", you will get an error. You can first convert that parameter to String type, for example:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select JSON_ARRAY(CAST(NOW() as String));\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The NOW() function returns a DateTime type, which needs to be converted to String type using the CAST function"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["If the parameter is a JSON string and you want to add it to the array as a JSON object, you should explicitly call the ",(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-parse",children:(0,r.jsx)(n.code,{children:"JSON_PARSE"})})," function to parse it as a JSON object:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select JSON_ARRAY(JSON_PARSE(\'{"key": "value"}\'));\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Regular parameters\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select json_array() as empty_array, json_array(1) v1, json_array(1, 'abc') v2;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'+-------------+------+-----------+\n| empty_array | v1   | v2        |\n+-------------+------+-----------+\n| []          | [1]  | [1,"abc"] |\n+-------------+------+-----------+\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["NULL parameters\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select json_array(null) v1, json_array(1, null, 'I am a string') v2;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'+--------+--------------------------+\n| v1     | v2                       |\n+--------+--------------------------+\n| [null] | [1,null,"I am a string"] |\n+--------+--------------------------+\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Unsupported parameter types\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select json_array('item1', map(123, 'abc'));\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: to_json(MAP<TINYINT,VARCHAR(3)>)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Map type parameters can be explicitly converted to JSON\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select json_array(1, cast(map('key', 'value') as json));\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+--------------------------------------------------+\n| json_array(1, cast(map('key', 'value') as json)) |\n+--------------------------------------------------+\n| [1,{\"key\":\"value\"}]                              |\n+--------------------------------------------------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["The JSON string will be added to the array in the form of a string\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select json_array(\'{"key1": "value", "key2": [1, "I am a string", 3]}\');\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'+------------------------------------------------------------------+\n| json_array(\'{"key1": "value", "key2": [1, "I am a string", 3]}\') |\n+------------------------------------------------------------------+\n| ["{\\"key1\\": \\"value\\", \\"key2\\": [1, \\"I am a string\\", 3]}"]   |\n+------------------------------------------------------------------+\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["A JSON string can be parsed using ",(0,r.jsx)(n.code,{children:"json_parse"})," and then passed to ",(0,r.jsx)(n.code,{children:"json_array"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select json_array(json_parse(\'{"key1": "value", "key2": [1, "I am a string", 3]}\'));\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'+------------------------------------------------------------------------------+\n| json_array(json_parse(\'{"key1": "value", "key2": [1, "I am a string", 3]}\')) |\n+------------------------------------------------------------------------------+\n| [{"key1":"value","key2":[1,"I am a string",3]}]                              |\n+------------------------------------------------------------------------------+\n'})}),"\n"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return i},a:function(){return t}});var a=s(667294);let r={},l=a.createContext(r);function t(e){let n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);