"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["488993"],{570255:function(e,n,i){i.r(n),i.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>s,assets:()=>c,toc:()=>d,contentTitle:()=>l});var s=JSON.parse('{"id":"ai/text-search/search-function","title":"SEARCH Function","description":"Introduction","source":"@site/docs/ai/text-search/search-function.md","sourceDirName":"ai/text-search","slug":"/ai/text-search/search-function","permalink":"/docs/dev/ai/text-search/search-function","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SEARCH Function","language":"en"},"sidebar":"docs","previous":{"title":"Full-Text Search and Query Acceleration Support","permalink":"/docs/dev/ai/text-search/search-operators"},"next":{"title":"Custom Analyzer","permalink":"/docs/dev/ai/text-search/custom-analyzer"}}'),t=i("785893"),r=i("250065");let a={title:"SEARCH Function",language:"en"},l=void 0,c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Syntax and Semantics",id:"syntax-and-semantics",level:2},{value:"Current Supported Queries",id:"current-supported-queries",level:3},{value:"Term query",id:"term-query",level:4},{value:"ANY",id:"any",level:4},{value:"ALL",id:"all",level:4},{value:"Boolean operators",id:"boolean-operators",level:4},{value:"Grouping and nesting",id:"grouping-and-nesting",level:4},{value:"Phrase query",id:"phrase-query",level:4},{value:"Multi\u2011column search",id:"multicolumn-search",level:4},{value:"Wildcard query",id:"wildcard-query",level:4},{value:"Regular expression query",id:"regular-expression-query",level:4},{value:"EXACT query",id:"exact-query",level:4},{value:"Variant subcolumn query",id:"variant-subcolumn-query",level:4},{value:"Examples",id:"examples",level:3},{value:"Current Limitations",id:"current-limitations",level:3}];function o(e){let n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"SEARCH"})," function provides a concise DSL (domain\u2011specific language) for full\u2011text queries in Apache Doris from 4.0 version. It simplifies common text search patterns into a unified query entry that runs on inverted indexes for high performance."]}),"\n",(0,t.jsx)(n.p,{children:"SEARCH is a boolean predicate function evaluated in the WHERE clause. It takes a SEARCH DSL string that describes text\u2011matching rules and pushes matchable predicates to inverted indexes."}),"\n",(0,t.jsx)(n.h2,{id:"syntax-and-semantics",children:"Syntax and Semantics"}),"\n",(0,t.jsx)(n.p,{children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SEARCH('<search_expression>')\nSEARCH('<search_expression>', '<default_field>')\nSEARCH('<search_expression>', '<default_field>', '<default_operator>')\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<search_expression>"})," \u2014 string literal containing the SEARCH DSL expression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<default_field>"})," ",(0,t.jsx)(n.em,{children:"(optional)"})," \u2014 column name automatically applied to terms that do not specify a field."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<default_operator>"})," ",(0,t.jsx)(n.em,{children:"(optional)"})," \u2014 default boolean operator for multi-term expressions; accepts ",(0,t.jsx)(n.code,{children:"and"})," or ",(0,t.jsx)(n.code,{children:"or"})," (case-insensitive). Defaults to ",(0,t.jsx)(n.code,{children:"or"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Usage"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Placement: use in the ",(0,t.jsx)(n.code,{children:"WHERE"})," clause as a predicate."]}),"\n",(0,t.jsx)(n.li,{children:"Return type: BOOLEAN (TRUE for matching rows)."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"default_field"})," is provided, Doris expands bare terms or functions to that field. For example, ",(0,t.jsx)(n.code,{children:"SEARCH('foo bar', 'tags', 'and')"})," behaves like ",(0,t.jsx)(n.code,{children:"SEARCH('tags:ALL(foo bar)')"}),", while ",(0,t.jsx)(n.code,{children:"SEARCH('foo bark', 'tags')"})," expands to ",(0,t.jsx)(n.code,{children:"tags:ANY(foo bark)"}),". Explicit boolean operators inside the DSL always take precedence over the default operator."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SEARCH()"})," follows SQL three-valued logic. Rows where all referenced fields are NULL evaluate to UNKNOWN (filtered out in the ",(0,t.jsx)(n.code,{children:"WHERE"})," clause) unless other predicates short-circuit the expression (",(0,t.jsx)(n.code,{children:"TRUE OR NULL = TRUE"}),", ",(0,t.jsx)(n.code,{children:"FALSE OR NULL = NULL"}),", ",(0,t.jsx)(n.code,{children:"NOT NULL = NULL"}),"), matching the behavior of dedicated text search operators."]}),"\n",(0,t.jsx)(n.h3,{id:"current-supported-queries",children:"Current Supported Queries"}),"\n",(0,t.jsx)(n.h4,{id:"term-query",children:"Term query"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:"column:term"})]}),"\n",(0,t.jsxs)(n.li,{children:["Semantics: match the term in the column's token stream; case sensitivity depends on index ",(0,t.jsx)(n.code,{children:"lower_case"})]}),"\n",(0,t.jsxs)(n.li,{children:["Indexing tip: add an inverted index with an appropriate ",(0,t.jsx)(n.code,{children:"parser"}),"/analyzer on the column"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic WHERE SEARCH('title:Machine');\nSELECT id, title FROM search_test_basic WHERE SEARCH('title:Python');\nSELECT id, title FROM search_test_basic WHERE SEARCH('category:Technology');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"any",children:"ANY"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:"column:ANY(term1 term2 ...)"})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: matches if any listed term is present in the column (OR); order-insensitive; duplicates ignored"}),"\n",(0,t.jsxs)(n.li,{children:["Indexing tip: use a tokenized inverted index (e.g., ",(0,t.jsx)(n.code,{children:"english"}),"/",(0,t.jsx)(n.code,{children:"chinese"}),"/",(0,t.jsx)(n.code,{children:"unicode"})," parser)"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic WHERE SEARCH('tags:ANY(python javascript)');\nSELECT id, title FROM search_test_basic WHERE SEARCH('tags:ANY(machine learning tutorial)');\n\n-- Edge case: single value behaves like a term query\nSELECT id, title FROM search_test_basic WHERE SEARCH('tags:ANY(python)');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"all",children:"ALL"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:"column:ALL(term1 term2 ...)"})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: requires all listed terms be present (AND); order-insensitive; duplicates ignored"}),"\n",(0,t.jsxs)(n.li,{children:["Indexing tip: use a tokenized inverted index (e.g., ",(0,t.jsx)(n.code,{children:"english"}),"/",(0,t.jsx)(n.code,{children:"chinese"}),"/",(0,t.jsx)(n.code,{children:"unicode"})," parser)"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic WHERE SEARCH('tags:ALL(machine learning)');\nSELECT id, title FROM search_test_basic WHERE SEARCH('tags:ALL(programming tutorial)');\n\n-- Edge case: single value behaves like a term query\nSELECT id, title FROM search_test_basic WHERE SEARCH('tags:ALL(python)');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"boolean-operators",children:"Boolean operators"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:"(expr) AND/OR/NOT (expr)"})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: combine sub-expressions inside SEARCH using boolean operators"}),"\n",(0,t.jsx)(n.li,{children:"Indexing tip: keep matchable conditions inside SEARCH for pushdown; other WHERE predicates act as filters"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic\nWHERE SEARCH('title:Machine AND category:Technology');\n\nSELECT id, title FROM search_test_basic\nWHERE SEARCH('title:Python OR title:Data');\n\nSELECT id, title FROM search_test_basic\nWHERE SEARCH('category:Technology AND NOT title:Machine');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"grouping-and-nesting",children:"Grouping and nesting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Syntax: parenthesized sub-expressions"}),"\n",(0,t.jsx)(n.li,{children:"Semantics: control precedence with parentheses; multi-level nesting is supported"}),"\n",(0,t.jsx)(n.li,{children:"Indexing tip: same as above"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic\nWHERE SEARCH('(title:Machine OR title:Python) AND category:Technology');\n\nSELECT id, title FROM search_test_basic\nWHERE SEARCH('tags:ANY(python javascript) AND (category:Technology OR category:Programming)');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"phrase-query",children:"Phrase query"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:'column:"quoted phrase"'})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: matches contiguous tokens in order using the column's analyzer; quotes must wrap the entire phrase."}),"\n",(0,t.jsxs)(n.li,{children:["Indexing tip: requires an inverted index configured with a tokenizer (",(0,t.jsx)(n.code,{children:"parser"}),") that preserves positional information."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic\nWHERE SEARCH('content:\"machine learning\"');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"multicolumn-search",children:"Multi\u2011column search"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:"column1:term OR column2:ANY(...) OR ..."})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: search across multiple columns; each column follows its own index/analyzer configuration"}),"\n",(0,t.jsx)(n.li,{children:"Indexing tip: add inverted indexes for each involved column"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic\nWHERE SEARCH('title:Python OR tags:ANY(database mysql) OR author:Alice');\n\nSELECT id, title FROM search_test_basic\nWHERE SEARCH('tags:ALL(tutorial) AND category:Technology');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"wildcard-query",children:"Wildcard query"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:"column:prefix*"}),", ",(0,t.jsx)(n.code,{children:"column:*mid*"}),", ",(0,t.jsx)(n.code,{children:"column:?ingle"})]}),"\n",(0,t.jsxs)(n.li,{children:["Semantics: performs pattern matching with ",(0,t.jsx)(n.code,{children:"*"})," (multi-character) and ",(0,t.jsx)(n.code,{children:"?"})," (single-character) wildcards."]}),"\n",(0,t.jsxs)(n.li,{children:["Indexing tip: works on untokenized indexes and on tokenized indexes with ",(0,t.jsx)(n.code,{children:"lower_case"})," when case-insensitive matching is required."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM search_test_basic\nWHERE SEARCH('firstname:Chris*');\n\n-- Using the default field parameter\nSELECT id, firstname FROM people\nWHERE SEARCH('Chris*', 'firstname');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"regular-expression-query",children:"Regular expression query"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Syntax: ",(0,t.jsx)(n.code,{children:"column:/regex/"})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: applies Lucene-style regular expression matching; slashes delimit the pattern."}),"\n",(0,t.jsx)(n.li,{children:"Indexing tip: only available on untokenized indexes."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id, title FROM corpus\nWHERE SEARCH('title:/data.+science/');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"exact-query",children:"EXACT query"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Pattern: ",(0,t.jsx)(n.code,{children:"column:EXACT(<text>)"})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: exact match on the entire column value; case\u2011sensitive; does not match partial tokens"}),"\n",(0,t.jsxs)(n.li,{children:["Indexing tip: use an untokenized inverted index on the column (no ",(0,t.jsx)(n.code,{children:"parser"}),") for best performance"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id\nFROM t\nWHERE SEARCH('content:EXACT(machine learning)');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"variant-subcolumn-query",children:"Variant subcolumn query"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Pattern: ",(0,t.jsx)(n.code,{children:"variant_col.sub.path:term"})]}),"\n",(0,t.jsx)(n.li,{children:"Semantics: query a VARIANT subcolumn using dot notation; matching follows the index/analyzer configured on the VARIANT column"}),"\n",(0,t.jsxs)(n.li,{children:["Supports boolean combinations, ",(0,t.jsx)(n.code,{children:"ANY"}),"/",(0,t.jsx)(n.code,{children:"ALL"}),", nested paths; nonexistent subcolumns simply produce no matches"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT id\nFROM test_variant_search_subcolumn\nWHERE SEARCH('properties.message:alpha');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Table with both tokenized and untokenized indexes\nCREATE TABLE t (\n  id INT,\n  content STRING,\n  INDEX idx_untokenized(content) USING INVERTED,\n  INDEX idx_tokenized(content)  USING INVERTED PROPERTIES(\"parser\" = \"standard\")\n);\n\n-- Exact string match (uses untokenized index)\nSELECT id, content\nFROM t\nWHERE SEARCH('content:EXACT(machine learning)')\nORDER BY id;\n\n-- No match for partial token with EXACT\nSELECT id, content\nFROM t\nWHERE SEARCH('content:EXACT(machine)')\nORDER BY id;\n\n-- ANY/ALL use tokenized index\nSELECT id, content FROM t WHERE SEARCH('content:ANY(machine learning)') ORDER BY id;\nSELECT id, content FROM t WHERE SEARCH('content:ALL(machine learning)') ORDER BY id;\n\n-- Compare EXACT vs ANY\nSELECT id, content FROM t WHERE SEARCH('content:EXACT(deep learning)') ORDER BY id;\nSELECT id, content FROM t WHERE SEARCH('content:ANY(deep learning)') ORDER BY id;\n\n-- Mixed conditions\nSELECT id, content\nFROM t\nWHERE SEARCH('content:EXACT(machine learning) OR content:ANY(intelligence)')\nORDER BY id;\n\n-- Simplified syntax with default field/operator\nSELECT id, tags\nFROM tag_dataset\nWHERE SEARCH('deep learning', 'tags', 'and'); -- expands to tags:ALL(deep learning)\n\n-- Phrase and wildcard queries in one DSL\nSELECT id, content FROM t\nWHERE SEARCH('content:\"deep learning\" OR content:AI*')\nORDER BY id;\n\n-- VARIANT column with inverted index\nCREATE TABLE test_variant_search_subcolumn (\n  id BIGINT,\n  properties VARIANT<PROPERTIES(\"variant_max_subcolumns_count\"=\"0\")>,\n  INDEX idx_properties (properties) USING INVERTED PROPERTIES (\n    \"parser\" = \"unicode\",\n    \"lower_case\" = \"true\",\n    \"support_phrase\" = \"true\"\n  )\n);\n\n-- Single term\nSELECT id\nFROM test_variant_search_subcolumn\nWHERE SEARCH('properties.message:alpha')\nORDER BY id;\n\n-- AND / ALL\nSELECT id\nFROM test_variant_search_subcolumn\nWHERE SEARCH('properties.message:alpha AND properties.message:beta')\nORDER BY id;\n\nSELECT id\nFROM test_variant_search_subcolumn\nWHERE SEARCH('properties.message:ALL(alpha beta)')\nORDER BY id;\n\n-- OR across different subcolumns\nSELECT id\nFROM test_variant_search_subcolumn\nWHERE SEARCH('properties.message:hello OR properties.category:beta')\nORDER BY id;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"current-limitations",children:"Current Limitations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Range and list clauses (",(0,t.jsx)(n.code,{children:"field:[a TO b]"}),", ",(0,t.jsx)(n.code,{children:"field:IN(...)"}),") still degrade to term lookups; rely on regular SQL predicates for numeric/date ranges or explicit ",(0,t.jsx)(n.code,{children:"IN"})," filters."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Use standard operators or text search operators as alternatives when needed, for example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Range filters via SQL\nSELECT * FROM t WHERE created_at >= '2024-01-01';\n"})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return a}});var s=i(667294);let t={},r=s.createContext(t);function a(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);