"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["267068"],{423426:function(n,e,i){i.r(e),i.d(e,{default:()=>h,frontMatter:()=>l,metadata:()=>s,assets:()=>a,toc:()=>c,contentTitle:()=>r});var s=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/spatial-functions/st-disjoint","title":"ST_DISJOINT","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/spatial-functions/st-disjoint.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/spatial-functions","slug":"/sql-manual/sql-functions/scalar-functions/spatial-functions/st-disjoint","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-disjoint","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ST_DISJOINT","language":"en"},"sidebar":"docs","previous":{"title":"ST_CONTAINS","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-contains"},"next":{"title":"ST_DISTANCE_SPHERE","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-distance-sphere"}}'),t=i("785893"),o=i("250065");let l={title:"ST_DISJOINT",language:"en"},r=void 0,a={},c=[{value:"Description",id:"description",level:2},{value:"Sytax",id:"sytax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function d(n){let e={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(e.p,{children:"Determines whether two geometric shapes are completely disjoint (i.e., have no common points). Returns 1 if there is no intersection in the boundaries or interiors of the two shapes (no shared points); returns 0 if there is at least one common point (including boundary contact or interior overlap)."}),"\n",(0,t.jsx)(e.admonition,{title:"Note",type:"info",children:(0,t.jsx)(e.p,{children:"Supported since Apache Doris 3.0.6."})}),"\n",(0,t.jsx)(e.h2,{id:"sytax",children:"Sytax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"ST_DISJOINT( <shape1>, <shape2> )\n"})}),"\n",(0,t.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Parameter"}),(0,t.jsx)(e.th,{children:"Description"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"<shape1>"})}),(0,t.jsx)(e.td,{children:"The first geometric shape used to determine if it is disjoint from the other, supporting types such as Point, Line, Polygon,Circle."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"<shape2>"})}),(0,t.jsx)(e.td,{children:"The second geometric shape used to determine if it is disjoint from the other, supporting types such as Point, Line, Polygon,Circle."})]})]})]}),"\n",(0,t.jsx)(e.h2,{id:"return-value",children:"Return value"}),"\n",(0,t.jsx)(e.p,{children:"1: shape1 is completely disjoint from shape2 (no common points).\n0: shape1 intersects with shape2 (at least one common point exists)."}),"\n",(0,t.jsx)(e.p,{children:"ST_DISJOINT has the following edge cases:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Returns NULL if either input parameter is NULL."}),"\n",(0,t.jsx)(e.li,{children:"Returns NULL if the input geometric shapes are invalid."}),"\n",(0,t.jsx)(e.li,{children:"Returns 1 for empty geometric shapes (empty shapes have no points and are disjoint from any shape)."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(e.p,{children:"Polygon and inner point (intersect, returns 0)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'SELECT ST_Disjoint(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), ST_Point(5, 5));\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'+------------------------------------------------------------------------------------+\n| ST_Disjoint(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), ST_Point(5, 5)) |\n+------------------------------------------------------------------------------------+\n|                                                                                  0 |\n+------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Polygon and outer point (disjoint, returns 1)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'SELECT ST_Disjoint(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), ST_Point(50, 50));\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:'+--------------------------------------------------------------------------------------+\n| ST_Disjoint(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), ST_Point(50, 50)) |\n+--------------------------------------------------------------------------------------+\n|                                                                                    1 |\n+--------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Point and line are disjoint (point is outside the line)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(ST_Linefromtext("LINESTRING (0 0, 10 10)"), ST_Point(1, 2));\n+-------------------------------------------------------------------------+\n| ST_Disjoint(ST_Linefromtext("LINESTRING (0 0, 10 10)"), ST_Point(1, 2)) |\n+-------------------------------------------------------------------------+\n|                                                                       1 |\n'})}),"\n",(0,t.jsx)(e.p,{children:"Point and line intersect (point is on the line)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(ST_Linefromtext("LINESTRING (0 0, 10 10)"), ST_Point(5, 5));\n+-------------------------------------------------------------------------+\n| ST_Disjoint(ST_Linefromtext("LINESTRING (0 0, 10 10)"), ST_Point(5, 5)) |\n+-------------------------------------------------------------------------+\n|                                                                       0 |\n+-------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Lines intersect"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(  ST_Linefromtext("LINESTRING (0 0, 10 10)"),  ST_Linefromtext("LINESTRING (0 10, 10 0)"));\n+--------------------------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Linefromtext("LINESTRING (0 0, 10 10)"),  ST_Linefromtext("LINESTRING (0 10, 10 0)")) |\n+--------------------------------------------------------------------------------------------------------+\n|                                                                                                      0 |\n+--------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Lines are disjoint (parallel and non-overlapping)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(  ST_Linefromtext("LINESTRING (0 0, 10 0)"),  ST_Linefromtext("LINESTRING (0 1, 10 1)"));\n+------------------------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Linefromtext("LINESTRING (0 0, 10 0)"),  ST_Linefromtext("LINESTRING (0 1, 10 1)")) |\n+------------------------------------------------------------------------------------------------------+\n|                                                                                                    1 |\n+------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Polygons are disjoint (completely separated)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((20 20, 30 20, 30 30, 20 30, 20 20))"));\n+------------------------------------------------------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((20 20, 30 20, 30 30, 20 30, 20 20))")) |\n+------------------------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                                  1 |\n+------------------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Polygons intersect (partially overlapping)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'\nmysql> SELECT ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((5 5, 15 5, 15 15, 5 15, 5 5))"));\n+------------------------------------------------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((5 5, 15 5, 15 15, 5 15, 5 5))")) |\n+------------------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                            0 |\n+------------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Empty geometric shape is disjoint from any shape"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_GeometryFromText("POINT EMPTY"));\n+-----------------------------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_GeometryFromText("POINT EMPTY")) |\n+-----------------------------------------------------------------------------------------------------------+\n|                                                                                                      NULL |\n+-----------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Invalid geometric shape (self-intersecting polygon) as parameter"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 1 1, 0 1, 1 0, 0 0))"),  ST_Point(0.5, 0.5));\n+---------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 1 1, 0 1, 1 0, 0 0))"),  ST_Point(0.5, 0.5)) |\n+---------------------------------------------------------------------------------------+\n|                                                                                  NULL |\n+---------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"NULL parameter returns NULL"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"\nmysql> SELECT ST_Disjoint(ST_Point(0,0), NULL);\n+----------------------------------+\n| ST_Disjoint(ST_Point(0,0), NULL) |\n+----------------------------------+\n|                             NULL |\n+----------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Circle joint in Polygon"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Circle(5, 2.5, 2000));\n+--------------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Circle(5, 2.5, 2000)) |\n+--------------------------------------------------------------------------------------------+\n|                                                                                          0 |\n+--------------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Circle DisJoint Polygon"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(20, 5, 5));\n+--------------------------------------------------------------------------------------------+\n| ST_Disjoint(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(20, 5, 5)) |\n+--------------------------------------------------------------------------------------------+\n|                                                                                          1 |\n+--------------------------------------------------------------------------------------------+\n'})})]})}function h(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},250065:function(n,e,i){i.d(e,{Z:function(){return r},a:function(){return l}});var s=i(667294);let t={},o=s.createContext(t);function l(n){let e=s.useContext(o);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);