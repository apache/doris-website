"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["129519"],{408822:function(e,r,n){n.r(r),n.d(r,{default:()=>u,frontMatter:()=>t,metadata:()=>a,assets:()=>c,toc:()=>o,contentTitle:()=>i});var a=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-filter","title":"ARRAY_FILTER","description":"array_filter","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-filter.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-filter","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-filter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_FILTER","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_EXISTS","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-exists"},"next":{"title":"ARRAY_FIRST","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-first"}}'),l=n("785893"),s=n("250065");let t={title:"ARRAY_FILTER",language:"en"},i=void 0,c={},o=[{value:"array_filter",id:"array_filter",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Examples",id:"examples",level:3},{value:"Keywords",id:"keywords",level:3}];function d(e){let r={boolean:"boolean",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",version:"version",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.h2,{id:"array_filter",children:"array_filter"}),"\n",(0,l.jsx)(r.version,{since:"2.0.0",children:"\n"}),"\n",(0,l.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(r.p,{children:"Filters array elements based on conditions and returns a new array composed of elements that satisfy the conditions. The function supports two calling methods: a higher-order function form using lambda expressions, and a filtering form directly using boolean arrays."}),"\n",(0,l.jsx)(r.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"array_filter(lambda, array1, ...)\narray_filter(array1, array<boolean> filter_array)\n"})}),"\n",(0,l.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"lambda"}),"\uFF1Alambda expression used to evaluate array elements, returns true/false or expressions that can be converted to boolean values"]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"array1, ..."}),"\uFF1Aone or more ARRAY<T> type parameters"]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"filter_array"}),"\uFF1AARRAY<BOOLEAN> type, boolean array used for filtering"]}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"T supported types:"})}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,l.jsx)(r.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,l.jsx)(r.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,l.jsx)(r.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,l.jsx)(r.li,{children:"IP types: IPV4, IPV6"}),"\n",(0,l.jsx)(r.li,{children:"Complex data types: ARRAY, MAP, STRUCT"}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"return-value",children:"Return Value"}),"\n",(0,l.jsx)(r.p,{children:"Return type: ARRAY<T>"}),"\n",(0,l.jsx)(r.p,{children:"Return value meaning:"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"Returns a new array composed of all elements that satisfy the filtering conditions"}),"\n",(0,l.jsx)(r.li,{children:"NULL: if the input array is NULL"}),"\n",(0,l.jsx)(r.li,{children:"Empty array: if no elements satisfy the conditions"}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"Usage notes:"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"Lambda form: the number of lambda expression parameters must match the number of array parameters"}),"\n",(0,l.jsxs)(r.li,{children:["Boolean array form: the length of ",(0,l.jsx)(r.code,{children:"array1"})," and ",(0,l.jsx)(r.code,{children:"filter_array"})," should ideally be completely consistent. If the boolean array is longer, excess boolean values will be ignored; if the boolean array is shorter, only elements at corresponding positions in the boolean array will be processed"]}),"\n",(0,l.jsx)(r.li,{children:"Supports filtering of multiple arrays and complex type arrays"}),"\n",(0,l.jsx)(r.li,{children:"Empty array returns empty array, NULL array returns NULL"}),"\n",(0,l.jsx)(r.li,{children:"Lambda can use any scalar expression, cannot use aggregate functions"}),"\n",(0,l.jsx)(r.li,{children:"Lambda expressions can call other higher-order functions, but need to return compatible types"}),"\n",(0,l.jsx)(r.li,{children:"For null values in array elements: null elements will be passed to the lambda expression for processing, lambda can evaluate null values"}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"CREATE TABLE array_filter_test (\n    id INT,\n    int_array ARRAY<INT>,\n    double_array ARRAY<DOUBLE>,\n    string_array ARRAY<STRING>\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 3\nPROPERTIES (\n    \"replication_num\" = \"1\"\n);\n\nINSERT INTO array_filter_test VALUES\n(1, [1, 2, 3, 4, 5], [1.1, 2.2, 3.3, 4.4, 5.5], ['a', 'bb', 'ccc', 'dddd', 'eeeee']),\n(2, [10, 20, 30], [10.5, 20.5, 30.5], ['x', 'yy', 'zzz']),\n(3, [], [], []),\n(4, NULL, NULL, NULL);\n"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"Query examples:"})}),"\n",(0,l.jsx)(r.p,{children:"Using lambda expression to filter elements in double_array greater than or equal to 3:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> x >= 3, double_array) FROM array_filter_test WHERE id = 1;\n+------------------------------------------+\n| array_filter(x -> x >= 3, double_array)  |\n+------------------------------------------+\n| [3.3, 4.4, 5.5]                          |\n+------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Using lambda expression to filter elements in string_array with length greater than 2:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:'SELECT array_filter(x -> length(x) > 2, string_array) FROM array_filter_test WHERE id = 1;\n+--------------------------------------------------+\n| array_filter(x -> length(x) > 2, string_array)   |\n+--------------------------------------------------+\n| ["ccc", "dddd", "eeeee"]                         |\n+------------------------------------------+\n'})}),"\n",(0,l.jsx)(r.p,{children:"Using boolean array to filter elements:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(int_array, [false, true, false, true, true]) FROM array_filter_test WHERE id = 1;\n+-----------------------------------------------------------+\n| array_filter(int_array, [false, true, false, true, true]) |\n+-----------------------------------------------------------+\n| [2, 4, 5]                                                 |\n+-----------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Boolean array filtering example, deciding whether to keep elements at corresponding positions based on boolean values:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter([1,2,3], [true, false, true]);\n+--------------------------------------------+\n| array_filter([1,2,3], [true, false, true]) |\n+--------------------------------------------+\n| [1, 3]                                     |\n+--------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"When the boolean array length is greater than the original array, excess boolean values will be ignored:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter([1,2,3], [true, false, true, false]);\n+---------------------------------------------------+\n| array_filter([1,2,3], [true, false, true, false]) |\n+---------------------------------------------------+\n| [1, 3]                                            |\n+---------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"When the boolean array length is less than the original array, only elements at corresponding positions in the boolean array will be processed:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter([1,2,3], [true, false]);\n+--------------------------------------+\n| array_filter([1,2,3], [true, false]) |\n+--------------------------------------+\n| [1]                                  |\n+--------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Empty array returns empty array:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> x > 0, int_array) FROM array_filter_test WHERE id = 3;\n+-------------------------------------+\n| array_filter(x -> x > 0, int_array) |\n+-------------------------------------+\n| []                                  |\n+-------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"NULL array returns NULL: returning NULL when the input array is NULL without throwing an error."}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> x > 0, int_array) FROM array_filter_test WHERE id = 4;\n+-------------------------------------+\n| array_filter(x -> x > 0, int_array) |\n+-------------------------------------+\n| NULL                                |\n+-------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Array containing null values, lambda can evaluate null:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"+------------------------------------------------------------+\n| array_filter(x -> x is not null, [null, 1, null, 2, null]) |\n+------------------------------------------------------------+\n| [1, 2]                                                     |\n+------------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Multiple array filtering, filtering elements where int_array > double_array:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter((x, y) -> x > y, int_array, double_array) FROM array_filter_test WHERE id = 1;\n+--------------------------------------------------------+\n| array_filter((x, y) -> x > y, int_array, double_array) |\n+--------------------------------------------------------+\n| []                                                     |\n+--------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Complex type examples:"}),"\n",(0,l.jsx)(r.p,{children:"Nested array filtering, filtering elements where each sub-array length is greater than 2:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> size(x) > 2, [[1,2], [3,4,5], [6], [7,8,9,10]]);\n+-------------------------------------------------------------------+\n| array_filter(x -> size(x) > 2, [[1,2], [3,4,5], [6], [7,8,9,10]]) |\n+-------------------------------------------------------------------+\n| [[3, 4, 5], [7, 8, 9, 10]]                                        |\n+-------------------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Map type filtering, filtering elements where the value of key 'a' is greater than 10:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> x['a'] > 10, [{'a':5}, {'a':15}, {'a':20}]);\n+---------------------------------------------------------------+\n| array_filter(x -> x['a'] > 10, [{'a':5}, {'a':15}, {'a':20}]) |\n+---------------------------------------------------------------+\n| [{\"a\":15}, {\"a\":20}]                                          |\n+---------------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Struct type filtering, filtering elements where age is greater than 18:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> struct_element(x, 'age') > 18, array(named_struct('name','Alice','age',20),named_struct('name','Bob','age',16),named_struct('name','Eve','age',30)));\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| array_filter(x -> struct_element(x, 'age') > 18, array(named_struct('name','Alice','age',20),named_struct('name','Bob','age',16),named_struct('name','Eve','age',30))) |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [{\"name\":\"Alice\", \"age\":20}, {\"name\":\"Eve\", \"age\":30}]                                                                                                                 |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:"Incorrect number of parameters:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> x > 0, [1,2,3], [4,5,6], [7,8,9]);\nERROR 1105 (HY000): errCode = 2, detailMessage = lambda x -> (x > 0) arguments' size is not equal parameters' size\n"})}),"\n",(0,l.jsx)(r.p,{children:"Inconsistent array lengths will cause an error:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter((x, y) -> x > y, [1,2,3], [4,5]);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.6)[INVALID_ARGUMENT]in array map function, the input column size are not equal completely, nested column data rows 1st size is 3, 2th size is 2.\n"})}),"\n",(0,l.jsx)(r.p,{children:"Passing non-array type will cause an error:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> x > 0, 'not_an_array');\nERROR 1105 (HY000): errCode = 2, detailMessage = lambda argument must be array but is 'not_an_array'\n"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"Nested higher-order function examples:"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"Correct example: calling higher-order functions that return scalars in lambda"})}),"\n",(0,l.jsx)(r.p,{children:"The current example can be nested because the inner array_count returns a scalar value (INT64), which array_filter can handle."}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> array_count(y -> y > 5, x) > 0, [[1,2,3],[4,5,6],[7,8,9]]);\n+------------------------------------------------------------------------------+\n| array_filter(x -> array_count(y -> y > 5, x) > 0, [[1,2,3],[4,5,6],[7,8,9]]) |\n+------------------------------------------------------------------------------+\n| [[4, 5, 6], [7, 8, 9]]                                                       |\n+------------------------------------------------------------------------------+\n"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"Error example: lambda returns array type"})}),"\n",(0,l.jsxs)(r.p,{children:["The current example cannot be nested because the inner array_exists returns ARRAY",(0,l.jsx)(r.boolean,{children:", while the outer array_filter expects lambda to return a scalar value"})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-sql",children:"SELECT array_filter(x -> array_exists(y -> y > 5, x), [[1,2,3],[4,5,6]]);\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: array_filter(ARRAY<ARRAY<TINYINT>>, ARRAY<ARRAY<BOOLEAN>>)\n"})}),"\n",(0,l.jsx)(r.h3,{id:"keywords",children:"Keywords"}),"\n",(0,l.jsx)(r.p,{children:"ARRAY, FILTER, ARRAY_FILTER"})]})}function u(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return i},a:function(){return t}});var a=n(667294);let l={},s=a.createContext(l);function t(e){let r=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),a.createElement(s.Provider,{value:r},e.children)}}}]);