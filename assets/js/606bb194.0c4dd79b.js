"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["84316"],{395490:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>l,metadata:()=>a,assets:()=>d,toc:()=>o,contentTitle:()=>t});var a=JSON.parse('{"id":"data-operate/import/file-format/json","title":"JSON","description":"This document explains how to load JSON format data files into Doris. Doris supports loading standard JSON format data and can flexibly handle different JSON data structures through parameter configuration, supporting field extraction from JSON data and handling nested structures.","source":"@site/versioned_docs/version-3.x/data-operate/import/file-format/json.md","sourceDirName":"data-operate/import/file-format","slug":"/data-operate/import/file-format/json","permalink":"/docs/3.x/data-operate/import/file-format/json","draft":false,"unlisted":false,"tags":[],"version":"3.x","frontMatter":{"title":"JSON","language":"en"},"sidebar":"docs","previous":{"title":"CSV","permalink":"/docs/3.x/data-operate/import/file-format/csv"},"next":{"title":"Parquet","permalink":"/docs/3.x/data-operate/import/file-format/parquet"}}'),r=s("785893"),i=s("250065");let l={title:"JSON",language:"en"},t=void 0,d={},o=[{value:"Loading Methods",id:"loading-methods",level:2},{value:"Supported JSON Formats",id:"supported-json-formats",level:2},{value:"Multiple Rows Represented as Array",id:"multiple-rows-represented-as-array",level:3},{value:"Single Row Represented as Object",id:"single-row-represented-as-object",level:3},{value:"Multiple Object Rows Separated by Delimiter",id:"multiple-object-rows-separated-by-delimiter",level:3},{value:"Parameter Configuration",id:"parameter-configuration",level:2},{value:"Parameter Support",id:"parameter-support",level:3},{value:"Parameter Description",id:"parameter-description",level:3},{value:"JSON Path",id:"json-path",level:4},{value:"JSON Root",id:"json-root",level:4},{value:"Strip Outer Array",id:"strip-outer-array",level:4},{value:"Read JSON By Line",id:"read-json-by-line",level:4},{value:"Fuzzy Parse",id:"fuzzy-parse",level:4},{value:"Num As String",id:"num-as-string",level:4},{value:"Relationship between JSON Path and Columns",id:"relationship-between-json-path-and-columns",level:3},{value:"Usage Examples",id:"usage-examples",level:4},{value:"Using JSON Path Only",id:"using-json-path-only",level:5},{value:"Using JSON Path + Columns",id:"using-json-path--columns",level:5},{value:"Field Reuse",id:"field-reuse",level:5},{value:"Nested Field Mapping",id:"nested-field-mapping",level:5},{value:"Usage Examples",id:"usage-examples-1",level:2},{value:"Stream Load",id:"stream-load",level:3},{value:"Broker Load",id:"broker-load",level:3},{value:"Routine Load",id:"routine-load",level:3},{value:"TVF Load",id:"tvf-load",level:3}];function c(e){let n={a:"a",admonition:"admonition",annotation:"annotation",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This document explains how to load JSON format data files into Doris. Doris supports loading standard JSON format data and can flexibly handle different JSON data structures through parameter configuration, supporting field extraction from JSON data and handling nested structures."}),"\n",(0,r.jsx)(n.h2,{id:"loading-methods",children:"Loading Methods"}),"\n",(0,r.jsx)(n.p,{children:"The following loading methods support JSON format data:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/3.x/data-operate/import/import-way/stream-load-manual",children:"Stream Load"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/3.x/data-operate/import/import-way/broker-load-manual",children:"Broker Load"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/3.x/data-operate/import/import-way/routine-load-manual",children:"Routine Load"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/3.x/lakehouse/file-analysis",children:"INSERT INTO FROM S3 TVF"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../../../sql-manual/sql-functions/table-valued-functions/hdfs",children:"INSERT INTO FROM HDFS TVF"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"supported-json-formats",children:"Supported JSON Formats"}),"\n",(0,r.jsx)(n.p,{children:"Doris supports the following three JSON formats:"}),"\n",(0,r.jsx)(n.h3,{id:"multiple-rows-represented-as-array",children:"Multiple Rows Represented as Array"}),"\n",(0,r.jsx)(n.p,{children:"Suitable for batch loading multiple rows of data, requirements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Root node must be an array"}),"\n",(0,r.jsx)(n.li,{children:"Each element in the array is an object representing a row of data"}),"\n",(0,r.jsxs)(n.li,{children:["Must set ",(0,r.jsx)(n.code,{children:"strip_outer_array=true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[\n    {"id": 123, "city": "beijing"},\n    {"id": 456, "city": "shanghai"}\n]\n\n// Supports nested structures\n[\n    {"id": 123, "city": {"name": "beijing", "region": "haidian"}},\n    {"id": 456, "city": {"name": "beijing", "region": "chaoyang"}}\n]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"single-row-represented-as-object",children:"Single Row Represented as Object"}),"\n",(0,r.jsx)(n.p,{children:"Suitable for loading single row data, requirements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Root node must be an object"}),"\n",(0,r.jsx)(n.li,{children:"The entire object represents one row of data"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"id": 123, "city": "beijing"}\n\n// Supports nested structures\n{"id": 123, "city": {"name": "beijing", "region": "haidian"}}\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,r.jsx)(n.p,{children:"Typically used with Routine Load method, such as single messages in Kafka."})}),"\n",(0,r.jsx)(n.h3,{id:"multiple-object-rows-separated-by-delimiter",children:"Multiple Object Rows Separated by Delimiter"}),"\n",(0,r.jsx)(n.p,{children:"Suitable for batch loading multiple rows of data, requirements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each line is a complete JSON object"}),"\n",(0,r.jsxs)(n.li,{children:["Must set ",(0,r.jsx)(n.code,{children:"read_json_by_line=true"})]}),"\n",(0,r.jsxs)(n.li,{children:["Line delimiter can be specified using ",(0,r.jsx)(n.code,{children:"line_delimiter"})," parameter, default is ",(0,r.jsx)(n.code,{children:"\\n"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"id": 123, "city": "beijing"}\n{"id": 456, "city": "shanghai"}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"parameter-configuration",children:"Parameter Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"parameter-support",children:"Parameter Support"}),"\n",(0,r.jsx)(n.p,{children:"The following table lists the JSON format parameters supported by various loading methods:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Stream Load"}),(0,r.jsx)(n.th,{children:"Broker Load"}),(0,r.jsx)(n.th,{children:"Routine Load"}),(0,r.jsx)(n.th,{children:"TVF"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"json paths"}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"jsonpaths"}),(0,r.jsx)(n.td,{children:"properties.jsonpaths"}),(0,r.jsx)(n.td,{children:"properties.jsonpaths"}),(0,r.jsx)(n.td,{children:"jsonpaths"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"json root"}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"json_root"}),(0,r.jsx)(n.td,{children:"properties.json_root"}),(0,r.jsx)(n.td,{children:"properties.json_root"}),(0,r.jsx)(n.td,{children:"json_root"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"strip outer array"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"strip_outer_array"}),(0,r.jsx)(n.td,{children:"properties.strip_outer_array"}),(0,r.jsx)(n.td,{children:"properties.strip_outer_array"}),(0,r.jsx)(n.td,{children:"strip_outer_array"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"read json by line"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"read_json_by_line"}),(0,r.jsx)(n.td,{children:"Always true"}),(0,r.jsx)(n.td,{children:"Not supported"}),(0,r.jsx)(n.td,{children:"read_json_by_line, default true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"fuzzy parse"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"fuzzy_parse"}),(0,r.jsx)(n.td,{children:"properties.fuzzy_parse"}),(0,r.jsx)(n.td,{children:"Not supported"}),(0,r.jsx)(n.td,{children:"fuzzy_parse"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"num as string"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"num_as_string"}),(0,r.jsx)(n.td,{children:"properties.num_as_string"}),(0,r.jsx)(n.td,{children:"properties.num_as_string"}),(0,r.jsx)(n.td,{children:"num_as_string"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"compression format"}),(0,r.jsx)(n.td,{children:"plain"}),(0,r.jsx)(n.td,{children:"compress_type(supported from 3.0.5)"}),(0,r.jsx)(n.td,{children:"PROPERTIES.compress_type"}),(0,r.jsx)(n.td,{children:"compress_type"}),(0,r.jsx)(n.td,{})]})]})]}),"\n",(0,r.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Stream Load: Parameters are specified directly through HTTP Headers, e.g., ",(0,r.jsx)(n.code,{children:'-H "jsonpaths: $.data"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Broker Load: Parameters are specified through ",(0,r.jsx)(n.code,{children:"PROPERTIES"}),", e.g., ",(0,r.jsx)(n.code,{children:'PROPERTIES("jsonpaths"="$.data")'})]}),"\n",(0,r.jsxs)(n.li,{children:["Routine Load: Parameters are specified through ",(0,r.jsx)(n.code,{children:"PROPERTIES"}),", e.g., ",(0,r.jsx)(n.code,{children:'PROPERTIES("jsonpaths"="$.data")'})]}),"\n",(0,r.jsxs)(n.li,{children:["TVF: Parameters are specified in TVF statements, e.g., ",(0,r.jsx)(n.code,{children:'S3("jsonpaths"="$.data")'})]}),"\n",(0,r.jsxs)(n.li,{children:["If you need to load the JSON object at the root node of a JSON file, the jsonpaths should be specified as ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,r.jsx)(n.mo,{separator:"true",children:","}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,r.jsx)(n.mi,{children:"g"}),(0,r.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,r.jsx)(n.mo,{separator:"true",children:","}),(0,r.jsx)(n.mi,{children:"P"}),(0,r.jsx)(n.mi,{children:"R"}),(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mi,{children:"P"}),(0,r.jsx)(n.mi,{children:"E"}),(0,r.jsx)(n.mi,{children:"R"}),(0,r.jsx)(n.mi,{children:"T"}),(0,r.jsx)(n.mi,{children:"I"}),(0,r.jsx)(n.mi,{children:"E"}),(0,r.jsx)(n.mi,{children:"S"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{mathvariant:"normal",children:'"'}),(0,r.jsx)(n.mi,{children:"j"}),(0,r.jsx)(n.mi,{children:"s"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mi,{children:"p"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"t"}),(0,r.jsx)(n.mi,{children:"h"}),(0,r.jsx)(n.mi,{children:"s"}),(0,r.jsx)(n.mi,{mathvariant:"normal",children:'"'}),(0,r.jsx)(n.mo,{children:"="}),(0,r.jsx)(n.mi,{mathvariant:"normal",children:'"'})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:'., e.g., PROPERTIES("jsonpaths"="'})]})})}),(0,r.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord",children:"."}),(0,r.jsx)(n.span,{className:"mpunct",children:","}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(n.span,{className:"mord",children:"."}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(n.span,{className:"mord",children:"."}),(0,r.jsx)(n.span,{className:"mpunct",children:","}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"PROPERT"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.07847em"},children:"I"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"ES"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord",children:'"'}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"so"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"p"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"h"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,r.jsx)(n.span,{className:"mord",children:'"'}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(n.span,{className:"mrel",children:"="}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,r.jsx)(n.span,{className:"mord",children:'"'})]})]})]}),'.")']}),"\n"]})}),"\n",(0,r.jsx)(n.h3,{id:"parameter-description",children:"Parameter Description"}),"\n",(0,r.jsx)(n.h4,{id:"json-path",children:"JSON Path"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Purpose: Specifies how to extract fields from JSON data"}),"\n",(0,r.jsx)(n.li,{children:"Type: String array"}),"\n",(0,r.jsx)(n.li,{children:"Default Value: None, defaults to matching column names"}),"\n",(0,r.jsxs)(n.li,{children:["Usage Examples:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'-- Basic usage\n["$.id", "$.city"]\n\n-- Nested structures\n["$.id", "$.info.city", "$.data[0].name"]\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"json-root",children:"JSON Root"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Purpose: Specifies the parsing starting point for JSON data"}),"\n",(0,r.jsx)(n.li,{children:"Type: String"}),"\n",(0,r.jsx)(n.li,{children:"Default Value: None, defaults to parsing from root node"}),"\n",(0,r.jsxs)(n.li,{children:["Usage Example:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'-- Original data\n{\n  "data": {\n    "id": 123,\n    "city": "beijing"\n  }\n}\n\n-- Set json_root\njson_root = $.data\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"strip-outer-array",children:"Strip Outer Array"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Purpose: Specifies whether to remove the outermost array structure"}),"\n",(0,r.jsx)(n.li,{children:"Type: Boolean"}),"\n",(0,r.jsx)(n.li,{children:"Default Value: false"}),"\n",(0,r.jsxs)(n.li,{children:["Usage Example:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'-- Original data\n[\n  {"id": 1, "city": "beijing"},\n  {"id": 2, "city": "shanghai"}\n]\n\n-- Set strip_outer_array=true\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"read-json-by-line",children:"Read JSON By Line"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Purpose: Specifies whether to read JSON data line by line"}),"\n",(0,r.jsx)(n.li,{children:"Type: Boolean"}),"\n",(0,r.jsx)(n.li,{children:"Default Value: false"}),"\n",(0,r.jsxs)(n.li,{children:["Usage Example:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'-- Original data (one complete JSON object per line)\n{"id": 1, "city": "beijing"}\n{"id": 2, "city": "shanghai"}\n\n-- Set read_json_by_line=true\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"fuzzy-parse",children:"Fuzzy Parse"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Purpose: Accelerates JSON data loading efficiency"}),"\n",(0,r.jsx)(n.li,{children:"Type: Boolean"}),"\n",(0,r.jsx)(n.li,{children:"Default Value: false"}),"\n",(0,r.jsxs)(n.li,{children:["Limitations:\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Field order in each row of the Array must be identical"}),"\n",(0,r.jsx)(n.li,{children:"Usually used with strip_outer_array"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Performance: Can improve loading efficiency by 3-5 times"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"num-as-string",children:"Num As String"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Purpose: Specifies whether to parse JSON numeric types as strings"}),"\n",(0,r.jsx)(n.li,{children:"Type: Boolean"}),"\n",(0,r.jsx)(n.li,{children:"Default Value: false"}),"\n",(0,r.jsxs)(n.li,{children:["Use Cases:\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Handling numbers outside numeric range"}),"\n",(0,r.jsx)(n.li,{children:"Avoiding numeric precision loss"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Usage Example:\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'-- Original data\n{\n  "id": "12345678901234567890",\n  "price": "99999999.999999"\n}\n-- Set num_as_string=true, price field will be parsed as string\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"relationship-between-json-path-and-columns",children:"Relationship between JSON Path and Columns"}),"\n",(0,r.jsx)(n.p,{children:"During data loading, JSON Path and Columns serve different responsibilities:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"JSON Path"}),": Defines data extraction rules"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Extracts fields from JSON data according to specified paths"}),"\n",(0,r.jsx)(n.li,{children:"Extracted fields are reordered according to the order defined in JSON Path"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Columns"}),": Defines data mapping rules"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maps extracted fields to target table columns"}),"\n",(0,r.jsx)(n.li,{children:"Can perform column reordering and transformation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These two parameters are processed serially: first, JSON Path extracts fields from source data and forms an ordered dataset, then Columns maps these data to table columns. If Columns is not specified, extracted fields will be mapped directly according to table column order."}),"\n",(0,r.jsx)(n.h4,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h5,{id:"using-json-path-only",children:"Using JSON Path Only"}),"\n",(0,r.jsx)(n.p,{children:"Table structure and data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Table structure\nCREATE TABLE example_table (\n    k2 int,\n    k1 int\n);\n\n-- JSON data\n{"k1": 1, "k2": 2}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Load command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl -v ... -H "format: json" \\\n    -H "jsonpaths: [\\"$.k2\\", \\"$.k1\\"]" \\\n    -T example.json \\\n    http://<fe_host>:<fe_http_port>/api/db_name/table_name/_stream_load\n'})}),"\n",(0,r.jsx)(n.p,{children:"Load result:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+\n| k1   | k2   |\n+------+------+\n|    2 |    1 | \n+------+------+\n"})}),"\n",(0,r.jsx)(n.h5,{id:"using-json-path--columns",children:"Using JSON Path + Columns"}),"\n",(0,r.jsx)(n.p,{children:"Using the same table structure and data, adding columns parameter:"}),"\n",(0,r.jsx)(n.p,{children:"Load command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl -v ... -H "format: json" \\\n    -H "jsonpaths: [\\"$.k2\\", \\"$.k1\\"]" \\\n    -H "columns: k2, k1" \\\n    -T example.json \\\n    http://<fe_host>:<fe_http_port>/api/db_name/table_name/_stream_load\n'})}),"\n",(0,r.jsx)(n.p,{children:"Load result:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+\n| k1   | k2   |\n+------+------+\n|    1 |    2 | \n+------+------+\n"})}),"\n",(0,r.jsx)(n.h5,{id:"field-reuse",children:"Field Reuse"}),"\n",(0,r.jsx)(n.p,{children:"Table structure and data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Table structure\nCREATE TABLE example_table (\n    k2 int,\n    k1 int,\n    k1_copy int\n);\n\n-- JSON data\n{"k1": 1, "k2": 2}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Load command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl -v ... -H "format: json" \\\n    -H "jsonpaths: [\\"$.k2\\", \\"$.k1\\", \\"$.k1\\"]" \\\n    -H "columns: k2, k1, k1_copy" \\\n    -T example.json \\\n    http://<fe_host>:<fe_http_port>/api/db_name/table_name/_stream_load\n'})}),"\n",(0,r.jsx)(n.p,{children:"Load result:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+---------+\n| k2   | k1   | k1_copy |\n+------+------+---------+\n|    2 |    1 |       1 |\n+------+------+---------+\n"})}),"\n",(0,r.jsx)(n.h5,{id:"nested-field-mapping",children:"Nested Field Mapping"}),"\n",(0,r.jsx)(n.p,{children:"Table structure and data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Table structure\nCREATE TABLE example_table (\n    k2 int,\n    k1 int,\n    k1_nested1 int,\n    k1_nested2 int\n);\n\n-- JSON data\n{\n    "k1": 1,\n    "k2": 2,\n    "k3": {\n        "k1": 31,\n        "k1_nested": {\n            "k1": 32\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Load command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'curl -v ... -H "format: json" \\\n    -H "jsonpaths: [\\"$.k2\\", \\"$.k1\\", \\"$.k3.k1\\", \\"$.k3.k1_nested.k1\\"]" \\\n    -H "columns: k2, k1, k1_nested1, k1_nested2" \\\n    -T example.json \\\n    http://<fe_host>:<fe_http_port>/api/db_name/table_name/_stream_load\n'})}),"\n",(0,r.jsx)(n.p,{children:"Load result:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+------------+------------+\n| k2   | k1   | k1_nested1 | k1_nested2 |\n+------+------+------------+------------+\n|    2 |    1 |         31 |         32 |\n+------+------+------------+------------+\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples-1",children:"Usage Examples"}),"\n",(0,r.jsx)(n.p,{children:"This section demonstrates the usage of JSON format in different loading methods."}),"\n",(0,r.jsx)(n.h3,{id:"stream-load",children:"Stream Load"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using JSON Path\ncurl --location-trusted -u <user>:<passwd> \\\n    -H "format: json" \\\n    -H "jsonpaths: [\\"$.id\\", \\"$.city\\"]" \\\n    -T example.json \\\n    http://<fe_host>:<fe_http_port>/api/example_db/example_table/_stream_load\n\n# Specifying JSON root\ncurl --location-trusted -u <user>:<passwd> \\\n    -H "format: json" \\\n    -H "json_root: $.events" \\\n    -T example.json \\\n    http://<fe_host>:<fe_http_port>/api/example_db/example_table/_stream_load\n\n# Reading JSON by line\ncurl --location-trusted -u <user>:<passwd> \\\n    -H "format: json" \\\n    -H "read_json_by_line: true" \\\n    -T example.json \\\n    http://<fe_host>:<fe_http_port>/api/example_db/example_table/_stream_load\n'})}),"\n",(0,r.jsx)(n.h3,{id:"broker-load",children:"Broker Load"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Using JSON Path\nLOAD LABEL example_db.example_label\n(\n    DATA INFILE("s3://bucket/path/example.json")\n    INTO TABLE example_table\n    FORMAT AS "json"\n    PROPERTIES\n    (\n        "jsonpaths" = "[\\"$.id\\", \\"$.city\\"]"\n    )\n)\nWITH S3 \n(\n    ...\n);\n\n-- Specifying JSON root\nLOAD LABEL example_db.example_label\n(\n    DATA INFILE("s3://bucket/path/example.json")\n    INTO TABLE example_table\n    FORMAT AS "json"\n    PROPERTIES\n    (\n        "json_root" = "$.events"\n    )\n)\nWITH S3 \n(\n    ...\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"routine-load",children:"Routine Load"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Using JSON Path\nCREATE ROUTINE LOAD example_db.example_job ON example_table\nPROPERTIES\n(\n    "format" = "json",\n    "jsonpaths" = "[\\"$.id\\", \\"$.city\\"]"\n)\nFROM KAFKA\n(\n    ...\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tvf-load",children:"TVF Load"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Using JSON Path\nINSERT INTO example_table\nSELECT *\nFROM S3\n(\n    "path" = "s3://bucket/example.json",\n    "format" = "json",\n    "jsonpaths" = "[\\"$.id\\", \\"$.city\\"]",\n    ...\n);\n\n-- Specifying JSON root\nINSERT INTO example_table\nSELECT *\nFROM S3\n(\n    "path" = "s3://bucket/example.json",\n    "format" = "json",\n    "json_root" = "$.events",\n    ...\n);\n'})})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return t},a:function(){return l}});var a=s(667294);let r={},i=a.createContext(r);function l(e){let n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);