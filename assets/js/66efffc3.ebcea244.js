"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["529993"],{772566:function(n,e,s){s.r(e),s.d(e,{default:()=>S,frontMatter:()=>i,metadata:()=>t,assets:()=>c,toc:()=>a,contentTitle:()=>o});var t=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/spatial-functions/st-intersects","title":"ST_INTERSECTS","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/spatial-functions/st-intersects.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/spatial-functions","slug":"/sql-manual/sql-functions/scalar-functions/spatial-functions/st-intersects","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-intersects","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ST_INTERSECTS","language":"en"},"sidebar":"docs","previous":{"title":"ST_GEOMETRYFROMWKB","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-geometryfromwkb"},"next":{"title":"ST_LINEFROMTEXT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-linefromtext"}}'),r=s("785893"),l=s("250065");let i={title:"ST_INTERSECTS",language:"en"},o=void 0,c={},a=[{value:"Description",id:"description",level:2},{value:"Sytax",id:"sytax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function T(n){let e={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(e.p,{children:"Determine whether two geometric shapes intersect, i.e., there is at least one common point (including boundary contact or internal overlap)."}),"\n",(0,r.jsx)(e.admonition,{title:"Note",type:"info",children:(0,r.jsx)(e.p,{children:"Supported since Apache Doris 3.0.6."})}),"\n",(0,r.jsx)(e.h2,{id:"sytax",children:"Sytax"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:"ST_INTERSECTS( <shape1>, <shape2>)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Parameter"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"<shape1>"})}),(0,r.jsx)(e.td,{children:"The first geometric shape used to determine if it intersects with another, supporting types such as Point, Line, Polygon, Circle\u3002"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"<shape2>"})}),(0,r.jsx)(e.td,{children:"The second geometric shape used to determine if it intersects with another, supporting types such as Point, Line, Polygon, Circle\u3002"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"return-value",children:"Return value"}),"\n",(0,r.jsx)(e.p,{children:"Returns 1: shape1 intersects with shape2"}),"\n",(0,r.jsx)(e.p,{children:"Returns 0: shape1 does not intersect with shape2"}),"\n",(0,r.jsx)(e.p,{children:"ST_INTERSECTS has the following edge cases:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"If any input parameter is NULL, returns NULL."}),"\n",(0,r.jsx)(e.li,{children:"If the input geometric shape is invalid, returns NULL."}),"\n",(0,r.jsx)(e.li,{children:"If the input is an empty geometric shape, returns NULL."}),"\n",(0,r.jsx)(e.li,{children:"If the two shapes are only tangent at the boundary (with a unique common point), returns 1 (boundary contact is considered intersection)"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(e.p,{children:"Point inside polygon (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'SELECT ST_Intersects(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), ST_Point(5, 5));\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:'+--------------------------------------------------------------------------------------+\n| ST_Intersects(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), ST_Point(5, 5)) |\n+--------------------------------------------------------------------------------------+\n|                                                                                    1 |\n+--------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Point on polygon boundary (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'\nmysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(0, 5));\n+-----------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(0, 5)) |\n+-----------------------------------------------------------------------------------------+\n|                                                                                       1 |\n+-----------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Point outside polygon (no intersection, returns 0)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(50, 50));\n+-------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(50, 50)) |\n+-------------------------------------------------------------------------------------------+\n|                                                                                         0 |\n+-------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Lines cross each other (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Linefromtext("LINESTRING (0 0, 10 10)"),  ST_Linefromtext("LINESTRING (0 10, 10 0)"));\n+----------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Linefromtext("LINESTRING (0 0, 10 10)"),  ST_Linefromtext("LINESTRING (0 10, 10 0)")) |\n+----------------------------------------------------------------------------------------------------------+\n|                                                                                                        1 |\n+----------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Lines share one common point"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Linefromtext("LINESTRING (0 0, 2 2)"),  ST_Linefromtext("LINESTRING (2 2, 4 0)"));\n+------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Linefromtext("LINESTRING (0 0, 2 2)"),  ST_Linefromtext("LINESTRING (2 2, 4 0)")) |\n+------------------------------------------------------------------------------------------------------+\n|                                                                                                    1 |\n+------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Lines are parallel and separated (no intersection, returns 0)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Linefromtext("LINESTRING (0 0, 10 0)"),  ST_Linefromtext("LINESTRING (0 1, 10 1)"));\n+--------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Linefromtext("LINESTRING (0 0, 10 0)"),  ST_Linefromtext("LINESTRING (0 1, 10 1)")) |\n+--------------------------------------------------------------------------------------------------------+\n|                                                                                                      0 |\n+--------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Line passes through the interior of a polygon (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (2 2, 8 8)"));\n+-------------------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (2 2, 8 8)")) |\n+-------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                 1 |\n+-------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Line is tangent to polygon boundary (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (0 5, 5 5)"));\n+-------------------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (0 5, 5 5)")) |\n+-------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                 1 |\n+-------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Line is completely outside the polygon (no intersection, returns 0)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (11 1, 11 9)"));\n+---------------------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (11 1, 11 9)")) |\n+---------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                   0 |\n+---------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Polygons overlap (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((5 5, 15 5, 15 15, 5 15, 5 5))"));\n+--------------------------------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((5 5, 15 5, 15 15, 5 15, 5 5))")) |\n+--------------------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                              1 |\n+--------------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Polygons are completely separated (no intersection, returns 0)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((20 20, 30 20, 30 30, 20 30, 20 20))"));\n+--------------------------------------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((20 20, 30 20, 30 30, 20 30, 20 20))")) |\n+--------------------------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                                    0 |\n+--------------------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Polygons touch at boundaries (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'\nmysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Polygon("POLYGON ((5 0, 10 0, 10 5, 5 5, 5 0))"));\n+--------------------------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Polygon("POLYGON ((5 0, 10 0, 10 5, 5 5, 5 0))")) |\n+--------------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                        1 |\n+--------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Circle and point inside (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT ST_INTERSECTS(  ST_Circle(0, 0, 1000),  ST_Point(0.005, 0));\n+-------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Circle(0, 0, 1000),  ST_Point(0.005, 0)) |\n+-------------------------------------------------------------+\n|                                                           1 |\n+-------------------------------------------------------------+\n"})}),"\n",(0,r.jsx)(e.p,{children:"Circle is tangent to line (intersect, returns 1)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Circle(0, 0, 1000),  ST_Linefromtext("LINESTRING (0.01 0.01, 0.02 0.02)"));\n+-----------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Circle(0, 0, 1000),  ST_Linefromtext("LINESTRING (0.01 0.01, 0.02 0.02)")) |\n+-----------------------------------------------------------------------------------------------+\n|                                                                                             1 |\n+-----------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Circle and polygon are completely separated (no intersection, returns 0)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(20, 5, 5));\n+----------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(20, 5, 5)) |\n+----------------------------------------------------------------------------------------------+\n|                                                                                            0 |\n+----------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Circle intersects with polygon"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Circle(5, 2.5, 2000));\n+----------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Circle(5, 2.5, 2000)) |\n+----------------------------------------------------------------------------------------------+\n|                                                                                            1 |\n+----------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Empty geometric shape"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_GeometryFromText("POINT EMPTY"));\n+-------------------------------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_GeometryFromText("POINT EMPTY")) |\n+-------------------------------------------------------------------------------------------------------------+\n|                                                                                                        NULL |\n+-------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Invalid polygon (returns NULL)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 1 1, 0 1, 1 0, 0 0))"),  ST_Point(0.5, 0.5));\n+-----------------------------------------------------------------------------------------+\n| ST_INTERSECTS(  ST_Polygon("POLYGON ((0 0, 1 1, 0 1, 1 0, 0 0))"),  ST_Point(0.5, 0.5)) |\n+-----------------------------------------------------------------------------------------+\n|                                                                                    NULL |\n+-----------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"NULL parameter (returns NULL)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT ST_INTERSECTS(NULL, ST_Point(5, 5));\n+-------------------------------------+\n| ST_INTERSECTS(NULL, ST_Point(5, 5)) |\n+-------------------------------------+\n|                                NULL |\n+-------------------------------------+\n"})})]})}function S(n={}){let{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(T,{...n})}):T(n)}},250065:function(n,e,s){s.d(e,{Z:function(){return o},a:function(){return i}});var t=s(667294);let r={},l=t.createContext(r);function i(n){let e=t.useContext(l);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);