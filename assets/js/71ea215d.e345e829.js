"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["317365"],{919814:function(e,i,n){n.r(i),n.d(i,{default:()=>h,frontMatter:()=>a,metadata:()=>t,assets:()=>l,toc:()=>d,contentTitle:()=>o});var t=JSON.parse('{"id":"gettingStarted/alternatives/alternative-to-trino","title":"Apache Doris vs Trino / Presto","description":"Apache Doris and Trino/Presto are both popular data lakehouse query engines, but Doris outperforms Trino/Presto in terms of performance. While Trino/Presto are primarily query engines, Doris can also function as a standalone data warehouse. This enables enterprises to unify their data warehouse and Lakehouse query engine into one with Doris, simplifying their data architecture","source":"@site/versioned_docs/version-2.1/gettingStarted/alternatives/alternative-to-trino.mdx","sourceDirName":"gettingStarted/alternatives","slug":"/gettingStarted/alternatives/alternative-to-trino","permalink":"/docs/2.1/gettingStarted/alternatives/alternative-to-trino","draft":false,"unlisted":false,"tags":[],"version":"2.1","frontMatter":{"title":"Apache Doris vs Trino / Presto","language":"zh-CN"},"sidebar":"docs","previous":{"title":"Alternative to Elasticsearch","permalink":"/docs/2.1/gettingStarted/alternatives/alternative-to-elasticsearch"},"next":{"title":"Environment Checking","permalink":"/docs/2.1/install/preparation/env-checking"}}'),r=n("785893"),s=n("250065");let a={title:"Apache Doris vs Trino / Presto",language:"zh-CN"},o=void 0,l={},d=[{value:"Featured Migration Cases",id:"featured-migration-cases",level:2},{value:"Apache Doris vs. Trino / Presto",id:"apache-doris-vs-trino--presto",level:2},{value:"Performance Comparison",id:"performance-comparison",level:2},{value:"TPC-DS 1TB Benchmark",id:"tpc-ds-1tb-benchmark",level:3}];function c(e){let i={h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.p,{children:"Apache Doris and Trino/Presto are both popular data lakehouse query engines, but Doris outperforms Trino/Presto in terms of performance. While Trino/Presto are primarily query engines, Doris can also function as a standalone data warehouse. This enables enterprises to unify their data warehouse and Lakehouse query engine into one with Doris, simplifying their data architecture"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Unified"}),": Doris unifies data warehouse and Lakehouse query engine, simplifying the tech stack"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"10x Query Performance"}),": Doris native table boosts query performance by up to 10x compared to Presto/Trino"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"2-3x Faster"}),": Doris as a Lakehouse engine is 2-3x faster than Presto/Trino"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"featured-migration-cases",children:"Featured Migration Cases"}),"\n",(0,r.jsxs)("div",{style:{display:"flex",justifyContent:"space-between"},children:[(0,r.jsx)("div",{style:{paddingTop:"2rem",paddingBottom:"2rem",paddingLeft:"2rem",paddingRight:"2.5rem",boxSizing:"border-box",borderWidth:"0.5px",borderRadius:"0.75px",borderColor:"#e5e7eb"},children:(0,r.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",flexDirection:"column"},children:[(0,r.jsx)("div",{style:{marginBottom:"1.25rem"},children:(0,r.jsx)("img",{alt:"tencent-music",loading:"lazy",width:"200",height:"40",decoding:"async","data-nimg":"1",style:{color:"transparent"},src:"/images/comparisons/cisco.png"})}),(0,r.jsx)("div",{style:{marginBbottom:"1.25rem"},children:(0,r.jsxs)(i.p,{children:["\u201CAs the world-renowed internet giant, our early data platform used Trino, Pinot, Iceberg, and Kyuubi, but faced complexity, redundancy, and poor performance. By replacing them with Apache Doris, we unified its data lakehouse and query engine, ",(0,r.jsx)(i.strong,{children:"boosting performance and reducing costs by 30%."}),"\u201D"]})})]})}),(0,r.jsx)("div",{style:{paddingTop:"2rem",paddingBottom:"2rem",paddingLeft:"2rem",paddingRight:"2.5rem",boxSizing:"border-box",borderWidth:"0.5px",borderRadius:"0.75px",borderColor:"#e5e7eb"},children:(0,r.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",flexDirection:"column"},children:[(0,r.jsx)("div",{style:{marginBottom:"1.25rem"},children:(0,r.jsx)("img",{alt:"tencent-music",loading:"lazy",width:"200",height:"40",decoding:"async","data-nimg":"1",style:{color:"transparent"},src:"/images/comparisons/netease-games.png"})}),(0,r.jsx)("div",{style:{marginBbottom:"1.25rem"},children:(0,r.jsxs)(i.p,{children:["\u201CAfter switching from Presto to Doris, query performance significantly improved, ",(0,r.jsx)(i.strong,{children:"reducing query time from 20-40 seconds to 1-2 seconds."})," By designing 2-3 materialized views based on common data dimensions, Doris can automatically match the optimal view for queries, further enhancing performance.\u201D"]})})]})}),(0,r.jsx)("div",{style:{paddingTop:"2rem",paddingBottom:"2rem",paddingLeft:"2rem",paddingRight:"2.5rem",boxSizing:"border-box",borderWidth:"0.5px",borderRadius:"0.75px",borderColor:"#e5e7eb"},children:(0,r.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",flexDirection:"column"},children:[(0,r.jsx)("div",{style:{marginBottom:"1.25rem"},children:(0,r.jsx)("img",{alt:"tencent-music",loading:"lazy",width:"150",height:"40",decoding:"async","data-nimg":"1",style:{color:"transparent"},src:"/images/comparisons/zto.png"})}),(0,r.jsx)("div",{style:{marginBbottom:"1.25rem"},children:(0,r.jsxs)(i.p,{children:["\u201CUsing Trino and SparkSQL, query latency was at the minute level, and performance was low. ",(0,r.jsx)(i.strong,{children:"After switching to Doris, performance improved 2 times."})," Doris also unified the tech stack, simplifying the management of real-time and interactive analytics tools.\u201D"]})})]})})]}),"\n",(0,r.jsx)(i.h2,{id:"apache-doris-vs-trino--presto",children:"Apache Doris vs. Trino / Presto"}),"\n",(0,r.jsxs)("table",{border:"1",children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{}),(0,r.jsx)("th",{children:"Apache Doris"}),(0,r.jsx)("th",{children:"Trino / Presto"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("strong",{children:"Architecture"})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Unified Architecture:"})," Combines the capabilities of a data warehouse and a Lakehouse query engine"]})})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Federated Querying:"})," Excels in querying across multiple heterogeneous data sources without data movement, but lacks built-in storage"]})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("strong",{children:"Execution Engine"})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{style:{fontSize:"14px"},children:"Fully vectorized execution engine implemented in C++, for high-performance data processing"})})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{style:{fontSize:"14px"},children:"Implemented primarily in Java, with vectorization currently in development as part of the Hummingbird project"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("strong",{children:"Query Optimizer"})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{style:{fontSize:"14px"},children:"Advanced query optimizer with cost-based optimization for complex SQL operations like joins, aggregations, and sorting"})})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{style:{fontSize:"14px"},children:"Supports cost-based optimization but with less advanced statistics collection and manual full collection"})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("strong",{children:"Caching Mechanisms"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Metadata Caching:"})," In-memory metadata caching with TTL, auto-refresh, and incremental synchronization"]}),(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Data Caching:"})," Hot data caching on local SSDs for reduced network I/O"]}),(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Query Caching:"})," SQL Cache and Partition Cache for query result caching"]})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Data Caching:"})," Relies on external caching solutions like Alluxio"]})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("strong",{children:"Materialized Views"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Incremental Refresh:"})," Supports incremental refresh and multiple update strategies"]}),(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Transparent Acceleration:"})," Query optimizer automatically routes queries to the most suitable materialized views"]})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{style:{fontSize:"14px"},children:[(0,r.jsx)(i.strong,{children:"Manual Refresh:"})," Limited to manual, full refresh with less advanced features"]})})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("strong",{children:"Use Cases"})}),(0,r.jsx)("td",{children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{style:{fontSize:"14px"},children:"High-concurrency real-time analytics"}),(0,r.jsx)("li",{style:{fontSize:"14px"},children:"Interactive analytics"})]})}),(0,r.jsx)("td",{children:(0,r.jsx)("ul",{children:(0,r.jsx)("li",{style:{fontSize:"14px"},children:"Only Interactive analytics"})})})]})]})]}),"\n",(0,r.jsx)(i.h2,{id:"performance-comparison",children:"Performance Comparison"}),"\n",(0,r.jsx)(i.h3,{id:"tpc-ds-1tb-benchmark",children:"TPC-DS 1TB Benchmark"}),"\n",(0,r.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",flexDirection:"column",paddingTop:"0.5rem",paddingBottom:"0.5rem"},children:[(0,r.jsxs)("div",{style:{marginRight:"2rem"},children:[(0,r.jsx)("p",{children:"The TPC-DS 1TB Benchmark evaluates data warehouse performance using a 1TB dataset with 6.35 billion records across 24 tables. It includes 99 complex queries to test joins, aggregations, and subqueries. Based on a snowflake schema, it simulates real-world sales scenarios. The 1TB scale is challenging due to query complexity."}),(0,r.jsx)("p",{children:"The test environment consists of:"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"1 FE/Coordinator node and 5 BE/Worker nodes."}),(0,r.jsx)("li",{children:"Each node has 64 cores, 1.5TB of memory, and SSD storage."}),(0,r.jsx)("li",{children:"HDFS is co-located on these nodes, and Hive tables are created."})]}),(0,r.jsx)("p",{children:"In this test, using the same dataset and equal computing service, the results shows that:"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)(i.strong,{children:"When data is imported into Doris' internal tables and queried using Doris, it achieves the shortest execution time."})}),(0,r.jsx)("li",{children:(0,r.jsx)(i.strong,{children:"When Doris and Trino are used separately to query data directly from Hive tables, Doris demonstrates superior query acceleration performance in the data lake."})})]})]}),(0,r.jsx)("div",{children:(0,r.jsx)("img",{alt:"TPC-DS 1TB  Benchmark",loading:"lazy",width:"400",height:"338",decoding:"async","data-nimg":"1",src:"/images/comparisons/tpc-ds-1tb-trino.png",style:{color:"transparent",marginTop:0}})})]})]})}function h(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,i,n){n.d(i,{Z:function(){return o},a:function(){return a}});var t=n(667294);let r={},s=t.createContext(r);function a(e){let i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);