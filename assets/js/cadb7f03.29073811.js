"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["738954"],{504448:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>l,metadata:()=>t,assets:()=>o,toc:()=>c,contentTitle:()=>r});var t=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/conversion/cast-expr","title":"CAST expression","description":"Introduction","source":"@site/docs/sql-manual/basic-element/sql-data-types/conversion/cast-expr.md","sourceDirName":"sql-manual/basic-element/sql-data-types/conversion","slug":"/sql-manual/basic-element/sql-data-types/conversion/cast-expr","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/cast-expr","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"CAST expression","language":"en"},"sidebar":"docs","previous":{"title":"Type Conversion","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/overview"},"next":{"title":"Cast to String (Output)","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/cast-to-string"}}'),a=s("785893"),i=s("250065");let l={title:"CAST expression",language:"en"},r=void 0,o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Strict Mode",id:"strict-mode",level:2},{value:"Examples",id:"examples",level:2},{value:"Normal CAST Conversion",id:"normal-cast-conversion",level:3},{value:"Using TRY_CAST to Handle Potentially Failed Conversions",id:"using-try_cast-to-handle-potentially-failed-conversions",level:3},{value:"Behavior",id:"behavior",level:2},{value:"Implicit CAST",id:"implicit-cast",level:2}];function d(e){let n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"CAST converts a value of one data type into another data type.\nTRY_CAST is a safe type conversion mechanism that returns a SQL NULL value instead of throwing an error when the conversion might fail."}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CAST( <source_expr> AS <target_data_type> )\nTRY_CAST( <source_expr> AS <target_data_type> )\n"})}),"\n",(0,a.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["source_expr",(0,a.jsx)(n.br,{}),"\nExpression of any supported data type to be converted into a different data type."]}),"\n",(0,a.jsxs)(n.li,{children:["target_data_type",(0,a.jsx)(n.br,{}),"\nThe target data type. If the type supports additional properties (for example, precision and scale for DECIMAL(p, s)), include them as needed."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"strict-mode",children:"Strict Mode"}),"\n",(0,a.jsx)(n.p,{children:"Before Doris 4.0, Doris's CAST behavior followed database systems like MySQL, trying to avoid CAST operations from raising errors. For example, in MySQL executing the following SQL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select cast('abc' as signed);\n"})}),"\n",(0,a.jsx)(n.p,{children:"Would result in:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"0\n"})}),"\n",(0,a.jsx)(n.p,{children:"Starting from Doris 4.0, we've adopted a more rigorous approach, following PostgreSQL's practice: when encountering invalid conversions, Doris will directly report an error rather than generating potentially confusing results."}),"\n",(0,a.jsxs)(n.p,{children:["Doris 4.0 introduced a new variable ",(0,a.jsx)(n.code,{children:"enable_strict_cast"}),", which can be enabled with:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"set enable_strict_cast = true;\n"})}),"\n",(0,a.jsx)(n.p,{children:"In strict mode, illegal CAST operations will directly result in errors:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"mysql> select cast('abc' as int);\nERROR 1105 (HY000): errCode = 2, detailMessage = abc can't cast to INT in strict mode.\n"})}),"\n",(0,a.jsx)(n.p,{children:"The advantages of strict mode are:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"It prevents users from getting unexpected values during CAST operations"}),"\n",(0,a.jsx)(n.li,{children:"The system can assume that all data can be successfully type-converted (illegal data will directly cause errors), enabling better optimization during computation"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.h3,{id:"normal-cast-conversion",children:"Normal CAST Conversion"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT CAST('123' AS INT);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+--------------------+\n| cast('123' as int) |\n+--------------------+\n|                123 |\n+--------------------+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"using-try_cast-to-handle-potentially-failed-conversions",children:"Using TRY_CAST to Handle Potentially Failed Conversions"}),"\n",(0,a.jsx)(n.p,{children:"When conversions might fail, using TRY_CAST can prevent query errors by returning NULL instead:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT TRY_CAST('abc' AS INT);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+------------------------+\n| try_cast('abc' as int) |\n+------------------------+\n|                   NULL |\n+------------------------+\n"})}),"\n",(0,a.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,a.jsx)(n.p,{children:"We categorize CAST by the target_data_type:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/array-conversion",children:"Cast to ARRAY"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/boolean-conversion",children:"Cast to BOOLEAN"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/date-conversion",children:"Cast to DATE"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/time-conversion",children:"Cast to TIME"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/datetime-conversion",children:"Cast to DATETIME"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/int-conversion",children:"Cast to integers (INT, etc.)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/float-double-conversion",children:"Cast to floating point (FLOAT/DOUBLE)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/decimal-conversion",children:"Cast to DECIMAL"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/json-conversion",children:"Cast to JSON / From JSON to other types"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/map-conversion",children:"Cast to MAP"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/struct-conversion",children:"Cast to STRUCT"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/ip-conversion",children:"Cast to IP"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"implicit-cast",children:"Implicit CAST"}),"\n",(0,a.jsx)(n.p,{children:"Some functions may trigger implicit CASTs, which can lead to unexpected behavior in certain cases.\nYou can use the EXPLAIN statement to check whether an implicit CAST occurs:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SELECT length(123);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"...\nlength(CAST(123 AS varchar(65533)))\n...\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can see from the execution plan above that the system automatically performs a CAST conversion, converting the integer 123 to a string type. This is an example of implicit CAST."})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return r},a:function(){return l}});var t=s(667294);let a={},i=t.createContext(a);function l(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);