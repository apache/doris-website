"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["113740"],{996731:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>r,metadata:()=>i,assets:()=>d,toc:()=>o,contentTitle:()=>l});var i=JSON.parse('{"id":"sql-manual/sql-functions/aggregate-functions/bitmap-union","title":"BITMAP_UNION","description":"Description","source":"@site/versioned_docs/version-2.1/sql-manual/sql-functions/aggregate-functions/bitmap-union.md","sourceDirName":"sql-manual/sql-functions/aggregate-functions","slug":"/sql-manual/sql-functions/aggregate-functions/bitmap-union","permalink":"/docs/2.1/sql-manual/sql-functions/aggregate-functions/bitmap-union","draft":false,"unlisted":false,"tags":[],"version":"2.1","frontMatter":{"title":"BITMAP_UNION","language":"en"},"sidebar":"docs","previous":{"title":"BITMAP_INTERSECT","permalink":"/docs/2.1/sql-manual/sql-functions/aggregate-functions/bitmap-intersect"},"next":{"title":"BITMAP_UNION_COUNT","permalink":"/docs/2.1/sql-manual/sql-functions/aggregate-functions/bitmap-union-count"}}'),a=t("785893"),s=t("250065");let r={title:"BITMAP_UNION",language:"en"},l=void 0,d={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Example",id:"example",level:2},{value:"Create table",id:"create-table",level:3},{value:"Data Load",id:"data-load",level:3},{value:"Stream Load",id:"stream-load",level:4},{value:"Insert Into",id:"insert-into",level:4}];function c(e){let n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"Calculate the union of input Bitmaps and return a new bitmap"}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"BITMAP_UNION(<expr>)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"<expr>"})}),(0,a.jsx)(n.td,{children:"Supported data types of BITMAP"})]})})]}),"\n",(0,a.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsx)(n.p,{children:"The data type of the return value is BITMAP."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select dt,page,bitmap_to_string(user_id) from pv_bitmap;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+------+------+---------------------------+\n| dt   | page | bitmap_to_string(user_id) |\n+------+------+---------------------------+\n|    1 | 100  | 100,200,300               |\n|    2 | 200  | 300                       |\n+------+------+---------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Calculate the deduplication value of user_id:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"select bitmap_count(bitmap_union(user_id)) from pv_bitmap;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+-------------------------------------+\n| bitmap_count(bitmap_union(user_id)) |\n+-------------------------------------+\n|                                   3 |\n+-------------------------------------+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-table",children:"Create table"}),"\n",(0,a.jsx)(n.p,{children:"The aggregation model needs to be used when creating the table. The data type is bitmap and the aggregation function is bitmap_union."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'CREATE TABLE `pv_bitmap` (\n  `dt` int (11) NULL COMMENT" ",\n  `page` varchar (10) NULL COMMENT" ",\n  `user_id` bitmap BITMAP_UNION NULL COMMENT" "\n) ENGINE = OLAP\nAGGREGATE KEY (`dt`,` page`)\nCOMMENT "OLAP"\nDISTRIBUTED BY HASH (`dt`) BUCKETS 2;\n'})}),"\n",(0,a.jsx)(n.p,{children:"Note: When the amount of data is large, it is best to create a corresponding rollup table for high-frequency bitmap_union queries"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"ALTER TABLE pv_bitmap ADD ROLLUP pv (page, user_id);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"data-load",children:"Data Load"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"TO_BITMAP (expr)"}),": Convert 0 ~ 18446744073709551615 unsigned bigint to bitmap"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"BITMAP_EMPTY ()"}),": Generate empty bitmap columns, used for insert or import to fill the default value"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"BITMAP_HASH (expr)"})," or ",(0,a.jsx)(n.code,{children:"BITMAP_HASH64 (expr)"}),": Convert any type of column to a bitmap by hashing"]}),"\n",(0,a.jsx)(n.h4,{id:"stream-load",children:"Stream Load"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'cat data | curl --location-trusted -u user: passwd -T--H "columns: dt, page, user_id, user_id = to_bitmap (user_id)" http: // host: 8410 / api / test / testDb / _stream_load\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'cat data | curl --location-trusted -u user: passwd -T--H "columns: dt, page, user_id, user_id = bitmap_hash (user_id)" http: // host: 8410 / api / test / testDb / _stream_load\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'cat data | curl --location-trusted -u user: passwd -T--H "columns: dt, page, user_id, user_id = bitmap_empty ()" http: // host: 8410 / api / test / testDb / _stream_load\n'})}),"\n",(0,a.jsx)(n.h4,{id:"insert-into",children:"Insert Into"}),"\n",(0,a.jsx)(n.p,{children:"id2's column type is bitmap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"insert into bitmap_table1 select id, id2 from bitmap_table2;\n"})}),"\n",(0,a.jsx)(n.p,{children:"id2's column type is bitmap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"INSERT INTO bitmap_table1 (id, id2) VALUES (1001, to_bitmap (1000)), (1001, to_bitmap (2000));\n"})}),"\n",(0,a.jsx)(n.p,{children:"id2's column type is bitmap"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"insert into bitmap_table1 select id, bitmap_union (id2) from bitmap_table2 group by id;\n"})}),"\n",(0,a.jsx)(n.p,{children:"id2's column type is int"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"insert into bitmap_table1 select id, to_bitmap (id2) from table;\n"})}),"\n",(0,a.jsx)(n.p,{children:"id2's column type is String"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"insert into bitmap_table1 select id, bitmap_hash (id_string) from table;\n"})})]})}function p(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return r}});var i=t(667294);let a={},s=i.createContext(a);function r(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);