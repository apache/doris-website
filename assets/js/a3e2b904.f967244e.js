"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["649815"],{155902:function(e,n,t){t.r(n),t.d(n,{assets:function(){return o},contentTitle:function(){return l},default:function(){return _},frontMatter:function(){return a},metadata:function(){return r},toc:function(){return d}});var r=t(927334),s=t(785893),i=t(250065);let a={title:"Apache Doris 1.2 TPC-H performance test report",description:"On 22 queries on the TPC-H standard test data set, we conducted a comparison test based on Apache Doris 1.2.0-rc01, Apache Doris 1.1.3 and Apache Doris 0.15.0 RC04 versions. Compared with Apache Doris 1.1.3, the overall performance of Apache Doris 1.2.0-rc01 has been improved by nearly 3 times, and by nearly 11 times compared with Apache Doris 0.15.0 RC04.",date:"2022-11-22",author:"Apache Doris",tags:["Tech Sharing"],image:"/images/tech-sharing.png"},l="TPC-H Benchmark",o={authorsImageUrls:[void 0]},d=[{value:"1. Hardware Environment",id:"1-hardware-environment",level:2},{value:"2. Software Environment",id:"2-software-environment",level:2},{value:"3. Test Data Volume",id:"3-test-data-volume",level:2},{value:"4. Test SQL",id:"4-test-sql",level:2},{value:"5. Test Results",id:"5-test-results",level:2},{value:"6. Environmental Preparation",id:"6-environmental-preparation",level:2},{value:"7. Data Preparation",id:"7-data-preparation",level:2},{value:"7.1 Download and Install TPC-H Data Generation Tool",id:"71-download-and-install-tpc-h-data-generation-tool",level:3},{value:"7.2 Generating the TPC-H Test Set",id:"72-generating-the-tpc-h-test-set",level:3},{value:"7.3 Create Table",id:"73-create-table",level:3},{value:"7.3.1 Prepare the <code>doris-cluster.conf</code> File",id:"731-prepare-the-doris-clusterconf-file",level:4},{value:"Execute the Following Script to Generate and Create TPC-H Table",id:"execute-the-following-script-to-generate-and-create-tpc-h-table",level:4},{value:"7.4 Import Data",id:"74-import-data",level:3},{value:"7.5 Check Imported Data",id:"75-check-imported-data",level:3},{value:"7.6 Query Test",id:"76-query-test",level:3},{value:"7.6.1 Executing Query Scripts",id:"761-executing-query-scripts",level:4},{value:"7.6.2 Single SQL Execution",id:"762-single-sql-execution",level:4}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"TPC-H is a decision support benchmark (Decision Support Benchmark), which consists of a set of business-oriented special query and concurrent data modification. The data that is queried and populates the database has broad industry relevance. This benchmark demonstrates a decision support system that examines large amounts of data, executes highly complex queries, and answers key business questions. The performance index reported by TPC-H is called TPC-H composite query performance index per hour (QphH@Size), which reflects multiple aspects of the system's ability to process queries. These aspects include the database size chosen when executing the query, the query processing capability when the query is submitted by a single stream, and the query throughput when the query is submitted by many concurrent users."}),"\n",(0,s.jsx)(n.p,{children:"This document mainly introduces the performance of Doris on the TPC-H 100G test set."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Note 1: The standard test set including TPC-H is usually far from the actual business scenario, and some tests will perform parameter tuning for the test set. Therefore, the test results of the standard test set can only reflect the performance of the database in a specific scenario. We suggest users use actual business data for further testing."}),"\n",(0,s.jsx)(n.p,{children:"Note 2: The operations involved in this document are all tested on CentOS 7.x."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"On 22 queries on the TPC-H standard test data set, we conducted a comparison test based on Apache Doris 1.2.0-rc01, Apache Doris 1.1.3 and Apache Doris 0.15.0 RC04 versions. Compared with Apache Doris 1.1.3, the overall performance of Apache Doris 1.2.0-rc01 has been improved by nearly 3 times, and by nearly 11 times compared with Apache Doris 0.15.0 RC04."}),"\n",(0,s.jsx)(n.h2,{id:"1-hardware-environment",children:"1. Hardware Environment"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Hardware"}),(0,s.jsx)(n.th,{children:"Configuration Instructions"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Number of mMachines"}),(0,s.jsx)(n.td,{children:"4 Tencent Cloud Virtual Machine\uFF081FE\uFF0C3BEs\uFF09"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CPU"}),(0,s.jsx)(n.td,{children:"Intel Xeon(Cascade Lake) Platinum 8269CY  16C  (2.5 GHz/3.2 GHz)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Memory"}),(0,s.jsx)(n.td,{children:"64G"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Network"}),(0,s.jsx)(n.td,{children:"5Gbps"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Disk"}),(0,s.jsx)(n.td,{children:"ESSD Cloud Hard Disk"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"2-software-environment",children:"2. Software Environment"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Doris Deployed 3BEs and 1FE"}),"\n",(0,s.jsx)(n.li,{children:"Kernel Version: Linux version 5.4.0-96-generic (buildd@lgw01-amd64-051)"}),"\n",(0,s.jsx)(n.li,{children:"OS version: CentOS 7.8"}),"\n",(0,s.jsx)(n.li,{children:"Doris software version: Apache Doris 1.2.0-rc01, Apache Doris 1.1.3 , Apache Doris 0.15.0 RC04"}),"\n",(0,s.jsx)(n.li,{children:'JDK: openjdk version "11.0.14" 2022-01-18'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-test-data-volume",children:"3. Test Data Volume"}),"\n",(0,s.jsx)(n.p,{children:"The TPCH 100G data generated by the simulation of the entire test are respectively imported into Apache Doris 1.2.0-rc01, Apache Doris 1.1.3 and Apache Doris 0.15.0 RC04 for testing. The following is the relevant description and data volume of the table."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"TPC-H Table Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Rows"}),(0,s.jsx)(n.th,{children:"Size after Import"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Annotation"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"REGION"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"5"}),(0,s.jsx)(n.td,{children:"400KB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Region"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"NATION"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"25"}),(0,s.jsx)(n.td,{children:"7.714 KB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Nation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"SUPPLIER"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"1,000,000"}),(0,s.jsx)(n.td,{children:"85.528 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Supplier"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"PART"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"20,000,000"}),(0,s.jsx)(n.td,{children:"752.330 MB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Parts"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"PARTSUPP"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"20,000,000"}),(0,s.jsx)(n.td,{children:"4.375 GB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Parts Supply"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"CUSTOMER"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"15,000,000"}),(0,s.jsx)(n.td,{children:"1.317 GB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Customer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"ORDERS"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"1,500,000,000"}),(0,s.jsx)(n.td,{children:"6.301 GB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Orders"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"LINEITEM"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"6,000,000,000"}),(0,s.jsx)(n.td,{children:"20.882 GB"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Order Details"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"4-test-sql",children:"4. Test SQL"}),"\n",(0,s.jsxs)(n.p,{children:["TPCH 22 test query statements : ",(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-doris/tree/master/tools/tpch-tools/queries",children:"TPCH-Query-SQL"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notice:"})}),"\n",(0,s.jsx)(n.p,{children:"The following four parameters in the above SQL do not exist in Apache Doris 0.15.0 RC04. When executing, please remove:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1. enable_vectorized_engine=true,\n2. batch_size=4096,\n3. disable_join_reorder=false\n4. enable_projection=true\n"})}),"\n",(0,s.jsx)(n.h2,{id:"5-test-results",children:"5. Test Results"}),"\n",(0,s.jsx)(n.p,{children:"Here we use Apache Doris 1.2.0-rc01, Apache Doris 1.1.3 and Apache Doris 0.15.0 RC04 for comparative testing. In the test, we use Query Time(ms) as the main performance indicator. The test results are as follows:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Query"}),(0,s.jsx)(n.th,{children:"Apache Doris 1.2.0-rc01 (ms)"}),(0,s.jsx)(n.th,{children:"Apache Doris 1.1.3 (ms)"}),(0,s.jsx)(n.th,{children:"Apache Doris 0.15.0 RC04 (ms)"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q1"}),(0,s.jsx)(n.td,{children:"2.12"}),(0,s.jsx)(n.td,{children:"3.75"}),(0,s.jsx)(n.td,{children:"28.63"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q2"}),(0,s.jsx)(n.td,{children:"0.20"}),(0,s.jsx)(n.td,{children:"4.22"}),(0,s.jsx)(n.td,{children:"7.88"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q3"}),(0,s.jsx)(n.td,{children:"0.62"}),(0,s.jsx)(n.td,{children:"2.64"}),(0,s.jsx)(n.td,{children:"9.39"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q4"}),(0,s.jsx)(n.td,{children:"0.61"}),(0,s.jsx)(n.td,{children:"1.5"}),(0,s.jsx)(n.td,{children:"9.3"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q5"}),(0,s.jsx)(n.td,{children:"1.05"}),(0,s.jsx)(n.td,{children:"2.15"}),(0,s.jsx)(n.td,{children:"4.11"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q6"}),(0,s.jsx)(n.td,{children:"0.08"}),(0,s.jsx)(n.td,{children:"0.19"}),(0,s.jsx)(n.td,{children:"0.43"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q7"}),(0,s.jsx)(n.td,{children:"0.58"}),(0,s.jsx)(n.td,{children:"1.04"}),(0,s.jsx)(n.td,{children:"1.61"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q8"}),(0,s.jsx)(n.td,{children:"0.72"}),(0,s.jsx)(n.td,{children:"1.75"}),(0,s.jsx)(n.td,{children:"50.35"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q9"}),(0,s.jsx)(n.td,{children:"3.61"}),(0,s.jsx)(n.td,{children:"7.94"}),(0,s.jsx)(n.td,{children:"16.34"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q10"}),(0,s.jsx)(n.td,{children:"1.26"}),(0,s.jsx)(n.td,{children:"1.41"}),(0,s.jsx)(n.td,{children:"5.21"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q11"}),(0,s.jsx)(n.td,{children:"0.15"}),(0,s.jsx)(n.td,{children:"0.35"}),(0,s.jsx)(n.td,{children:"1.72"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q12"}),(0,s.jsx)(n.td,{children:"0.21"}),(0,s.jsx)(n.td,{children:"0.57"}),(0,s.jsx)(n.td,{children:"5.39"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q13"}),(0,s.jsx)(n.td,{children:"2.62"}),(0,s.jsx)(n.td,{children:"8.15"}),(0,s.jsx)(n.td,{children:"20.88"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q14"}),(0,s.jsx)(n.td,{children:"0.16"}),(0,s.jsx)(n.td,{children:"0.3"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q15"}),(0,s.jsx)(n.td,{children:"0.30"}),(0,s.jsx)(n.td,{children:"0.66"}),(0,s.jsx)(n.td,{children:"1.86"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q16"}),(0,s.jsx)(n.td,{children:"0.38"}),(0,s.jsx)(n.td,{children:"0.79"}),(0,s.jsx)(n.td,{children:"1.32"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q17"}),(0,s.jsx)(n.td,{children:"0.65"}),(0,s.jsx)(n.td,{children:"1.51"}),(0,s.jsx)(n.td,{children:"26.67"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q18"}),(0,s.jsx)(n.td,{children:"2.28"}),(0,s.jsx)(n.td,{children:"3.364"}),(0,s.jsx)(n.td,{children:"11.77"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q19"}),(0,s.jsx)(n.td,{children:"0.20"}),(0,s.jsx)(n.td,{children:"0.829"}),(0,s.jsx)(n.td,{children:"1.71"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q20"}),(0,s.jsx)(n.td,{children:"0.21"}),(0,s.jsx)(n.td,{children:"2.77"}),(0,s.jsx)(n.td,{children:"5.2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q21"}),(0,s.jsx)(n.td,{children:"1.17"}),(0,s.jsx)(n.td,{children:"4.47"}),(0,s.jsx)(n.td,{children:"10.34"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Q22"}),(0,s.jsx)(n.td,{children:"0.46"}),(0,s.jsx)(n.td,{children:"0.9"}),(0,s.jsx)(n.td,{children:"3.22"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Total"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"19.64"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"51.253"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"223.33"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image-20220614114351241",src:t(321982).Z+"",width:"1526",height:"726"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Result Description"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The data set corresponding to the test results is scale 100, about 600 million."}),"\n",(0,s.jsx)(n.li,{children:"The test environment is configured as the user's common configuration, with 4 cloud servers, 16-core 64G SSD, and 1 FE 3 BEs deployment."}),"\n",(0,s.jsx)(n.li,{children:"Select the user's common configuration test to reduce the cost of user selection and evaluation, but the entire test process will not consume so many hardware resources."}),"\n",(0,s.jsx)(n.li,{children:"Apache Doris 0.15 RC04 failed to execute Q14 in the TPC-H test, unable to complete the query."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"6-environmental-preparation",children:"6. Environmental Preparation"}),"\n",(0,s.jsxs)(n.p,{children:["Please refer to the ",(0,s.jsx)(n.a,{href:"https://doris.apache.org/docs/install/deploy-manually/storage-compute-coupled-deploy-manually/",children:"official document"})," to install and deploy Doris to obtain a normal running Doris cluster (at least 1 FE 1 BE, 1 FE 3 BE is recommended)."]}),"\n",(0,s.jsx)(n.h2,{id:"7-data-preparation",children:"7. Data Preparation"}),"\n",(0,s.jsx)(n.h3,{id:"71-download-and-install-tpc-h-data-generation-tool",children:"7.1 Download and Install TPC-H Data Generation Tool"}),"\n",(0,s.jsxs)(n.p,{children:["Execute the following script to download and compile the ",(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-doris/tree/master/tools/tpch-tools",children:"tpch-tools"})," tool."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"sh build-tpch-dbgen.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After successful installation, the ",(0,s.jsx)(n.code,{children:"dbgen"})," binary will be generated under the ",(0,s.jsx)(n.code,{children:"TPC-H_Tools_v3.0.0/"})," directory."]}),"\n",(0,s.jsx)(n.h3,{id:"72-generating-the-tpc-h-test-set",children:"7.2 Generating the TPC-H Test Set"}),"\n",(0,s.jsx)(n.p,{children:"Execute the following script to generate the TPC-H dataset:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"sh gen-tpch-data.sh\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note 1: Check the script help via ",(0,s.jsx)(n.code,{children:"sh gen-tpch-data.sh -h"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Note 2: The data will be generated under the ",(0,s.jsx)(n.code,{children:"tpch-data/"})," directory with the suffix ",(0,s.jsx)(n.code,{children:".tbl"}),". The total file size is about 100GB and may need a few minutes to an hour to generate."]}),"\n",(0,s.jsx)(n.p,{children:"Note 3: A standard test data set of 100G is generated by default."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"73-create-table",children:"7.3 Create Table"}),"\n",(0,s.jsxs)(n.h4,{id:"731-prepare-the-doris-clusterconf-file",children:["7.3.1 Prepare the ",(0,s.jsx)(n.code,{children:"doris-cluster.conf"})," File"]}),"\n",(0,s.jsxs)(n.p,{children:["Before import the script, you need to write the FE\u2019s ip port and other information in the ",(0,s.jsx)(n.code,{children:"doris-cluster.conf"})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["The file location is at the same level as ",(0,s.jsx)(n.code,{children:"load-tpch-data.sh"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The content of the file includes FE's ip, HTTP port, user name, password and the DB name of the data to be imported:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# Any of FE host\nexport FE_HOST='127.0.0.1'\n# http_port in fe.conf\nexport FE_HTTP_PORT=8030\n# query_port in fe.conf\nexport FE_QUERY_PORT=9030\n# Doris username\nexport USER='root'\n# Doris password\nexport PASSWORD=''\n# The database where TPC-H tables located\nexport DB='tpch1'\n"})}),"\n",(0,s.jsx)(n.h4,{id:"execute-the-following-script-to-generate-and-create-tpc-h-table",children:"Execute the Following Script to Generate and Create TPC-H Table"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"sh create-tpch-tables.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Or copy the table creation statement in ",(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-doris/blob/master/tools/tpch-tools/create-tpch-tables.sql",children:"create-tpch-tables.sql"})," and execute it in Doris."]}),"\n",(0,s.jsx)(n.h3,{id:"74-import-data",children:"7.4 Import Data"}),"\n",(0,s.jsx)(n.p,{children:"Please perform data import with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"sh ./load-tpch-data.sh\n"})}),"\n",(0,s.jsx)(n.h3,{id:"75-check-imported-data",children:"7.5 Check Imported Data"}),"\n",(0,s.jsx)(n.p,{children:"Execute the following SQL statement to check that the imported data is consistent with the above data."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select count(*)  from  lineitem;\nselect count(*)  from  orders;\nselect count(*)  from  partsupp;\nselect count(*)  from  part;\nselect count(*)  from  customer;\nselect count(*)  from  supplier;\nselect count(*)  from  nation;\nselect count(*)  from  region;\nselect count(*)  from  revenue0;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"76-query-test",children:"7.6 Query Test"}),"\n",(0,s.jsx)(n.h4,{id:"761-executing-query-scripts",children:"7.6.1 Executing Query Scripts"}),"\n",(0,s.jsx)(n.p,{children:"Execute the above test SQL or execute the following command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./run-tpch-queries.sh\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Notice:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"At present, the query optimizer and statistics functions of Doris are not so perfect, so we rewrite some queries in TPC-H to adapt to the execution framework of Doris, but it does not affect the correctness of the results"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Doris' new query optimizer will be released in future versions"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Set ",(0,s.jsx)(n.code,{children:"set mem_exec_limit=8G"})," before executing the query"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"762-single-sql-execution",children:"7.6.2 Single SQL Execution"}),"\n",(0,s.jsx)(n.p,{children:"The following is the SQL statement used in the test, you can also get the latest SQL from the code base."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"--Q1\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=false) */\n    l_returnflag,\n    l_linestatus,\n    sum(l_quantity) as sum_qty,\n    sum(l_extendedprice) as sum_base_price,\n    sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,\n    sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,\n    avg(l_quantity) as avg_qty,\n    avg(l_extendedprice) as avg_price,\n    avg(l_discount) as avg_disc,\n    count(*) as count_order\nfrom\n    lineitem\nwhere\n    l_shipdate <= date '1998-12-01' - interval '90' day\ngroup by\n    l_returnflag,\n    l_linestatus\norder by\n    l_returnflag,\n    l_linestatus;\n\n--Q2\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=1, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */\n    s_acctbal,\n    s_name,\n    n_name,\n    p_partkey,\n    p_mfgr,\n    s_address,\n    s_phone,\n    s_comment\nfrom\n    partsupp join\n    (\n        select\n            ps_partkey as a_partkey,\n            min(ps_supplycost) as a_min\n        from\n            partsupp,\n            part,\n            supplier,\n            nation,\n            region\n        where\n            p_partkey = ps_partkey\n            and s_suppkey = ps_suppkey\n            and s_nationkey = n_nationkey\n            and n_regionkey = r_regionkey\n            and r_name = 'EUROPE'\n            and p_size = 15\n            and p_type like '%BRASS'\n        group by a_partkey\n    ) A on ps_partkey = a_partkey and ps_supplycost=a_min ,\n    part,\n    supplier,\n    nation,\n    region\nwhere\n    p_partkey = ps_partkey\n    and s_suppkey = ps_suppkey\n    and p_size = 15\n    and p_type like '%BRASS'\n    and s_nationkey = n_nationkey\n    and n_regionkey = r_regionkey\n    and r_name = 'EUROPE'\n\norder by\n    s_acctbal desc,\n    n_name,\n    s_name,\n    p_partkey\nlimit 100;\n\n--Q3\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true, runtime_filter_wait_time_ms=10000) */\n    l_orderkey,\n    sum(l_extendedprice * (1 - l_discount)) as revenue,\n    o_orderdate,\n    o_shippriority\nfrom\n    (\n        select l_orderkey, l_extendedprice, l_discount, o_orderdate, o_shippriority, o_custkey from\n        lineitem join orders\n        where l_orderkey = o_orderkey\n        and o_orderdate < date '1995-03-15'\n        and l_shipdate > date '1995-03-15'\n    ) t1 join customer c \n    on c.c_custkey = t1.o_custkey\n    where c_mktsegment = 'BUILDING'\ngroup by\n    l_orderkey,\n    o_orderdate,\n    o_shippriority\norder by\n    revenue desc,\n    o_orderdate\nlimit 10;\n\n--Q4\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */\n    o_orderpriority,\n    count(*) as order_count\nfrom\n    (\n        select\n            *\n        from\n            lineitem\n        where l_commitdate < l_receiptdate\n    ) t1\n    right semi join orders\n    on t1.l_orderkey = o_orderkey\nwhere\n    o_orderdate >= date '1993-07-01'\n    and o_orderdate < date '1993-07-01' + interval '3' month\ngroup by\n    o_orderpriority\norder by\n    o_orderpriority;\n\n--Q5\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */\n    n_name,\n    sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n    customer,\n    orders,\n    lineitem,\n    supplier,\n    nation,\n    region\nwhere\n    c_custkey = o_custkey\n    and l_orderkey = o_orderkey\n    and l_suppkey = s_suppkey\n    and c_nationkey = s_nationkey\n    and s_nationkey = n_nationkey\n    and n_regionkey = r_regionkey\n    and r_name = 'ASIA'\n    and o_orderdate >= date '1994-01-01'\n    and o_orderdate < date '1994-01-01' + interval '1' year\ngroup by\n    n_name\norder by\n    revenue desc;\n\n--Q6\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=1, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */\n    sum(l_extendedprice * l_discount) as revenue\nfrom\n    lineitem\nwhere\n    l_shipdate >= date '1994-01-01'\n    and l_shipdate < date '1994-01-01' + interval '1' year\n    and l_discount between .06 - 0.01 and .06 + 0.01\n    and l_quantity < 24;\n\n--Q7\nselect /*+SET_VAR(exec_mem_limit=458589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */\n    supp_nation,\n    cust_nation,\n    l_year,\n    sum(volume) as revenue\nfrom\n    (\n        select\n            n1.n_name as supp_nation,\n            n2.n_name as cust_nation,\n            extract(year from l_shipdate) as l_year,\n            l_extendedprice * (1 - l_discount) as volume\n        from\n            supplier,\n            lineitem,\n            orders,\n            customer,\n            nation n1,\n            nation n2\n        where\n            s_suppkey = l_suppkey\n            and o_orderkey = l_orderkey\n            and c_custkey = o_custkey\n            and s_nationkey = n1.n_nationkey\n            and c_nationkey = n2.n_nationkey\n            and (\n                (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')\n                or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')\n            )\n            and l_shipdate between date '1995-01-01' and date '1996-12-31'\n    ) as shipping\ngroup by\n    supp_nation,\n    cust_nation,\n    l_year\norder by\n    supp_nation,\n    cust_nation,\n    l_year;\n\n--Q8\n\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */\n    o_year,\n    sum(case\n        when nation = 'BRAZIL' then volume\n        else 0\n    end) / sum(volume) as mkt_share\nfrom\n    (\n        select\n            extract(year from o_orderdate) as o_year,\n            l_extendedprice * (1 - l_discount) as volume,\n            n2.n_name as nation\n        from\n            lineitem,\n            orders,\n            customer,\n            supplier,\n            part,\n            nation n1,\n            nation n2,\n            region\n        where\n            p_partkey = l_partkey\n            and s_suppkey = l_suppkey\n            and l_orderkey = o_orderkey\n            and o_custkey = c_custkey\n            and c_nationkey = n1.n_nationkey\n            and n1.n_regionkey = r_regionkey\n            and r_name = 'AMERICA'\n            and s_nationkey = n2.n_nationkey\n            and o_orderdate between date '1995-01-01' and date '1996-12-31'\n            and p_type = 'ECONOMY ANODIZED STEEL'\n    ) as all_nations\ngroup by\n    o_year\norder by\n    o_year;\n\n--Q9\nselect/*+SET_VAR(exec_mem_limit=37179869184, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true, enable_remove_no_conjuncts_runtime_filter_policy=true, runtime_filter_wait_time_ms=100000) */\n    nation,\n    o_year,\n    sum(amount) as sum_profit\nfrom\n    (\n        select\n            n_name as nation,\n            extract(year from o_orderdate) as o_year,\n            l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount\n        from\n            lineitem join orders on o_orderkey = l_orderkey\n            join[shuffle] part on p_partkey = l_partkey\n            join[shuffle] partsupp on ps_partkey = l_partkey\n            join[shuffle] supplier on s_suppkey = l_suppkey\n            join[broadcast] nation on s_nationkey = n_nationkey\n        where\n            ps_suppkey = l_suppkey and \n            p_name like '%green%'\n    ) as profit\ngroup by\n    nation,\n    o_year\norder by\n    nation,\n    o_year desc;\n\n--Q10\n\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */\n    c_custkey,\n    c_name,\n    sum(t1.l_extendedprice * (1 - t1.l_discount)) as revenue,\n    c_acctbal,\n    n_name,\n    c_address,\n    c_phone,\n    c_comment\nfrom\n    customer,\n    (\n        select o_custkey,l_extendedprice,l_discount from lineitem, orders\n        where l_orderkey = o_orderkey\n        and o_orderdate >= date '1993-10-01'\n        and o_orderdate < date '1993-10-01' + interval '3' month\n        and l_returnflag = 'R'\n    ) t1,\n    nation\nwhere\n    c_custkey = t1.o_custkey\n    and c_nationkey = n_nationkey\ngroup by\n    c_custkey,\n    c_name,\n    c_acctbal,\n    c_phone,\n    n_name,\n    c_address,\n    c_comment\norder by\n    revenue desc\nlimit 20;\n\n--Q11\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */\n    ps_partkey,\n    sum(ps_supplycost * ps_availqty) as value\nfrom\n    partsupp,\n    (\n    select s_suppkey\n    from supplier, nation\n    where s_nationkey = n_nationkey and n_name = 'GERMANY'\n    ) B\nwhere\n    ps_suppkey = B.s_suppkey\ngroup by\n    ps_partkey having\n        sum(ps_supplycost * ps_availqty) > (\n            select\n                sum(ps_supplycost * ps_availqty) * 0.000002\n            from\n                partsupp,\n                (select s_suppkey\n                 from supplier, nation\n                 where s_nationkey = n_nationkey and n_name = 'GERMANY'\n                ) A\n            where\n                ps_suppkey = A.s_suppkey\n        )\norder by\n    value desc;\n\n--Q12\n\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */\n    l_shipmode,\n    sum(case\n        when o_orderpriority = '1-URGENT'\n            or o_orderpriority = '2-HIGH'\n            then 1\n        else 0\n    end) as high_line_count,\n    sum(case\n        when o_orderpriority <> '1-URGENT'\n            and o_orderpriority <> '2-HIGH'\n            then 1\n        else 0\n    end) as low_line_count\nfrom\n    orders,\n    lineitem\nwhere\n    o_orderkey = l_orderkey\n    and l_shipmode in ('MAIL', 'SHIP')\n    and l_commitdate < l_receiptdate\n    and l_shipdate < l_commitdate\n    and l_receiptdate >= date '1994-01-01'\n    and l_receiptdate < date '1994-01-01' + interval '1' year\ngroup by\n    l_shipmode\norder by\n    l_shipmode;\n\n--Q13\nselect /*+SET_VAR(exec_mem_limit=45899345920, parallel_fragment_exec_instance_num=16, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true) */\n    c_count,\n    count(*) as custdist\nfrom\n    (\n        select\n            c_custkey,\n            count(o_orderkey) as c_count\n        from\n            orders right outer join customer on\n                c_custkey = o_custkey\n                and o_comment not like '%special%requests%'\n        group by\n            c_custkey\n    ) as c_orders\ngroup by\n    c_count\norder by\n    custdist desc,\n    c_count desc;\n\n--Q14\n\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true, runtime_filter_mode=OFF) */\n    100.00 * sum(case\n        when p_type like 'PROMO%'\n            then l_extendedprice * (1 - l_discount)\n        else 0\n    end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\nfrom\n    part,\n    lineitem\nwhere\n    l_partkey = p_partkey\n    and l_shipdate >= date '1995-09-01'\n    and l_shipdate < date '1995-09-01' + interval '1' month;\n\n--Q15\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */\n    s_suppkey,\n    s_name,\n    s_address,\n    s_phone,\n    total_revenue\nfrom\n    supplier,\n    revenue0\nwhere\n    s_suppkey = supplier_no\n    and total_revenue = (\n        select\n            max(total_revenue)\n        from\n            revenue0\n    )\norder by\n    s_suppkey;\n\n--Q16\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */\n    p_brand,\n    p_type,\n    p_size,\n    count(distinct ps_suppkey) as supplier_cnt\nfrom\n    partsupp,\n    part\nwhere\n    p_partkey = ps_partkey\n    and p_brand <> 'Brand#45'\n    and p_type not like 'MEDIUM POLISHED%'\n    and p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n    and ps_suppkey not in (\n        select\n            s_suppkey\n        from\n            supplier\n        where\n            s_comment like '%Customer%Complaints%'\n    )\ngroup by\n    p_brand,\n    p_type,\n    p_size\norder by\n    supplier_cnt desc,\n    p_brand,\n    p_type,\n    p_size;\n\n--Q17\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=1, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */\n    sum(l_extendedprice) / 7.0 as avg_yearly\nfrom\n    lineitem join [broadcast]\n    part p1 on p1.p_partkey = l_partkey\nwhere\n    p1.p_brand = 'Brand#23'\n    and p1.p_container = 'MED BOX'\n    and l_quantity < (\n        select\n            0.2 * avg(l_quantity)\n        from\n            lineitem join [broadcast]\n            part p2 on p2.p_partkey = l_partkey\n        where\n            l_partkey = p1.p_partkey\n            and p2.p_brand = 'Brand#23'\n            and p2.p_container = 'MED BOX'\n    );\n\n--Q18\n\nselect /*+SET_VAR(exec_mem_limit=45899345920, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true) */\n    c_name,\n    c_custkey,\n    t3.o_orderkey,\n    t3.o_orderdate,\n    t3.o_totalprice,\n    sum(t3.l_quantity)\nfrom\ncustomer join\n(\n  select * from\n  lineitem join\n  (\n    select * from\n    orders left semi join\n    (\n      select\n          l_orderkey\n      from\n          lineitem\n      group by\n          l_orderkey having sum(l_quantity) > 300\n    ) t1\n    on o_orderkey = t1.l_orderkey\n  ) t2\n  on t2.o_orderkey = l_orderkey\n) t3\non c_custkey = t3.o_custkey\ngroup by\n    c_name,\n    c_custkey,\n    t3.o_orderkey,\n    t3.o_orderdate,\n    t3.o_totalprice\norder by\n    t3.o_totalprice desc,\n    t3.o_orderdate\nlimit 100;\n\n--Q19\n\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */\n    sum(l_extendedprice* (1 - l_discount)) as revenue\nfrom\n    lineitem,\n    part\nwhere\n    (\n        p_partkey = l_partkey\n        and p_brand = 'Brand#12'\n        and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')\n        and l_quantity >= 1 and l_quantity <= 1 + 10\n        and p_size between 1 and 5\n        and l_shipmode in ('AIR', 'AIR REG')\n        and l_shipinstruct = 'DELIVER IN PERSON'\n    )\n    or\n    (\n        p_partkey = l_partkey\n        and p_brand = 'Brand#23'\n        and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')\n        and l_quantity >= 10 and l_quantity <= 10 + 10\n        and p_size between 1 and 10\n        and l_shipmode in ('AIR', 'AIR REG')\n        and l_shipinstruct = 'DELIVER IN PERSON'\n    )\n    or\n    (\n        p_partkey = l_partkey\n        and p_brand = 'Brand#34'\n        and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')\n        and l_quantity >= 20 and l_quantity <= 20 + 10\n        and p_size between 1 and 15\n        and l_shipmode in ('AIR', 'AIR REG')\n        and l_shipinstruct = 'DELIVER IN PERSON'\n    );\n\n--Q20\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true, runtime_bloom_filter_size=551943) */\ns_name, s_address from\nsupplier left semi join\n(\n    select * from\n    (\n        select l_partkey,l_suppkey, 0.5 * sum(l_quantity) as l_q\n        from lineitem\n        where l_shipdate >= date '1994-01-01'\n            and l_shipdate < date '1994-01-01' + interval '1' year\n        group by l_partkey,l_suppkey\n    ) t2 join\n    (\n        select ps_partkey, ps_suppkey, ps_availqty\n        from partsupp left semi join part\n        on ps_partkey = p_partkey and p_name like 'forest%'\n    ) t1\n    on t2.l_partkey = t1.ps_partkey and t2.l_suppkey = t1.ps_suppkey\n    and t1.ps_availqty > t2.l_q\n) t3\non s_suppkey = t3.ps_suppkey\njoin nation\nwhere s_nationkey = n_nationkey\n    and n_name = 'CANADA'\norder by s_name;\n\n--Q21\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true) */\ns_name, count(*) as numwait\nfrom\n  lineitem l2 right semi join\n  (\n    select * from\n    lineitem l3 right anti join\n    (\n      select * from\n      orders join lineitem l1 on l1.l_orderkey = o_orderkey and o_orderstatus = 'F'\n      join\n      (\n        select * from\n        supplier join nation\n        where s_nationkey = n_nationkey\n          and n_name = 'SAUDI ARABIA'\n      ) t1\n      where t1.s_suppkey = l1.l_suppkey and l1.l_receiptdate > l1.l_commitdate\n    ) t2\n    on l3.l_orderkey = t2.l_orderkey and l3.l_suppkey <> t2.l_suppkey  and l3.l_receiptdate > l3.l_commitdate\n  ) t3\n  on l2.l_orderkey = t3.l_orderkey and l2.l_suppkey <> t3.l_suppkey \n\ngroup by\n    t3.s_name\norder by\n    numwait desc,\n    t3.s_name\nlimit 100;\n\n--Q22\n\nwith tmp as (select\n                    avg(c_acctbal) as av\n                from\n                    customer\n                where\n                    c_acctbal > 0.00\n                    and substring(c_phone, 1, 2) in\n                        ('13', '31', '23', '29', '30', '18', '17'))\n\nselect /*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4,runtime_bloom_filter_size=4194304) */\n    cntrycode,\n    count(*) as numcust,\n    sum(c_acctbal) as totacctbal\nfrom\n    (\n	select\n            substring(c_phone, 1, 2) as cntrycode,\n            c_acctbal\n        from\n             orders right anti join customer c on  o_custkey = c.c_custkey join tmp on c.c_acctbal > tmp.av\n        where\n            substring(c_phone, 1, 2) in\n                ('13', '31', '23', '29', '30', '18', '17')\n    ) as custsale\ngroup by\n    cntrycode\norder by\n    cntrycode;\n"})})]})}function _(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},321982:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/tpch-2048da37571ef8b1d4b0a49c3fba44ca.png"},250065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return a}});var r=t(667294);let s={},i=r.createContext(s);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},927334:function(e){e.exports=JSON.parse('{"permalink":"/blog/tpch","source":"@site/blog/tpch.md","title":"Apache Doris 1.2 TPC-H performance test report","description":"On 22 queries on the TPC-H standard test data set, we conducted a comparison test based on Apache Doris 1.2.0-rc01, Apache Doris 1.1.3 and Apache Doris 0.15.0 RC04 versions. Compared with Apache Doris 1.1.3, the overall performance of Apache Doris 1.2.0-rc01 has been improved by nearly 3 times, and by nearly 11 times compared with Apache Doris 0.15.0 RC04.","date":"2022-11-22T00:00:00.000Z","tags":[{"inline":true,"label":"Tech Sharing","permalink":"/blog/tags/tech-sharing"}],"hasTruncateMarker":false,"authors":[{"name":"Apache Doris","key":null,"page":null}],"frontMatter":{"title":"Apache Doris 1.2 TPC-H performance test report","description":"On 22 queries on the TPC-H standard test data set, we conducted a comparison test based on Apache Doris 1.2.0-rc01, Apache Doris 1.1.3 and Apache Doris 0.15.0 RC04 versions. Compared with Apache Doris 1.1.3, the overall performance of Apache Doris 1.2.0-rc01 has been improved by nearly 3 times, and by nearly 11 times compared with Apache Doris 0.15.0 RC04.","date":"2022-11-22","author":"Apache Doris","tags":["Tech Sharing"],"image":"/images/tech-sharing.png"},"unlisted":false,"prevItem":{"title":"Apache Doris 1.2 star-schema-benchmark performance test report","permalink":"/blog/ssb"},"nextItem":{"title":"Apache Doris announced the official release of version 1.1.4","permalink":"/blog/release-note-1.1.4"}}')}}]);