"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["529179"],{536187:function(e,n,s){s.r(n),s.d(n,{default:()=>A,frontMatter:()=>a,metadata:()=>r,assets:()=>t,toc:()=>o,contentTitle:()=>c});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/arrays-overlap","title":"ARRAYS_OVERLAP","description":"Function","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/arrays-overlap.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/arrays-overlap","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/arrays-overlap","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAYS_OVERLAP","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_ZIP","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-zip"},"next":{"title":"COUNTEQUAL","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/countequal"}}'),l=s("785893"),i=s("250065");let a={title:"ARRAYS_OVERLAP",language:"en"},c=void 0,t={},o=[{value:"Function",id:"function",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Notes",id:"usage-notes",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"function",children:"Function"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ARRAYS_OVERLAP"})," is used to \u25CA whether two arrays have at least one common element. Returns ",(0,l.jsx)(n.code,{children:"true"})," if they do, otherwise returns ",(0,l.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:"ARRAYS_OVERLAP(arr1, arr2)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"arr1"}),": The first array, type ",(0,l.jsx)(n.code,{children:"ARRAY<T>"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"arr2"}),": The second array, type ",(0,l.jsx)(n.code,{children:"ARRAY<T>"}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The element type ",(0,l.jsx)(n.code,{children:"T"})," of both arrays must be the same or implicitly convertible to each other."]}),"\n",(0,l.jsxs)(n.li,{children:["The element type ",(0,l.jsx)(n.code,{children:"T"})," can be numeric, string, date/time, or IP type."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"BOOLEAN"})," type:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["If the two arrays have an intersection, returns ",(0,l.jsx)(n.code,{children:"true"}),";"]}),"\n",(0,l.jsxs)(n.li,{children:["If they have no intersection, returns ",(0,l.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Comparison is done using element equality (",(0,l.jsx)(n.code,{children:"="})," operator)"]}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"NULL"})," and ",(0,l.jsx)(n.code,{children:"NULL"})," are considered equal in this function"]})," (see example)."]}),"\n",(0,l.jsxs)(n.li,{children:["You can specify ",(0,l.jsx)(n.strong,{children:"an inverted index in the table creation statement to accelerate execution"})," (see example).\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"When the function is used as a predicate condition, the inverted index will speed up execution."}),"\n",(0,l.jsx)(n.li,{children:"When the function is used in the query result, the inverted index will not speed up execution."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Commonly used in data cleaning, tag matching, and user behavior intersection scenarios."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Simple Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:"SELECT ARRAYS_OVERLAP(ARRAY('hello', 'aloha'), ARRAY('hello', 'hi', 'hey'));\n+----------------------------------------------------------------------+\n| ARRAYS_OVERLAP(ARRAY('hello', 'aloha'), ARRAY('hello', 'hi', 'hey')) |\n+----------------------------------------------------------------------+\n|                                                                    1 |\n+----------------------------------------------------------------------+\n\nSELECT ARRAYS_OVERLAP(ARRAY('Pinnacle', 'aloha'), ARRAY('hi', 'hey'));\n+----------------------------------------------------------------+\n| ARRAYS_OVERLAP(ARRAY('Pinnacle', 'aloha'), ARRAY('hi', 'hey')) |\n+----------------------------------------------------------------+\n|                                                              0 |\n+----------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Invalid parameter type: when unsupported types are passed in, returns ",(0,l.jsx)(n.code,{children:"INVALID_ARGUMENT"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:"-- [INVALID_ARGUMENT] execute failed, unsupported types for function arrays_overlap\nSELECT ARRAYS_OVERLAP(ARRAY(ARRAY('hello', 'aloha'), ARRAY('hi', 'hey')), ARRAY(ARRAY('hello', 'hi', 'hey'), ARRAY('aloha', 'hi')));\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If the input ",(0,l.jsx)(n.code,{children:"ARRAY"})," is ",(0,l.jsx)(n.code,{children:"NULL"}),", the return value is ",(0,l.jsx)(n.code,{children:"NULL"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:"SELECT ARRAYS_OVERLAP(ARRAY('HELLO', 'ALOHA'), NULL);\n+-----------------------------------------------+\n| ARRAYS_OVERLAP(ARRAY('HELLO', 'ALOHA'), NULL) |\n+-----------------------------------------------+\n|                                          NULL |\n+-----------------------------------------------+\n\nSELECT ARRAYS_OVERLAP(NULL, NULL);\n+----------------------------+\n| ARRAYS_OVERLAP(NULL, NULL) |\n+----------------------------+\n|                        NULL |\n+----------------------------+\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["When the input ",(0,l.jsx)(n.code,{children:"ARRAY"})," contains ",(0,l.jsx)(n.code,{children:"NULL"}),", ",(0,l.jsx)(n.code,{children:"NULL"})," and ",(0,l.jsx)(n.code,{children:"NULL"})," are considered equal"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:" SELECT ARRAYS_OVERLAP(ARRAY('HELLO', 'ALOHA'), ARRAY('HELLO', NULL));\n +---------------------------------------------------------------+\n | ARRAYS_OVERLAP(ARRAY('HELLO', 'ALOHA'), ARRAY('HELLO', NULL)) |\n +---------------------------------------------------------------+\n |                                                             1 |\n +---------------------------------------------------------------+\n\n SELECT ARRAYS_OVERLAP(ARRAY('PICKLE', 'ALOHA'), ARRAY('HELLO', NULL));\n +----------------------------------------------------------------+\n | ARRAYS_OVERLAP(ARRAY('PICKLE', 'ALOHA'), ARRAY('HELLO', NULL)) |\n +----------------------------------------------------------------+\n |                                                             0  |\n +----------------------------------------------------------------+\n\n SELECT ARRAYS_OVERLAP(ARRAY(NULL), ARRAY('HELLO', NULL));\n +---------------------------------------------------+\n | ARRAYS_OVERLAP(ARRAY(NULL), ARRAY('HELLO', NULL)) |\n +---------------------------------------------------+\n |                                                 1 |\n +---------------------------------------------------+\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Using inverted index to accelerate query"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:"-- Create table with inverted index\nCREATE TABLE IF NOT EXISTS arrays_overlap_table (\n    id INT,\n    array_column ARRAY<STRING>,\n    INDEX idx_array_column (array_column) USING INVERTED -- only non-tokenized inverted indexes are allowed\n) ENGINE=OLAP\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 1\nPROPERTIES (\n\"replication_num\" = \"1\"\n);\n\n-- Insert two rows\nINSERT INTO arrays_overlap_table (id, array_column) VALUES (1, ARRAY('HELLO', 'ALOHA')), (2, ARRAY('NO', 'WORLD'));\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"When the function is used as a predicate condition, the inverted index will accelerate execution"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:"SELECT * from arrays_overlap_table WHERE ARRAYS_OVERLAP(array_column, ARRAY('HELLO', 'PICKLE')); \n+------+--------------------+\n| id   | array_column       |\n+------+--------------------+\n|    1 | [\"HELLO\", \"ALOHA\"] |\n+------+--------------------+\n\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"When the function is used in the query result, the inverted index will not accelerate execution"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-SQL",children:"SELECT ARRAYS_OVERLAP(array_column, ARRAY('HELLO', 'PICKLE')) FROM arrays_overlap_table;\n+--------------------------------------------------------+\n| ARRAYS_OVERLAP(array_column, ARRAY('HELLO', 'PICKLE')) |\n+--------------------------------------------------------+\n|                                                      1 |\n|                                                      0 |\n+--------------------------------------------------------+\n"})}),"\n"]}),"\n"]})]})}function A(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return c},a:function(){return a}});var r=s(667294);let l={},i=r.createContext(l);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);