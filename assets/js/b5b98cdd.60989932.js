"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["699813"],{246173:function(n,e,t){t.r(e),t.d(e,{default:()=>u,frontMatter:()=>l,metadata:()=>s,assets:()=>c,toc:()=>o,contentTitle:()=>a});var s=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-num-to-string","title":"IPV4_NUM_TO_STRING","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-num-to-string.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/ip-functions","slug":"/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-num-to-string","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-num-to-string","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"IPV4_NUM_TO_STRING","language":"en"},"sidebar":"docs","previous":{"title":"IPV4_CIDR_TO_RANGE","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-cidr-to-range"},"next":{"title":"IPV4_STRING_TO_NUM","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-string-to-num"}}'),i=t("785893"),r=t("250065");let l={title:"IPV4_NUM_TO_STRING",language:"en"},a=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Alias",id:"alias",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function d(n){let e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(e.p,{children:"Takes a Int16, Int32, Int64 number. Interprets it as an IPv4 address in big endian. Returns a string containing the corresponding IPv4 address in the format A.B.C.D (dot-separated numbers in decimal form)"}),"\n",(0,i.jsx)(e.h2,{id:"alias",children:"Alias"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"INET_NTOA"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"IPV4_NUM_TO_STRING(<ipv4_num>)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Parameter"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsx)(e.tbody,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"<ipv4_num>"})}),(0,i.jsx)(e.td,{children:"Int type converted from ipv4"})]})})]}),"\n",(0,i.jsx)(e.h2,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)(e.p,{children:"Returns a string containing the corresponding IPv4 address in the format A.B.C.D (dot-separated numbers in decimal form), special case:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Will return ",(0,i.jsx)(e.code,{children:"NULL"})," if the input parameter is negative or larger than ",(0,i.jsx)(e.code,{children:"4294967295"}),"(num value of ",(0,i.jsx)(e.code,{children:"'255.255.255.255'"}),")"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"select ipv4_num_to_string(3232235521);\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-text",children:"+--------------------------------+\n| ipv4_num_to_string(3232235521) |\n+--------------------------------+\n| 192.168.0.1                    |\n+--------------------------------+\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"select num,ipv4_num_to_string(num) from ipv4_bi;\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-text",children:"+------------+---------------------------+\n| num        | ipv4_num_to_string(`num`) |\n+------------+---------------------------+\n|         -1 | NULL                      |\n|          0 | 0.0.0.0                   |\n| 2130706433 | 127.0.0.1                 |\n| 4294967295 | 255.255.255.255           |\n| 4294967296 | NULL                      |\n+------------+---------------------------+\n"})})]})}function u(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},250065:function(n,e,t){t.d(e,{Z:function(){return a},a:function(){return l}});var s=t(667294);let i={},r=s.createContext(i);function l(n){let e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);