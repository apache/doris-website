"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["103221"],{843225:function(e,t,a){a.r(t),a.d(t,{default:()=>p,frontMatter:()=>i,metadata:()=>n,assets:()=>r,toc:()=>d,contentTitle:()=>l});var n=JSON.parse('{"id":"data-operate/import/complex-types/json","title":"JSON","description":"The JSON data type stores JSON data efficiently in a binary format and allows access to its internal fields through JSON functions.","source":"@site/docs/data-operate/import/complex-types/json.md","sourceDirName":"data-operate/import/complex-types","slug":"/data-operate/import/complex-types/json","permalink":"/docs/dev/data-operate/import/complex-types/json","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"JSON","language":"en"},"sidebar":"docs","previous":{"title":"STRUCT","permalink":"/docs/dev/data-operate/import/complex-types/struct"},"next":{"title":"Bitmap","permalink":"/docs/dev/data-operate/import/complex-types/bitmap"}}'),s=a("785893"),o=a("250065");let i={title:"JSON",language:"en"},l=void 0,r={},d=[{value:"CSV format import",id:"csv-format-import",level:2},{value:"Step 1: Prepare the data",id:"step-1-prepare-the-data",level:3},{value:"Step 2: Create a table in the database",id:"step-2-create-a-table-in-the-database",level:3},{value:"Step 3: Load data",id:"step-3-load-data",level:3},{value:"Step 4: Check the imported data",id:"step-4-check-the-imported-data",level:3},{value:"JSON format import",id:"json-format-import",level:2},{value:"Step 1: Prepare the data",id:"step-1-prepare-the-data-1",level:3},{value:"Step 2: Create a table in the database",id:"step-2-create-a-table-in-the-database-1",level:3},{value:"Step 3: Load data",id:"step-3-load-data-1",level:3},{value:"Step 4: Check the imported data",id:"step-4-check-the-imported-data-1",level:3}];function c(e){let t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The JSON data type stores JSON data efficiently in a binary format and allows access to its internal fields through JSON functions."}),"\n",(0,s.jsx)(t.p,{children:"By default, it supports up to 1048576 bytes (1MB), and can be increased up to 2147483643 bytes (2GB). This can be adjusted via the string_type_length_soft_limit_bytes configuration."}),"\n",(0,s.jsx)(t.p,{children:"Compared to storing JSON strings in a regular STRING type, the JSON type has two main advantages:"}),"\n",(0,s.jsx)(t.p,{children:"JSON format validation during data insertion.\nMore efficient binary storage format, enabling faster access to JSON internal fields using functions like json_extract, compared to get_json_xx functions.\nNote: In version 1.2.x, the JSON type was named JSONB. To maintain compatibility with MySQL, it was renamed to JSON starting from version 2.0.0. Older tables can still use the previous name."}),"\n",(0,s.jsx)(t.h2,{id:"csv-format-import",children:"CSV format import"}),"\n",(0,s.jsx)(t.h3,{id:"step-1-prepare-the-data",children:"Step 1: Prepare the data"}),"\n",(0,s.jsxs)(t.p,{children:["Create the following csv file: ",(0,s.jsx)(t.code,{children:"test_json.csv"}),"\nThe separator is ",(0,s.jsx)(t.code,{children:"|"})," instead of comma to distinguish it from the comma in json."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'1|{"name": "tom", "age": 35}\n2|{"name": null, "age": 28}\n3|{"name": "michael", "age": null}\n4|{"name": null, "age": null}\n5|null\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-2-create-a-table-in-the-database",children:"Step 2: Create a table in the database"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:'CREATE TABLE json_test (\n    id          INT     NOT NULL,\n    c_json      JSON    NULL\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 1\nPROPERTIES (\n    "replication_allocation" = "tag.location.default: 1"\n);\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-3-load-data",children:"Step 3: Load data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'curl --location-trusted \\\n        -u "root":"" \\\n        -H "column_separator:|" \\\n        -H "columns: id, c_json" \\\n        -T "test_json.csv" \\\n        http://localhost:8040/api/testdb/json_test/_stream_load\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-4-check-the-imported-data",children:"Step 4: Check the imported data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:'SELECT * FROM json_test;\n+------+-------------------------------+\n| id   | c_json                        |\n+------+-------------------------------+\n|    1 | {"name":"tom","age":35}       |\n|    2 | {"name":null,"age":28}        |\n|    3 | {"name":"michael","age":null} |\n|    4 | {"name":null,"age":null}      |\n|    5 | null                          |\n+------+-------------------------------+\n5 rows in set (0.01 sec)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"json-format-import",children:"JSON format import"}),"\n",(0,s.jsx)(t.h3,{id:"step-1-prepare-the-data-1",children:"Step 1: Prepare the data"}),"\n",(0,s.jsxs)(t.p,{children:["Create the following JSON file, ",(0,s.jsx)(t.code,{children:"test_json.json"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'[\n    {"id": 1, "c_json": {"name": "tom", "age": 35}},\n    {"id": 2, "c_json": {"name": null, "age": 28}},\n    {"id": 3, "c_json": {"name": "michael", "age": null}},\n    {"id": 4, "c_json": {"name": null, "age": null}},\n    {"id": 5, "c_json": null}\n]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-2-create-a-table-in-the-database-1",children:"Step 2: Create a table in the database"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:'CREATE TABLE json_test (\n    id          INT     NOT NULL,\n    c_json      JSON    NULL\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 1\nPROPERTIES (\n    "replication_allocation" = "tag.location.default: 1"\n);\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-3-load-data-1",children:"Step 3: Load data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'curl --location-trusted \\\n        -u "root":"" \\\n        -H "format:json" \\\n        -H "columns: id, c_json" \\\n        -H "strip_outer_array:true" \\\n        -T "test_json.json" \\\n        http://localhost:8040/api/testdb/json_test/_stream_load\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-4-check-the-imported-data-1",children:"Step 4: Check the imported data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:'mysql> SELECT * FROM json_test;\n+------+-------------------------------+\n| id   | c_json                        |\n+------+-------------------------------+\n|    1 | {"name":"tom","age":35}       |\n|    2 | {"name":null,"age":28}        |\n|    3 | {"name":"michael","age":null} |\n|    4 | {"name":null,"age":null}      |\n|    5 | NULL                          |\n+------+-------------------------------+\n5 rows in set (0.01 sec)\n'})})]})}function p(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},250065:function(e,t,a){a.d(t,{Z:function(){return l},a:function(){return i}});var n=a(667294);let s={},o=n.createContext(s);function i(e){let t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);