"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["657158"],{870735:function(n,t,e){e.r(t),e.d(t,{default:()=>d,frontMatter:()=>l,metadata:()=>i,assets:()=>c,toc:()=>o,contentTitle:()=>r});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/bitmap-functions/to-bitmap","title":"TO_BITMAP","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/bitmap-functions/to-bitmap.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/bitmap-functions","slug":"/sql-manual/sql-functions/scalar-functions/bitmap-functions/to-bitmap","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitmap-functions/to-bitmap","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"TO_BITMAP","language":"en"},"sidebar":"docs","previous":{"title":"SUB_BITMAP","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitmap-functions/sub-bitmap"},"next":{"title":"HLL_CARDINALITY","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/hll-functions/hll-cardinality"}}'),a=e("785893"),s=e("250065");let l={title:"TO_BITMAP",language:"en"},r=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function p(n){let t={br:"br",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(t.p,{children:"Converts an unsigned bigint to a Bitmap."}),"\n",(0,a.jsx)(t.p,{children:"The input is an unsigned bigint with a value in the range 0 to 18446744073709551615, and the output is a Bitmap containing that element."}),"\n",(0,a.jsx)(t.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"TO_BITMAP(<expr>)\n"})}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Parameter"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"<expr>"})}),(0,a.jsx)(t.td,{children:"An unsigned bigint or numbers represented as strings with a range of 0 to 18446744073709551615"})]})})]}),"\n",(0,a.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsxs)(t.p,{children:["A Bitmap containing the corresponding bigint.",(0,a.jsx)(t.br,{}),"\nReturns empty bitmap if the input value is not within the specified range."]}),"\n",(0,a.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(t.p,{children:"To convert an integer to a Bitmap and count the number of elements in the Bitmap:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"select bitmap_to_string(to_bitmap(10)),bitmap_count(to_bitmap(10));\n"})}),"\n",(0,a.jsx)(t.p,{children:"The result will be:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"+---------------------------------+-----------------------------+\n| bitmap_to_string(to_bitmap(10)) | bitmap_count(to_bitmap(10)) |\n+---------------------------------+-----------------------------+\n| 10                              |                           1 |\n+---------------------------------+-----------------------------+\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:'select bitmap_to_string(to_bitmap("123")),bitmap_count(to_bitmap("123"));\n'})}),"\n",(0,a.jsx)(t.p,{children:"The result will be:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:'+------------------------------------+--------------------------------+\n| bitmap_to_string(to_bitmap("123")) | bitmap_count(to_bitmap("123")) |\n+------------------------------------+--------------------------------+\n| 123                                |                              1 |\n+------------------------------------+--------------------------------+\n'})}),"\n",(0,a.jsx)(t.p,{children:"To convert a negative integer to a Bitmap, which is outside the valid range, and convert it to a string:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"select bitmap_to_string(to_bitmap(-1)),bitmap_count(to_bitmap(-1));\n"})}),"\n",(0,a.jsx)(t.p,{children:"The result will be:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"+---------------------------------+-----------------------------+\n| bitmap_to_string(to_bitmap(-1)) | bitmap_count(to_bitmap(-1)) |\n+---------------------------------+-----------------------------+\n|                                 |                           0 |\n+---------------------------------+-----------------------------+\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:'select bitmap_to_string(to_bitmap("123ABC")),bitmap_count(to_bitmap("123ABC"));\n'})}),"\n",(0,a.jsx)(t.p,{children:"The result will be:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:'+---------------------------------------+-----------------------------------+\n| bitmap_to_string(to_bitmap("123ABC")) | bitmap_count(to_bitmap("123ABC")) |\n+---------------------------------------+-----------------------------------+\n|                                       |                                 0 |\n+---------------------------------------+-----------------------------------+\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"select bitmap_to_string(to_bitmap(NULL)),bitmap_count(to_bitmap(NULL));\n"})}),"\n",(0,a.jsx)(t.p,{children:"The result will be:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"+-----------------------------------+-------------------------------+\n| bitmap_to_string(to_bitmap(NULL)) | bitmap_count(to_bitmap(NULL)) |\n+-----------------------------------+-------------------------------+\n|                                   |                             0 |\n+-----------------------------------+-------------------------------+\n"})})]})}function d(n={}){let{wrapper:t}={...(0,s.a)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},250065:function(n,t,e){e.d(t,{Z:function(){return r},a:function(){return l}});var i=e(667294);let a={},s=i.createContext(a);function l(n){let t=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:l(n.components),i.createElement(s.Provider,{value:t},n.children)}}}]);