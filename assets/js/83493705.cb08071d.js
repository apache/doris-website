"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["579853"],{324548:function(e,n,s){s.r(n),s.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>t,assets:()=>c,toc:()=>o,contentTitle:()=>a});var t=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/spatial-functions/st-astext","title":"ST_ASTEXT","description":"Description","source":"@site/versioned_docs/version-3.x/sql-manual/sql-functions/scalar-functions/spatial-functions/st-astext.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/spatial-functions","slug":"/sql-manual/sql-functions/scalar-functions/spatial-functions/st-astext","permalink":"/docs/3.x/sql-manual/sql-functions/scalar-functions/spatial-functions/st-astext","draft":false,"unlisted":false,"tags":[],"version":"3.x","frontMatter":{"title":"ST_ASTEXT","language":"en"},"sidebar":"docs","previous":{"title":"ST_ASBINARY","permalink":"/docs/3.x/sql-manual/sql-functions/scalar-functions/spatial-functions/st-asbinary"},"next":{"title":"ST_AZIMUTH","permalink":"/docs/3.x/sql-manual/sql-functions/scalar-functions/spatial-functions/st-azimuth"}}'),l=s("785893"),i=s("250065");let r={title:"ST_ASTEXT",language:"en"},a=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Aliases",id:"aliases",level:2},{value:"Sytax",id:"sytax",level:2},{value:"Return value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function d(e){let n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(n.p,{children:"Converts a geometric object into its WKT (Well-Known Text) text representation. WKT is a text-based format for representing geospatial data, widely used in Geographic Information Systems (GIS)."}),"\n",(0,l.jsx)(n.p,{children:"Currently supported geometric types include: Point, LineString, Polygon, MultiPolygon, Circle."}),"\n",(0,l.jsx)(n.h2,{id:"aliases",children:"Aliases"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ST_ASWKT"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"sytax",children:"Sytax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"ST_ASTEXT( <geo>)\n"})}),"\n",(0,l.jsx)(n.h1,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Parameter"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"<geo>"})}),(0,l.jsx)(n.td,{children:"The geometric object to be converted to WKT format."})]})})]}),"\n",(0,l.jsx)(n.h2,{id:"return-value",children:"Return value"}),"\n",(0,l.jsx)(n.p,{children:"Returns the WKT text representation of the geometric object."}),"\n",(0,l.jsx)(n.p,{children:"ST_ASTEXT has the following edge cases:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"If the input parameter is NULL, returns NULL."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.p,{children:"Point object conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT ST_AsText(ST_Point(24.7, 56.7));\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+---------------------------------+\n| st_astext(st_point(24.7, 56.7)) |\n+---------------------------------+\n| POINT (24.7 56.7)               |\n+---------------------------------+\n"})}),"\n",(0,l.jsx)(n.p,{children:"LineString object conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'mysql> SELECT ST_AsText(ST_GeometryFromText("LINESTRING (1 1, 2 2)"));\n+---------------------------------------------------------+\n| ST_AsText(ST_GeometryFromText("LINESTRING (1 1, 2 2)")) |\n+---------------------------------------------------------+\n| LINESTRING (1 1, 2 2)                                   |\n+---------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.p,{children:"Polygon object conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'mysql> SELECT ST_AsText(ST_Polygon("POLYGON ((114.104486 22.547119,114.093758 22.547753,114.096504 22.532057,114.104229 22.539826,114.106203 22.542680,114.104486 22.547119))"));\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ST_AsText(ST_Polygon("POLYGON ((114.104486 22.547119,114.093758 22.547753,114.096504 22.532057,114.104229 22.539826,114.106203 22.542680,114.104486 22.547119))")) |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| POLYGON ((114.104486 22.547119, 114.093758 22.547753, 114.096504 22.532057, 114.104229 22.539826, 114.106203 22.54268, 114.104486 22.547119))                      |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.p,{children:"MultiPolygon object conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'mysql> SELECT ST_AsText(ST_GeometryFromText("MULTIPOLYGON (((0 0, 1 0, 1 1, 0 1, 0 0)), ((2 2, 3 2, 3 3, 2 3, 2 2)))"));\n+-----------------------------------------------------------------------------------------------------------+\n| ST_AsText(ST_GeometryFromText("MULTIPOLYGON (((0 0, 1 0, 1 1, 0 1, 0 0)), ((2 2, 3 2, 3 3, 2 3, 2 2)))")) |\n+-----------------------------------------------------------------------------------------------------------+\n| MULTIPOLYGON (((0 0, 1 0, 1 1, 0 1, 0 0)), ((2 2, 3 2, 3 3, 2 3, 2 2)))                                   |\n+-----------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.p,{children:"Circle object conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT ST_AsText(ST_Circle(116.39748, 39.90882, 0.5));\n+------------------------------------------------+\n| ST_AsText(ST_Circle(116.39748, 39.90882, 0.5)) |\n+------------------------------------------------+\n| CIRCLE ((116.39748 39.90882), 0.5)             |\n+------------------------------------------------+\n"})}),"\n",(0,l.jsx)(n.p,{children:"NULL input"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT ST_AsText(NULL);\n+-----------------+\n| ST_AsText(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+\n"})})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return r}});var t=s(667294);let l={},i=t.createContext(l);function r(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);