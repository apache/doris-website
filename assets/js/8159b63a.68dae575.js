"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["379507"],{173500:function(e,n,l){l.r(n),l.d(n,{default:()=>u,frontMatter:()=>a,metadata:()=>s,assets:()=>i,toc:()=>c,contentTitle:()=>o});var s=JSON.parse('{"id":"sql-manual/sql-functions/table-functions/explode-json-array-int-outer","title":"EXPLODE_JSON_ARRAY_INT_OUTER","description":"Description","source":"@site/docs/sql-manual/sql-functions/table-functions/explode-json-array-int-outer.md","sourceDirName":"sql-manual/sql-functions/table-functions","slug":"/sql-manual/sql-functions/table-functions/explode-json-array-int-outer","permalink":"/docs/dev/sql-manual/sql-functions/table-functions/explode-json-array-int-outer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"EXPLODE_JSON_ARRAY_INT_OUTER","language":"en"},"sidebar":"docs","previous":{"title":"EXPLODE_JSON_ARRAY_INT","permalink":"/docs/dev/sql-manual/sql-functions/table-functions/explode-json-array-int"},"next":{"title":"EXPLODE_JSON_ARRAY_JSON","permalink":"/docs/dev/sql-manual/sql-functions/table-functions/explode-json-array-json"}}'),r=l("785893"),t=l("250065");let a={title:"EXPLODE_JSON_ARRAY_INT_OUTER",language:"en"},o=void 0,i={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"explode_json_array_int_outer"})," table function accepts a JSON array. Its implementation logic is to convert the JSON array to an array type and then call the ",(0,r.jsx)(n.code,{children:"explode"})," function for processing. The behavior is equivalent to: ",(0,r.jsx)(n.code,{children:"explode_outer(cast(<json_array> as Array<BIGINT>))"}),".\nIt should be used together with ",(0,r.jsx)(n.a,{href:"/docs/dev/query-data/lateral-view",children:(0,r.jsx)(n.code,{children:"LATERAL VIEW"})}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXPLODE_JSON_ARRAY_INT_OUTER(<json>)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<json>"})," JSON type, the content should be an array."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns a single-column, multi-row result composed of all elements in ",(0,r.jsx)(n.code,{children:"<json>"}),". The column type is ",(0,r.jsx)(n.code,{children:"Nullable<BIGINT>"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"<json>"})," is NULL or an empty array (number of elements is 0), return one row containing NULL."]}),"\n",(0,r.jsxs)(n.li,{children:["If the elements in the JSON array are not of INT type, the function will try to convert them to INT. Elements that cannot be converted to INT will be converted to NULL. For type conversion rules, please refer to ",(0,r.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/json-conversion",children:"JSON Type Conversion"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ol,{start:"0",children:["\n",(0,r.jsxs)(n.li,{children:["Prepare data\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'create table example(\n    k1 int\n) properties(\n    "replication_num" = "1"\n);\n\ninsert into example values(1);\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Regular parameters\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select * from example lateral view explode_json_array_int_outer('[4, 5, 5.23, null]') t2 as c;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+\n| k1   | c    |\n+------+------+\n|    1 |    4 |\n|    1 |    5 |\n|    1 |    5 |\n|    1 | NULL |\n+------+------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Non-INT type\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from example \n    lateral view \n    explode_json_array_int_outer(\'["abc", "123.4", 9223372036854775808.0, 9223372036854775295.999999]\') t2 as c;\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+---------------------+\n| k1   | c                   |\n+------+---------------------+\n|    1 |                NULL |\n|    1 |                 123 |\n|    1 |                NULL |\n|    1 | 9223372036854774784 |\n+------+---------------------+\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"9223372036854775808.0"})," exceeds the valid range of ",(0,r.jsx)(n.code,{children:"BIGINT"}),', so it will be converted to NULL.\nThe string "123.4" is converted to 123.\nThe string "abc" cannot be converted to INT, so the result is NULL.']}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Empty array\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select * from example lateral view explode_json_array_int_outer('[]') t2 as c;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+\n| k1   | c    |\n+------+------+\n|    1 | NULL |\n+------+------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["NULL parameter\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select * from example lateral view explode_json_array_int_outer(NULL) t2 as c;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+\n| k1   | c    |\n+------+------+\n|    1 | NULL |\n+------+------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Non-array parameter\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select * from example lateral view explode_json_array_int_outer('{}') t2 as c;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+\n| k1   | c    |\n+------+------+\n|    1 | NULL |\n+------+------+\n"})}),"\n"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,n,l){l.d(n,{Z:function(){return o},a:function(){return a}});var s=l(667294);let r={},t=s.createContext(r);function a(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);