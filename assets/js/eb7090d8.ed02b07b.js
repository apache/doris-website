"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["811352"],{560027:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>i,assets:()=>c,toc:()=>l,contentTitle:()=>a});var i=JSON.parse('{"id":"install/deploy-on-kubernetes/separating-storage-compute/config-ms","title":"Config MetaService","description":"MetaService is the metadata management component for Doris decoupled storage and compute clusters. It is not exposed externally and is used solely for internal purposes. MetaService is a stateless service that is typically deployed in a primary-secondary configuration. The following document describes how to configure MetaService within the DorisDisaggregatedCluster resource.","source":"@site/docs/install/deploy-on-kubernetes/separating-storage-compute/config-ms.md","sourceDirName":"install/deploy-on-kubernetes/separating-storage-compute","slug":"/install/deploy-on-kubernetes/separating-storage-compute/config-ms","permalink":"/docs/dev/install/deploy-on-kubernetes/separating-storage-compute/config-ms","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Config MetaService","language":"en"},"sidebar":"docs","previous":{"title":"Config Cluster","permalink":"/docs/dev/install/deploy-on-kubernetes/separating-storage-compute/config-cluster"},"next":{"title":"Config FE","permalink":"/docs/dev/install/deploy-on-kubernetes/separating-storage-compute/config-fe"}}'),o=t("785893"),s=t("250065");let r={title:"Config MetaService",language:"en"},a=void 0,c={},l=[{value:"Configuring FoundationDB Access",id:"configuring-foundationdb-access",level:2},{value:"Configuring the Image",id:"configuring-the-image",level:2},{value:"Configuring Resources",id:"configuring-resources",level:2},{value:"Customizing Startup Configuration",id:"customizing-startup-configuration",level:2},{value:"Configuring Service Probe Timeouts",id:"configuring-service-probe-timeouts",level:2},{value:"Liveness Probe Timeout Configuration",id:"liveness-probe-timeout-configuration",level:3},{value:"Startup Timeout Configuration",id:"startup-timeout-configuration",level:3}];function d(e){let n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["MetaService is the metadata management component for Doris decoupled storage and compute clusters. It is not exposed externally and is used solely for internal purposes. MetaService is a stateless service that is typically deployed in a primary-secondary configuration. The following document describes how to configure MetaService within the ",(0,o.jsx)(n.code,{children:"DorisDisaggregatedCluster"})," resource."]}),"\n",(0,o.jsx)(n.h2,{id:"configuring-foundationdb-access",children:"Configuring FoundationDB Access"}),"\n",(0,o.jsx)(n.p,{children:"The method for configuring FoundationDB access varies depending on the deployment environment:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Using a ConfigMap to Configure FoundationDB Access",(0,o.jsx)(n.br,{}),"\nIf the FoundationDB cluster is deployed with the fdb-kubernetes-operator, you can directly use the ConfigMap generated by the operator that contains the accessible FoundationDB addresses. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    fdb:\n      configMapNamespaceName:\n        name: ${foundationdbConfigMapName}\n        namespace: ${namespace}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here,",(0,o.jsx)(n.code,{children:"${foundationdbConfigMapName}"})," is the name of the ConfigMap, and ",(0,o.jsx)(n.code,{children:"${namespace}"}),' is the namespace in which FoundationDB is deployed. For details on locating the ConfigMap generated by the fdb-kubernetes-operator, please refer to the "Deploying FoundationDB" section in ',(0,o.jsx)(n.a,{href:"/docs/dev/install/deploy-on-kubernetes/separating-storage-compute/install-fdb#retrieve-the-configmap-containing-foundationdb-access-information",children:"Obtain the ConfigMap containing FoundationDB access information"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Directly Configuring the FoundationDB Access Address",(0,o.jsx)(n.br,{}),"\nIf FoundationDB is deployed directly on physical machines, you can specify the access address in the MetaService configuration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    fdb:\n      address: ${fdbEndpoint}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"${fdbEndpoint}"})," represents the accessible address information for FoundationDB. For physical machine deployments, please refer to the section on ",(0,o.jsx)(n.a,{href:"/docs/dev/compute-storage-decoupled/compilation-and-deployment#31-configuration",children:"MetaService deployment for obtaining fdb_cluster details"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuring-the-image",children:"Configuring the Image"}),"\n",(0,o.jsx)(n.p,{children:"In the deployment sample, the MetaService image may not be the latest version. When customizing the image, please configure it as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    image: ${msImage}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"${msImage}"})," is the image you wish to deploy for MetaService. It is recommended to use the official ",(0,o.jsx)(n.a,{href:"https://hub.docker.com/r/apache/doris",children:"MetaService image"}),' provided by Doris (the image tag should include the prefix "ms").']}),"\n",(0,o.jsx)(n.h2,{id:"configuring-resources",children:"Configuring Resources"}),"\n",(0,o.jsx)(n.p,{children:"You can allocate appropriate computing resources for MetaService using Kubernetes resource limits. For example, to limit MetaService to 4 CPU cores and 4Gi of memory, configure as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    requests:\n      cpu: 4\n      memory: 4Gi\n    limits:\n      cpu: 4\n      memory: 4Gi\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Update this configuration in the corresponding ",(0,o.jsx)(n.a,{href:"/docs/dev/install/deploy-on-kubernetes/separating-storage-compute/install-doris-cluster#step-3-deploy-the-compute-storage-decoupled-cluster",children:"DorisDisaggregatedCluster resource"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"customizing-startup-configuration",children:"Customizing Startup Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Doris-Operator uses a ConfigMap to mount the startup configuration file for components. The operator automatically populates the MetaService startup configuration with the relevant FoundationDB information, so you do not need to include these details when customizing the configuration."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Create a Custom ConfigMap\nCreate a ConfigMap containing the startup configuration. The startup configuration file must be named doris_cloud.conf. For example:\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: doris-metaservice\n  namespace: default\ndata:\n  doris_cloud.conf: |\n    # // meta_service\n    brpc_listen_port = 5000\n    brpc_num_threads = -1\n    brpc_idle_timeout_sec = 30\n    http_token = greedisgood9999\n\n    # // doris txn config\n    label_keep_max_second = 259200\n    expired_txn_scan_key_nums = 1000\n\n    # // logging\n    log_dir = ./log/\n    # info, warn, error\n    log_level = info\n    log_size_mb = 1024\n    log_filenum_quota = 10\n    log_immediate_flush = false\n    # log_verbose_modules = *\n\n    # // max stage num\n    max_num_stages = 40\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Mount the Custom Startup Configuration\nIn the DorisDisaggregatedCluster resource, mount the ConfigMap via ",(0,o.jsx)(n.code,{children:"metaService.configMaps"})," as follows:\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    configMaps:\n    - name: ${msConfigMapName}\n      mountPath: /etc/doris\n"})}),"\nHere, ",(0,o.jsx)(n.code,{children:"${msConfigMapName}"})," is the name of the ConfigMap containing the MetaService startup configuration. Update this configuration in the ",(0,o.jsx)(n.a,{href:"/docs/dev/install/deploy-on-kubernetes/separating-storage-compute/install-doris-cluster#step-3-deploy-the-compute-storage-decoupled-cluster",children:"DorisDisaggregatedCluster resource"})," that you intend to deploy. The mount path must be ",(0,o.jsx)(n.code,{children:"/etc/doris"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"Tip",type:"tip",children:(0,o.jsx)(n.p,{children:"When customizing the MetaService startup configuration in a Kubernetes deployment, do not include the fdb_cluster configuration; Doris Operator will handle that automatically."})}),"\n",(0,o.jsx)(n.h2,{id:"configuring-service-probe-timeouts",children:"Configuring Service Probe Timeouts"}),"\n",(0,o.jsx)(n.p,{children:"Doris Operator provides two timeout parameters for decoupled storage and compute services: liveness probe timeout and startup timeout."}),"\n",(0,o.jsx)(n.h3,{id:"liveness-probe-timeout-configuration",children:"Liveness Probe Timeout Configuration"}),"\n",(0,o.jsx)(n.p,{children:"The liveness probe monitors the operational status of the service. If the probe fails beyond the specified threshold, the service will be forcibly restarted. The default timeout is 180 seconds. To set it to 30 seconds, use the following configuration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    liveTimeout: 30\n"})}),"\n",(0,o.jsx)(n.h3,{id:"startup-timeout-configuration",children:"Startup Timeout Configuration"}),"\n",(0,o.jsx)(n.p,{children:"The startup timeout addresses scenarios where the service takes too long to start. If the service startup time exceeds the specified threshold, the service will be forcibly restarted. The default startup timeout is 300 seconds. To set it to 120 seconds, use the following configuration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    startTimeout: 120\n"})})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var i=t(667294);let o={},s=i.createContext(o);function r(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);