"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["521949"],{158791:function(e,n,a){a.r(n),a.d(n,{default:()=>d,frontMatter:()=>i,metadata:()=>r,assets:()=>p,toc:()=>o,contentTitle:()=>t});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-apply","title":"ARRAY_APPLY","description":"array_apply","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-apply.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-apply","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-apply","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_APPLY","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array"},"next":{"title":"ARRAY_AVG","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-avg"}}'),s=a("785893"),l=a("250065");let i={title:"ARRAY_APPLY",language:"en"},t=void 0,p={},o=[{value:"array_apply",id:"array_apply",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Examples",id:"examples",level:3},{value:"Exception Examples",id:"exception-examples",level:3},{value:"Keywords",id:"keywords",level:3}];function c(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",version:"version",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"array_apply",children:"array_apply"}),"\n",(0,s.jsx)(n.version,{since:"1.2.3",children:"\n"}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Filters array elements using a specified binary operator and returns a new array containing elements that satisfy the condition. This is a simplified array filtering function that uses predefined operators instead of lambda expressions."}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"array_apply(arr, op, val)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"arr"}),"\uFF1AARRAY<T> type, the array to filter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"op"}),"\uFF1ASTRING type, the filtering condition operator, must be a constant value. Supported operators: ",(0,s.jsx)(n.code,{children:"="}),", ",(0,s.jsx)(n.code,{children:"!="}),", ",(0,s.jsx)(n.code,{children:">"}),", ",(0,s.jsx)(n.code,{children:">="}),", ",(0,s.jsx)(n.code,{children:"<"}),", ",(0,s.jsx)(n.code,{children:"<="})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"val"}),"\uFF1AT type, the filtering condition value, must be a constant value"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"T supported types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,s.jsx)(n.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,s.jsx)(n.li,{children:"Boolean type: BOOLEAN"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(n.p,{children:"Return type: ARRAY<T>"}),"\n",(0,s.jsx)(n.p,{children:"Return value meaning:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a new array containing all elements that satisfy the filtering condition"}),"\n",(0,s.jsx)(n.li,{children:"NULL: if the input array is NULL or the condition value is NULL"}),"\n",(0,s.jsx)(n.li,{children:"Empty array: if no elements satisfy the condition"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Usage notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The operator and condition value must be constants, not column names or expressions"}),"\n",(0,s.jsx)(n.li,{children:"Limited supported types, mainly numeric, date, and boolean types"}),"\n",(0,s.jsx)(n.li,{children:"Empty array returns empty array, NULL array returns NULL"}),"\n",(0,s.jsx)(n.li,{children:"For null values in array elements: null elements will be filtered out and not participate in comparison operations"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE array_apply_test (\n    id INT,\n    int_array ARRAY<INT>,\n    double_array ARRAY<DOUBLE>,\n    date_array ARRAY<DATE>\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 3\nPROPERTIES (\n    \"replication_num\" = \"1\"\n);\n\nINSERT INTO array_apply_test VALUES\n(1, [1, 2, 3, 4, 5], [1.1, 2.2, 3.3, 4.4, 5.5], ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05']),\n(2, [10, 20, 30], [10.5, 20.5, 30.5], ['2023-02-01', '2023-02-02', '2023-02-03']),\n(3, [], [], []),\n(4, NULL, NULL, NULL);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Query examples:"})}),"\n",(0,s.jsx)(n.p,{children:"Filter elements in double_array that are greater than 2:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply(double_array, \">\", 2) FROM array_apply_test WHERE id = 1;\n+------------------------------------------+\n| array_apply(double_array, '>', 2)        |\n+------------------------------------------+\n| [2.2, 3.3, 4.4, 5.5]                     |\n+------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Filter elements in int_array that are not equal to 3:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply(int_array, \"!=\", 3) FROM array_apply_test WHERE id = 1;\n+------------------------------------------+\n| array_apply(int_array, '!=', 3)          |\n+------------------------------------------+\n| [1, 2, 4, 5]                             |\n+------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Filter elements in date_array that are greater than or equal to the specified date:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'SELECT array_apply(date_array, ">=", \'2023-01-03\') FROM array_apply_test WHERE id = 1;\n+---------------------------------------------+\n| array_apply(date_array, ">=", \'2023-01-03\') |\n+---------------------------------------------+\n| ["2023-01-03", "2023-01-04", "2023-01-05"]  |\n+---------------------------------------------+\n'})}),"\n",(0,s.jsx)(n.p,{children:"Empty array returns empty array:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply(int_array, \">\", 0) FROM array_apply_test WHERE id = 3;\n+------------------------------------------+\n| array_apply(int_array, '>', 0)           |\n+------------------------------------------+\n| []                                        |\n+------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"NULL array returns NULL: returning NULL when the input array is NULL without throwing an error."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply(int_array, \">\", 0) FROM array_apply_test WHERE id = 4;\n+------------------------------------------+\n| array_apply(int_array, '>', 0)           |\n+------------------------------------------+\n| NULL                                      |\n+------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Array containing null values, null elements will be filtered:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply([1, null, 3, null, 5], \">\", 2);\n+------------------------------------------+\n| array_apply([1, null, 3, null, 5], '>', 2) |\n+------------------------------------------+\n| [3, 5]                                   |\n+------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"exception-examples",children:"Exception Examples"}),"\n",(0,s.jsx)(n.p,{children:"Unsupported operator:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply([1,2,3], \"like\", 2);\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not build function: 'array_apply', expression: array_apply([1, 2, 3], 'like', 2), array_apply(arr, op, val): op support =, >=, <=, >, <, !=, but we get like\n"})}),"\n",(0,s.jsx)(n.p,{children:"Unsupported string type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply(['a','b','c'], \"=\", 'a');\nERROR 1105 (HY000): errCode = 2, detailMessage = array_apply does not support type VARCHAR(1), expression is array_apply(['a', 'b', 'c'], '=', 'a')\n"})}),"\n",(0,s.jsx)(n.p,{children:"Unsupported complex type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply([[1,2],[3,4]], \"=\", [1,2]);\nERROR 1105 (HY000): errCode = 2, detailMessage = array_apply does not support type ARRAY<TINYINT>, expression is array_apply([[1, 2], [3, 4]], '=', [1, 2])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Operator is not a constant:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply([1,2,3], concat('>', '='), 2);\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not build function: 'array_apply', expression: array_apply([1, 2, 3], concat('>', '='), 2), array_apply(arr, op, val): op support const value only.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Condition value is not a constant:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply([1,2,3], \">\", id) FROM array_apply_test WHERE id = 1;\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not build function: 'array_apply', expression: array_apply([1, 2, 3], '>', id), array_apply(arr, op, val): val support const value only.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Incorrect number of parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply([1,2,3], \">\");\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not found function 'array_apply' which has 2 arity. Candidate functions are: [array_apply(Expression, Expression, Expression)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Passing non-array type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_apply('not_an_array', \">\", 2);\nERROR 1105 (HY000): errCode = 2, detailMessage = class org.apache.doris.nereids.types.VarcharType cannot be cast to class org.apache.doris.nereids.types.ArrayType (org.apache.doris.nereids.types.VarcharType and org.apache.doris.nereids.types.ArrayType are in unnamed module of loader 'app')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsx)(n.p,{children:"ARRAY, APPLY, ARRAY_APPLY"})]})}function d(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},250065:function(e,n,a){a.d(n,{Z:function(){return t},a:function(){return i}});var r=a(667294);let s={},l=r.createContext(s);function i(e){let n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);