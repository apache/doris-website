"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["332566"],{665512:function(n,e,i){i.r(e),i.d(e,{default:()=>h,frontMatter:()=>l,metadata:()=>t,assets:()=>o,toc:()=>d,contentTitle:()=>r});var t=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/numeric/FLOATING-POINT","title":"Floating-Point Types (FLOAT and DOUBLE)","description":"Description","source":"@site/docs/sql-manual/basic-element/sql-data-types/numeric/FLOATING-POINT.md","sourceDirName":"sql-manual/basic-element/sql-data-types/numeric","slug":"/sql-manual/basic-element/sql-data-types/numeric/FLOATING-POINT","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/numeric/FLOATING-POINT","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Floating-Point Types (FLOAT and DOUBLE)","language":"en"},"sidebar":"docs","previous":{"title":"DECIMAL","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/numeric/DECIMAL"},"next":{"title":"DATE","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/date-time/DATE"}}'),s=i("785893"),a=i("250065");let l={title:"Floating-Point Types (FLOAT and DOUBLE)",language:"en"},r=void 0,o={},d=[{value:"Description",id:"description",level:2},{value:"Value Range",id:"value-range",level:2},{value:"FLOAT",id:"float",level:3},{value:"DOUBLE",id:"double",level:3},{value:"Special Values",id:"special-values",level:2},{value:"Floating-Point Operations",id:"floating-point-operations",level:2},{value:"Arithmetic Operations",id:"arithmetic-operations",level:3},{value:"Comparison Operations",id:"comparison-operations",level:3},{value:"Floating-Point Precision Issues",id:"floating-point-precision-issues",level:2},{value:"Approximate Values and Precision Loss",id:"approximate-values-and-precision-loss",level:3},{value:"Operations Don&#39;t Follow Associative Law",id:"operations-dont-follow-associative-law",level:3},{value:"Aggregate Functions",id:"aggregate-functions",level:4},{value:"Join Operations",id:"join-operations",level:4},{value:"Floating-Point Output",id:"floating-point-output",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Keywords",id:"keywords",level:2}];function c(n){let e={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(e.p,{children:["Doris provides two floating-point data types: ",(0,s.jsx)(e.code,{children:"FLOAT"})," and ",(0,s.jsx)(e.code,{children:"DOUBLE"}),". These are variable-precision numeric types that follow the IEEE 754 standard for floating-point arithmetic."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Type"}),(0,s.jsx)(e.th,{children:"Alias"}),(0,s.jsx)(e.th,{children:"Storage Size"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"FLOAT"}),(0,s.jsx)(e.td,{children:"FLOAT4, REAL"}),(0,s.jsx)(e.td,{children:"4 bytes"}),(0,s.jsx)(e.td,{children:"Single-precision floating-point"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"DOUBLE"}),(0,s.jsx)(e.td,{children:"FLOAT8, DOUBLE PRECISION"}),(0,s.jsx)(e.td,{children:"8 bytes"}),(0,s.jsx)(e.td,{children:"Double-precision floating-point"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"value-range",children:"Value Range"}),"\n",(0,s.jsx)(e.h3,{id:"float",children:"FLOAT"}),"\n",(0,s.jsx)(e.p,{children:"Doris uses IEEE-754 single-precision floating-point numbers, with a value range of:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"-\u221E (-Infinity)"}),"\n",(0,s.jsx)(e.li,{children:"[-3.402E+38, -1.175E-37]"}),"\n",(0,s.jsx)(e.li,{children:"0"}),"\n",(0,s.jsx)(e.li,{children:"[1.175E-37, 3.402E+38]"}),"\n",(0,s.jsx)(e.li,{children:"+\u221E (+Infinity)"}),"\n",(0,s.jsx)(e.li,{children:"NaN (Not a Number)"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["For more details, see ",(0,s.jsx)(e.a,{href:"https://en.cppreference.com/w/cpp/language/types.html#Standard_floating-point_types",children:"C++ float type"})," and ",(0,s.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Single-precision_floating-point_format",children:"Wikipedia Single-precision floating-point format"}),"."]}),"\n",(0,s.jsx)(e.h3,{id:"double",children:"DOUBLE"}),"\n",(0,s.jsx)(e.p,{children:"Doris uses IEEE-754 double-precision floating-point numbers, with a value range of:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"-\u221E (-Infinity)"}),"\n",(0,s.jsx)(e.li,{children:"[-1.79769E+308, -2.225E-307]"}),"\n",(0,s.jsx)(e.li,{children:"0"}),"\n",(0,s.jsx)(e.li,{children:"[+2.225E-307, +1.79769E+308]"}),"\n",(0,s.jsx)(e.li,{children:"+\u221E (+Infinity)"}),"\n",(0,s.jsx)(e.li,{children:"NaN (Not a Number)"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["For more details, see ",(0,s.jsx)(e.a,{href:"https://en.cppreference.com/w/cpp/language/types.html#Standard_floating-point_types",children:"C++ double type"})," and ",(0,s.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Double-precision_floating-point_format",children:"Wikipedia Double-precision floating-point format"}),"."]}),"\n",(0,s.jsx)(e.h2,{id:"special-values",children:"Special Values"}),"\n",(0,s.jsx)(e.p,{children:"In addition to regular numeric values, floating-point types have several special values that conform to the IEEE 754 standard:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Infinity"})," or ",(0,s.jsx)(e.code,{children:"Inf"}),": Positive infinity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"-Infinity"})," or ",(0,s.jsx)(e.code,{children:"-Inf"}),": Negative infinity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"NaN"}),": Not a Number"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"These special values can be generated through CAST conversions:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"mysql> select cast('NaN' as double), cast('inf' as double), cast('-Infinity' as double);\n+-----------------------+-----------------------+-----------------------------+\n| cast('NaN' as double) | cast('inf' as double) | cast('-Infinity' as double) |\n+-----------------------+-----------------------+-----------------------------+\n|                   NaN |              Infinity |                   -Infinity |\n+-----------------------+-----------------------+-----------------------------+\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Floating-point numbers also have a non-intuitive property: there are two different zero values, ",(0,s.jsx)(e.code,{children:"+0"})," and ",(0,s.jsx)(e.code,{children:"-0"}),".\nWhile they are considered equal in most contexts, they differ in their sign bit:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"mysql> select cast('+0.0' as double), cast('-0.0' as double);\n+------------------------+------------------------+\n| cast('+0.0' as double) | cast('-0.0' as double) |\n+------------------------+------------------------+\n|                      0 |                     -0 |\n+------------------------+------------------------+\n"})}),"\n",(0,s.jsx)(e.h2,{id:"floating-point-operations",children:"Floating-Point Operations"}),"\n",(0,s.jsx)(e.h3,{id:"arithmetic-operations",children:"Arithmetic Operations"}),"\n",(0,s.jsx)(e.p,{children:"Doris floating-point numbers support common arithmetic operations like addition, subtraction, multiplication, and division."}),"\n",(0,s.jsx)(e.p,{children:"It's important to note that Doris does not fully follow the IEEE 754 standard when handling division by 0 with floating-point numbers."}),"\n",(0,s.jsx)(e.p,{children:"Doris follows PostgreSQL's implementation in this regard, returning SQL NULL instead of generating special values when dividing by 0:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Expression"}),(0,s.jsx)(e.th,{children:"PostgreSQL"}),(0,s.jsx)(e.th,{children:"IEEE 754"}),(0,s.jsx)(e.th,{children:"Doris"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"1.0 / 0.0"}),(0,s.jsx)(e.td,{children:"Error"}),(0,s.jsx)(e.td,{children:"Infinity"}),(0,s.jsx)(e.td,{children:"NULL"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"0.0 / 0.0"}),(0,s.jsx)(e.td,{children:"Error"}),(0,s.jsx)(e.td,{children:"NaN"}),(0,s.jsx)(e.td,{children:"NULL"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"-1.0 / 0.0"}),(0,s.jsx)(e.td,{children:"Error"}),(0,s.jsx)(e.td,{children:"-Infinity"}),(0,s.jsx)(e.td,{children:"NULL"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"'Infinity' / 'Infinity'"}),(0,s.jsx)(e.td,{children:"NaN"}),(0,s.jsx)(e.td,{children:"NaN"}),(0,s.jsx)(e.td,{children:"NaN"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"1.0 / 'Infinity'"}),(0,s.jsx)(e.td,{children:"0.0"}),(0,s.jsx)(e.td,{children:"0.0"}),(0,s.jsx)(e.td,{children:"0"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"'Infinity' - 'Infinity'"}),(0,s.jsx)(e.td,{children:"NaN"}),(0,s.jsx)(e.td,{children:"NaN"}),(0,s.jsx)(e.td,{children:"NaN"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"'Infinity' - 1.0"}),(0,s.jsx)(e.td,{children:"Infinity"}),(0,s.jsx)(e.td,{children:"Infinity"}),(0,s.jsx)(e.td,{children:"Infinity"})]})]})]}),"\n",(0,s.jsx)(e.h3,{id:"comparison-operations",children:"Comparison Operations"}),"\n",(0,s.jsx)(e.p,{children:"The IEEE standard defines floating-point comparisons that differ from typical integer comparisons in important ways. For example, negative zero and positive zero are considered equal, and any NaN value is not equal to any other value (including itself). All finite floating-point numbers are strictly less than +\u221E and strictly greater than -\u221E."}),"\n",(0,s.jsx)(e.p,{children:"To ensure consistency and predictability of results, Doris handles NaN differently from the IEEE standard.\nIn Doris, NaN is considered greater than all other values (including Infinity), and NaN equals NaN."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"mysql> select * from sort_float order by d;\n+------+-----------+\n| id   | d         |\n+------+-----------+\n|    5 | -Infinity |\n|    2 |      -123 |\n|    1 |       123 |\n|    4 |  Infinity |\n|    8 |       NaN |\n|    9 |       NaN |\n+------+-----------+\n\nmysql> select \n    cast('Nan' as double) = cast('Nan' as double) , \n    cast('Nan' as double) > cast('Inf' as double) , \n    cast('Nan' as double) > cast('123456.789' as double);\n+-----------------------------------------------+-----------------------------------------------+------------------------------------------------------+\n| cast('Nan' as double) = cast('Nan' as double) | cast('Nan' as double) > cast('Inf' as double) | cast('Nan' as double) > cast('123456.789' as double) |\n+-----------------------------------------------+-----------------------------------------------+------------------------------------------------------+\n|                                             1 |                                             1 |                                                    1 |\n+-----------------------------------------------+-----------------------------------------------+------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(e.h2,{id:"floating-point-precision-issues",children:"Floating-Point Precision Issues"}),"\n",(0,s.jsx)(e.h3,{id:"approximate-values-and-precision-loss",children:"Approximate Values and Precision Loss"}),"\n",(0,s.jsx)(e.p,{children:"Floating-point numbers are inherently approximate representations. This means that certain decimal values cannot be stored exactly in the binary representation of floating-point numbers and are instead stored as approximations. As a result, small discrepancies may occur during storage and retrieval."}),"\n",(0,s.jsx)(e.p,{children:"For example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT CAST(1.3 AS FLOAT) - CAST(0.7 AS FLOAT) = CAST(0.6 AS FLOAT);\n+--------------------------------------------------------------+\n| CAST(1.3 AS FLOAT) - CAST(0.7 AS FLOAT) = CAST(0.6 AS FLOAT) |\n+--------------------------------------------------------------+\n|                                                            0 |\n+--------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Due to floating-point representation errors, this may not evaluate to ",(0,s.jsx)(e.code,{children:"TRUE"})," as expected."]}),"\n",(0,s.jsx)(e.h3,{id:"operations-dont-follow-associative-law",children:"Operations Don't Follow Associative Law"}),"\n",(0,s.jsxs)(e.p,{children:["Due to precision limitations in floating-point operations, the computational properties of floating-point numbers differ from theoretical mathematical operations. Floating-point addition and multiplication do not strictly follow the ",(0,s.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems",children:"associative and distributive laws"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"This leads to an important consequence: different computation orders may produce slightly different results.\nSince Doris uses an MPP architecture and cannot guarantee the exact order of data processing, calculations involving floating-point numbers may produce slightly different results in different executions, even with identical input data."}),"\n",(0,s.jsx)(e.h4,{id:"aggregate-functions",children:"Aggregate Functions"}),"\n",(0,s.jsx)(e.p,{children:"Performing aggregate functions on floating-point values may accumulate errors, especially when dealing with large datasets. When data contains extremely large or small values, these errors can be further amplified.\nDue to the indeterminate calculation order, running the same aggregate function multiple times may yield different results when the data contains extreme values."}),"\n",(0,s.jsx)(e.h4,{id:"join-operations",children:"Join Operations"}),"\n",(0,s.jsx)(e.p,{children:"Similar to aggregate functions, it is not recommended to perform table joins on floating-point columns. Due to precision issues with floating-point numbers, two theoretically equal values might have slightly different internal representations, causing matches to fail."}),"\n",(0,s.jsx)(e.h3,{id:"floating-point-output",children:"Floating-Point Output"}),"\n",(0,s.jsx)(e.p,{children:"When floating-point numbers are converted to strings, Doris follows these precision rules:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Single-precision floating-point numbers (FLOAT) guarantee at least 7 significant digits"}),"\n",(0,s.jsx)(e.li,{children:"Double-precision floating-point numbers (DOUBLE) guarantee at least 16 significant digits\nNote that floating-point output may use scientific notation, so the length of a floating-point string representation is not necessarily equal to its number of significant digits:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"mysql> select cast('1234567' as float) , cast('12345678' as float);\n+--------------------------+---------------------------+\n| cast('1234567' as float) | cast('12345678' as float) |\n+--------------------------+---------------------------+\n|                  1234567 |              1.234568e+07 |\n+--------------------------+---------------------------+\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Choose the appropriate data type"}),": For financial calculations or other scenarios requiring exact numeric values, use the ",(0,s.jsx)(e.code,{children:"DECIMAL"})," type instead of floating-point types."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Be cautious with equality comparisons"}),": Avoid directly comparing whether two floating-point values are equal, especially in JOIN operations."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Be careful with string conversions"}),": Converting floating-point numbers to strings and back may introduce additional precision loss."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Understand platform differences"}),": Different database systems may have subtle differences in handling floating-point operations, especially when dealing with special cases like NaN and Infinity (although most database systems broadly follow the IEEE standard)."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Round results appropriately for display"}),": When displaying floating-point calculation results, consider appropriate rounding to reduce precision issues for users."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsx)(e.p,{children:"FLOAT, FLOAT4, REAL, DOUBLE, DOUBLE PRECISION, FLOAT8, floating-point"})]})}function h(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},250065:function(n,e,i){i.d(e,{Z:function(){return r},a:function(){return l}});var t=i(667294);let s={},a=t.createContext(s);function l(n){let e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);