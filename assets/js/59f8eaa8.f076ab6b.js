"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["478266"],{843457:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>c,metadata:()=>r,assets:()=>l,toc:()=>o,contentTitle:()=>i});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/string-functions/regexp-count","title":"REGEXP_COUNT","description":"\x3c!--","source":"@site/docs/sql-manual/sql-functions/scalar-functions/string-functions/regexp-count.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/string-functions","slug":"/sql-manual/sql-functions/scalar-functions/string-functions/regexp-count","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp-count","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"REGEXP_COUNT","language":"en"},"sidebar":"docs","previous":{"title":"REGEXP","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp"},"next":{"title":"REGEXP_EXTRACT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp-extract"}}'),a=t("785893"),s=t("250065");let c={title:"REGEXP_COUNT",language:"en"},i=void 0,l={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"This is a function to count the number of characters in a string that match a given regular expression pattern. The input consists of a user-provided string and a regular expression pattern. The return value is n the total count of matching characters; if no matches are found, it returns 0."}),"\n",(0,a.jsx)(n.p,{children:"'str' paratemer is 'string' type,it is the string of usr want to match by a regexp expression."}),"\n",(0,a.jsx)(n.p,{children:"'pattern' paratemer is 'string' type, it is the string of a regexp regular which will be used to match the string;"}),"\n",(0,a.jsx)(n.p,{children:"It should be noted that when handling character set matching, Utf-8 standard character classes should be used. This ensures that functions can correctly identify and process various characters from different languages."}),"\n",(0,a.jsxs)(n.p,{children:["Support character match classes : ",(0,a.jsx)(n.a,{href:"https://github.com/google/re2/wiki/Syntax",children:"https://github.com/google/re2/wiki/Syntax"})]}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"REGEXP_COUNT(<str>, <pattern>)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"<str>"})}),(0,a.jsx)(n.td,{children:"The parameter is 'string' type,it is the dest value which matched by the regexp expression."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"<pattern>"})}),(0,a.jsx)(n.td,{children:"The parameter is 'string' type, it is a regexp expression and it is used to match the string which meet the regular  of the pattern."})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Returns number of matches for a regular expression 'pattern' within a 'str',it is 'int',if no character can be matched, return 0;\nIf pattern is NULL or str is NULL or both are NULL,return NULL;\nIf pattern is not allowed regexp regular , it will throw error,it`s a wrong for this action;"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"The string region matching against an expression containing escape characters and return the result"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_count('a.b:c;d', '[\\\\\\\\.:;]');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+--------------------------------------+\n| regexp_count('a.b:c;d', '[\\\\\\\\.:;]') |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"The string matching result of the regular expression for the ordinary character ':'."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_count('a.b:c;d', ':');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+------------------------------+\n| regexp_count('a.b:c;d', ':') |\n+------------------------------+\n|                            1 |\n+------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"The return result when matching a string against a regular expression containing two square brackets."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_count('Hello, World!', '[[:punct:]]');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+----------------------------------------------+\n| regexp_count('Hello, World!', '[[:punct:]]') |\n+----------------------------------------------+\n|                                            2 |\n+----------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pattern is NULL case"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT regexp_count("abc",NULL);\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'+------------------------+\n| regexp_count("abc",NULL) |\n+------------------------+\n|                   NULL |\n+------------------------+\n'})}),"\n",(0,a.jsx)(n.p,{children:"Str is NULL case"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT regexp_count(NULL,"abc");\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'+------------------------+\n| regexp_count(NULL,"abc") |\n+------------------------+\n|                   NULL |\n+------------------------+\n'})}),"\n",(0,a.jsx)(n.p,{children:"Both are NULL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_count(NULL,NULL);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+------------------------+\n| regexp_count(NULL,NULL) |\n+------------------------+\n|                   NULL |\n+------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"The return result of inserting certain variable values and then retrieving the variables from the stored rows for matching."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"\nCREATE TABLE test_table_for_regexp_count (\n        id INT,\n        text_data VARCHAR(500),\n        pattern VARCHAR(100)\n    ) PROPERTIES (\"replication_num\"=\"1\");\n\nINSERT INTO test_table_for_regexp_count VALUES\n    (1, 'HelloWorld', '[A-Z][a-z]+'),    \n    (2, 'apple123', '[a-z]{5}[0-9]'),    \n    (3, 'aabbcc', '(aa|bb|cc)'),         \n    (4, '123-456-7890', '[0-9][0-9][0-9]'), \n    (5, 'test,data', ','),              \n    (6, 'a1b2c3', '[a-z][0-9]'),         \n    (7, 'book keeper', 'oo|ee'),        \n    (8, 'ababab', '(ab)(ab)(ab)'),       \n    (9, 'aabbcc', '(aa|bb|cc)'),         \n    (10, 'apple,banana', '[aeiou][a-z]+');\n\nSELECT id, regexp_count(text_data, pattern) as count_result FROM test_table_for_regexp_count ORDER BY id;\n\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+------+--------------+\n| id   | count_result |\n+------+--------------+\n|    1 |            2 |\n|    2 |            1 |\n|    3 |            3 |\n|    4 |            3 |\n|    5 |            1 |\n|    6 |            3 |\n|    7 |            2 |\n|    8 |            1 |\n|    9 |            3 |\n|   10 |            2 |\n+------+--------------+\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"The return result of inserting certain variable values, retrieving the variables from stored rows for matching, with the regular expression being a constant."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE test_table_for_regexp_count (\n        id INT,\n        text_data VARCHAR(500),\n        pattern VARCHAR(100)\n    ) PROPERTIES (\"replication_num\"=\"1\");\n\nINSERT INTO test_table_for_regexp_count VALUES\n    (1, 'HelloWorld', '[A-Z][a-z]+'),    \n    (2, 'apple123', '[a-z]{5}[0-9]'),    \n    (3, 'aabbcc', '(aa|bb|cc)'),         \n    (4, '123-456-7890', '[0-9][0-9][0-9]'), \n    (5, 'test,data', ','),              \n    (6, 'a1b2c3', '[a-z][0-9]'),         \n    (7, 'book keeper', 'oo|ee'),        \n    (8, 'ababab', '(ab)(ab)(ab)'),       \n    (9, 'aabbcc', '(aa|bb|cc)'),         \n    (10, 'apple,banana', '[aeiou][a-z]+');\n\nSELECT id, regexp_count(text_data, 'e') as count_e FROM test_table_for_regexp_count WHERE text_data IS NOT NULL ORDER BY id;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+------+---------+\n| id   | count_e |\n+------+---------+\n|    1 |       1 |\n|    2 |       1 |\n|    3 |       0 |\n|    4 |       0 |\n|    5 |       1 |\n|    6 |       0 |\n|    7 |       3 |\n|    8 |       0 |\n|    9 |       0 |\n|   10 |       1 |\n+------+---------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Emoji regexp count"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_count('\uD83C\uDF54\uD83C\uDF5F\uD83C\uDF55\uD83C\uDF0D', '\uD83C\uDF54|\uD83C\uDF5F|\uD83C\uDF55');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+----------------------------------------------------+\n| regexp_count('\uD83C\uDF54\uD83C\uDF5F\uD83C\uDF55\uD83C\uDF0D', '\uD83C\uDF54|\uD83C\uDF5F|\uD83C\uDF55')                             |\n+----------------------------------------------------+\n|                                                  3 |\n+----------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"If the 'pattern' is not allowd regular regular,throw error"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"\nSELECT regexp_count('Hello, World!', '[[:punct:');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.2)[INVALID_ARGUMENT]Could not compile regexp pattern: [[:punct:\nError: missing ]: [[:punct:\n"})})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return c}});var r=t(667294);let a={},s=r.createContext(a);function c(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);