"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["782836"],{619370:function(e,n,s){s.r(n),s.d(n,{default:()=>d,frontMatter:()=>r,metadata:()=>i,assets:()=>c,toc:()=>o,contentTitle:()=>a});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftright","title":"BIT_SHIFT_RIGHT","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftright.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/bitwise-functions","slug":"/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftright","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftright","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"BIT_SHIFT_RIGHT","language":"zh-CN"},"sidebar":"docs","previous":{"title":"BIT_SHIFT_LEFT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftleft"},"next":{"title":"XOR","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitwise-functions/xor"}}'),t=s("785893"),l=s("250065");let r={title:"BIT_SHIFT_RIGHT",language:"zh-CN"},a=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function u(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Performs a right shift bitwise operation, which moves all bits of a binary number to the right by a specified number of positions. This operation is commonly used for handling binary data or for efficient mathematical calculations (such as division)."}),"\n",(0,t.jsx)(n.p,{children:"Logical right shift of -1 by one position results in BIGINT_MAX (9223372036854775807)."}),"\n",(0,t.jsx)(n.p,{children:"Right shifting a number by a negative value always results in 0."}),"\n",(0,t.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"BIT_SHIFT_RIGHT(<x>, <bits>)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<x>"}),": The number to be shifted."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<bits>"}),": The number of positions to shift right. It is an integer that determines how many positions ",(0,t.jsx)(n.code,{children:"<x>"})," will be shifted."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsx)(n.p,{children:"Returns an integer representing the result after the right shift operation."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Example 1\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select BIT_SHIFT_RIGHT(1024,3), BIT_SHIFT_RIGHT(-1,1), BIT_SHIFT_RIGHT(100, -1);\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"+-------------------------+-----------------------+--------------------------+\n| BIT_SHIFT_RIGHT(1024,3) | BIT_SHIFT_RIGHT(-1,1) | BIT_SHIFT_RIGHT(100, -1) |\n+-------------------------+-----------------------+--------------------------+\n|                     128 |   9223372036854775807 |                        0 |\n+-------------------------+-----------------------+--------------------------+\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["NULL argument\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select BIT_SHIFT_RIGHT(1024, NULL), BIT_SHIFT_RIGHT(NULL, 3), BIT_SHIFT_RIGHT(NULL, NULL);\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"+-----------------------------+--------------------------+-----------------------------+\n| BIT_SHIFT_RIGHT(1024, NULL) | BIT_SHIFT_RIGHT(NULL, 3) | BIT_SHIFT_RIGHT(NULL, NULL) |\n+-----------------------------+--------------------------+-----------------------------+\n|                        NULL |                     NULL |                        NULL |\n+-----------------------------+--------------------------+-----------------------------+\n"})}),"\n"]}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return r}});var i=s(667294);let t={},l=i.createContext(t);function r(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);