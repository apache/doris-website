"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["335931"],{563162:function(e,n,r){r.r(n),r.d(n,{default:()=>A,frontMatter:()=>i,metadata:()=>a,assets:()=>c,toc:()=>d,contentTitle:()=>l});var a=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/semi-structured/ARRAY","title":"ARRAY","description":"Type Description","source":"@site/docs/sql-manual/basic-element/sql-data-types/semi-structured/ARRAY.md","sourceDirName":"sql-manual/basic-element/sql-data-types/semi-structured","slug":"/sql-manual/basic-element/sql-data-types/semi-structured/ARRAY","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/semi-structured/ARRAY","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY","language":"en"},"sidebar":"docs","previous":{"title":"VARBINARY","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/binary-type/VARBINARY"},"next":{"title":"GEO","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/semi-structured/GEO"}}'),s=r("785893"),t=r("250065");let i={title:"ARRAY",language:"en"},l="ARRAY Documentation",c={},d=[{value:"Type Description",id:"type-description",level:2},{value:"Type Constraints",id:"type-constraints",level:2},{value:"Constant Construction",id:"constant-construction",level:2},{value:"Modifying Type",id:"modifying-type",level:2},{value:"Element Access",id:"element-access",level:2},{value:"Query Acceleration",id:"query-acceleration",level:2},{value:"Examples",id:"examples",level:2}];function o(e){let n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"array-documentation",children:"ARRAY Documentation"})}),"\n",(0,s.jsx)(n.h2,{id:"type-description",children:"Type Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," type is used to represent an ordered collection of elements, where each element has the same data type. For example, an array of integers can be represented as ",(0,s.jsx)(n.code,{children:"[1, 2, 3]"}),", and an array of strings as ",(0,s.jsx)(n.code,{children:'["a", "b", "c"]'}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ARRAY<T>"})," represents an array composed of elements of type T, where T is nullable. Supported types for T include: ",(0,s.jsx)(n.code,{children:"BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL, DATE, DATETIME, CHAR, VARCHAR, STRING, IPV4, IPV6, STRUCT, MAP, VARIANT, JSONB, ARRAY<T>"}),".\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Note: Among the above T types, ",(0,s.jsx)(n.code,{children:"JSONB"})," and ",(0,s.jsx)(n.code,{children:"VARIANT"})," are only supported in the computation layer of Doris and ",(0,s.jsxs)(n.strong,{children:["do not support using ",(0,s.jsx)(n.code,{children:"ARRAY<JSONB>"})," and ",(0,s.jsx)(n.code,{children:"ARRAY<VARIANT>"})," in table creation in Doris"]}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"type-constraints",children:"Type Constraints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The maximum nesting depth supported by ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," type is 9."]}),"\n",(0,s.jsxs)(n.li,{children:["Conversion between ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," types depends on whether T can be converted. ",(0,s.jsx)(n.code,{children:"Array<T>"})," type cannot be converted to other types.\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For example: ",(0,s.jsx)(n.code,{children:"ARRAY<INT>"})," can be converted to ",(0,s.jsx)(n.code,{children:"ARRAY<BIGINT>"})," because ",(0,s.jsx)(n.code,{children:"INT"})," and ",(0,s.jsx)(n.code,{children:"BIGINT"})," can be converted."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Variant"})," type can be converted to ",(0,s.jsx)(n.code,{children:"Array<T>"})," type."]}),"\n",(0,s.jsxs)(n.li,{children:["String type can be converted to ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," type (through parsing, returning NULL if parsing fails)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["In the ",(0,s.jsx)(n.code,{children:"AGGREGATE"})," table model, ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," type only supports ",(0,s.jsx)(n.code,{children:"REPLACE"})," and ",(0,s.jsx)(n.code,{children:"REPLACE_IF_NOT_NULL"}),". ",(0,s.jsx)(n.strong,{children:"In any table model, it cannot be used as a KEY column, nor as a partition or bucket column"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Columns of ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," type ",(0,s.jsxs)(n.strong,{children:["support ",(0,s.jsx)(n.code,{children:"ORDER BY"})," and ",(0,s.jsx)(n.code,{children:"GROUP BY"})," operations"]}),".\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["T types that support ",(0,s.jsx)(n.code,{children:"ORDER BY"})," and ",(0,s.jsx)(n.code,{children:"GROUP BY"})," include: ",(0,s.jsx)(n.code,{children:"BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL, DATE, DATETIME, CHAR, VARCHAR, STRING, IPV4, IPV6"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Columns of ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," type do not support being used as ",(0,s.jsx)(n.code,{children:"JOIN KEY"})," and do not support being used in ",(0,s.jsx)(n.code,{children:"DELETE"})," statements."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"constant-construction",children:"Constant Construction"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"ARRAY()"})," function to construct a value of type ",(0,s.jsx)(n.code,{children:"ARRAY<T>"}),", where T is the common type of the parameters."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'-- [1, 2, 3] T is INT\nSELECT ARRAY(1, 2, 3);\n\n-- ["1", "2", "abc"] , T is STRING\nSELECT ARRAY(1, 2, \'abc\');\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"[]"})," to construct a value of type ",(0,s.jsx)(n.code,{children:"ARRAY<T>"}),", where T is the common type of the parameters."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:' -- ["abc", "def", "efg"] T is STRING\n SELECT ["abc", "def", "efg"];\n\n -- ["1", "2", "abc"] , T is STRING\n SELECT [1, 2, \'abc\'];\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"modifying-type",children:"Modifying Type"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Modification is only allowed when the element type inside ",(0,s.jsx)(n.code,{children:"ARRAY"})," is ",(0,s.jsx)(n.code,{children:"VARCHAR"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Only allows changing the parameter of ",(0,s.jsx)(n.code,{children:"VARCHAR"})," from smaller to larger, not the other way around."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'CREATE TABLE `array_table` (\n  `k` INT NOT NULL,\n  `array_column` ARRAY<VARCHAR(10)>\n) ENGINE=OLAP\nDUPLICATE KEY(`k`)\nDISTRIBUTED BY HASH(`k`) BUCKETS 1\nPROPERTIES (\n    "replication_num" = "1"\n);\n\nALTER TABLE array_table MODIFY COLUMN array_column ARRAY<VARCHAR(20)>;\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The default value for columns of type ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," can only be specified as NULL, and once specified, it cannot be modified."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"element-access",children:"Element Access"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"[k]"})," to access the k-th element of ",(0,s.jsx)(n.code,{children:"ARRAY<T>"}),", where k starts from 1. If out of bounds, returns NULL."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"SELECT [1, 2, 3][1];\n  +--------------+\n  | [1, 2, 3][1] |\n  +--------------+\n  |            1 |\n  +--------------+\n\nSELECT ARRAY(1, 2, 3)[2];\n  +-------------------+\n  | ARRAY(1, 2, 3)[2] |\n  +-------------------+\n  |                 2 |\n  +-------------------+\n\nSELECT [[1,2,3],[2,3,4]][1][3];\n  +-------------------------+\n  | [[1,2,3],[2,3,4]][1][3] |\n  +-------------------------+\n  |                       3 |\n  +-------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"ELEMENT_AT(ARRAY, k)"})," to access the k-th element of ",(0,s.jsx)(n.code,{children:"ARRAY<T>"}),", where k starts from 1. If out of bounds, returns NULL."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'SELECT ELEMENT_AT(ARRAY(1, 2, 3) , 2);\n+--------------------------------+\n| ELEMENT_AT(ARRAY(1, 2, 3) , 2) |\n+--------------------------------+\n|                              2 |\n+--------------------------------+\n\nSELECT ELEMENT_AT([1, 2, 3] , 3);\n+---------------------------+\n| ELEMENT_AT([1, 2, 3] , 3) |\n+---------------------------+\n|                         3 |\n+---------------------------+\n\nSELECT ELEMENT_AT([["abc", "def"], ["def", "gef"], [3]] , 3);                      \n+-------------------------------------------------------+\n| ELEMENT_AT([["abc", "def"], ["def", "gef"], [3]] , 3) |\n+-------------------------------------------------------+\n| ["3"]                                                 |\n+-------------------------------------------------------+\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"query-acceleration",children:"Query Acceleration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Columns of type ",(0,s.jsx)(n.code,{children:"ARRAY<T>"})," in Doris tables support adding inverted indexes to accelerate computations involving ",(0,s.jsx)(n.code,{children:"ARRAY"})," functions on this column.\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["T types supported by inverted indexes: ",(0,s.jsx)(n.code,{children:"BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, LARGEINT, DECIMAL, DATE, DATETIME, CHAR, VARCHAR, STRING, IPV4, IPV6"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Accelerated ",(0,s.jsx)(n.code,{children:"ARRAY"})," functions: ",(0,s.jsx)(n.code,{children:"ARRAY_CONTAINS"}),", ",(0,s.jsx)(n.code,{children:"ARRAYS_OVERLAP"}),", but when the function parameters include NULL, it falls back to regular vectorized computation."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Multidimensional Arrays"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:"-- Create table\nCREATE TABLE IF NOT EXISTS array_table (\n    id INT,\n    two_dim_array ARRAY<ARRAY<INT>>,\n    three_dim_array ARRAY<ARRAY<ARRAY<STRING>>>\n) ENGINE=OLAP\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 1\nPROPERTIES (\n    \"replication_num\" = \"1\"\n);\n\n-- Insert\nINSERT INTO array_table VALUES (1, [[1, 2, 3], [4, 5, 6]], [[['ab', 'cd', 'ef'], ['gh', 'ij', 'kl']], [['mn', 'op', 'qr'], ['st', 'uv', 'wx']]]);\n\nINSERT INTO array_table VALUES (2, ARRAY(ARRAY(1, 2, 3), ARRAY(4, 5, 6)), ARRAY(ARRAY(ARRAY('ab', 'cd', 'ef'), ARRAY('gh', 'ij', 'kl')), ARRAY(ARRAY('mn', 'op', 'qr'), ARRAY('st', 'uv', 'wx'))));\n\n-- Query\nSELECT two_dim_array[1][2], three_dim_array[1][1][2] FROM array_table ORDER BY id;\n+---------------------+--------------------------+\n| two_dim_array[1][2] | three_dim_array[1][1][2] |\n+---------------------+--------------------------+\n|                   2 | cd                       |\n|                   2 | cd                       |\n+---------------------+--------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Nested Complex Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'-- Create table\nCREATE TABLE IF NOT EXISTS array_map_table (\n    id INT,\n    array_map ARRAY<MAP<STRING, INT>>\n) ENGINE=OLAP\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 1\nPROPERTIES (\n    "replication_num" = "1"\n);\n\n-- Insert\nINSERT INTO array_map_table VALUES (1, ARRAY(MAP(\'key1\', 1), MAP(\'key2\', 2)));\nINSERT INTO array_map_table VALUES (2, ARRAY(MAP(\'key1\', 1), MAP(\'key2\', 2)));\n\n-- Query\nSELECT array_map[1], array_map[2] FROM array_map_table ORDER BY id;\n+--------------+--------------+\n| array_map[1] | array_map[2] |\n+--------------+--------------+\n| {"key1":1}   | {"key2":2}   |\n| {"key1":1}   | {"key2":2}   |\n+--------------+--------------+\n\n-- Create table\nCREATE TABLE IF NOT EXISTS array_table (\n    id INT,\n    array_struct ARRAY<STRUCT<id: INT, name: STRING>>,\n) ENGINE=OLAP\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 1\nPROPERTIES (\n    "replication_num" = "1"\n);\n\nINSERT INTO array_table VALUES (1, ARRAY(STRUCT(1, \'John\'), STRUCT(2, \'Jane\')));\nINSERT INTO array_table VALUES (2, ARRAY(STRUCT(1, \'John\'), STRUCT(2, \'Jane\')));\n\nSELECT array_struct[1], array_struct[2] FROM array_table ORDER BY id;\n+-------------------------+-------------------------+\n| array_struct[1]         | array_struct[2]         |\n+-------------------------+-------------------------+\n| {"id":1, "name":"John"} | {"id":2, "name":"Jane"} |\n| {"id":1, "name":"John"} | {"id":2, "name":"Jane"} |\n+-------------------------+-------------------------+\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Modifying Type"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'-- Create table\nCREATE TABLE array_table (\n    id INT,\n    array_varchar ARRAY<VARCHAR(10)>\n) ENGINE=OLAP\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 1\nPROPERTIES (\n    "replication_allocation" = "tag.location.default: 1"\n);\n\n-- Modify ARRAY type\nALTER TABLE array_table MODIFY COLUMN array_varchar ARRAY<VARCHAR(20)>;\n\n-- Check column type\nDESC array_table;\n+---------------+--------------------+------+-------+---------+-------+\n| Field         | Type               | Null | Key   | Default | Extra |\n+---------------+--------------------+------+-------+---------+-------+\n| id            | int                | Yes  | true  | NULL    |       |\n| array_varchar | array<varchar(20)> | Yes  | false | NULL    | NONE  |\n+---------------+--------------------+------+-------+---------+-------+\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Inverted Index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-SQL",children:'-- Create table statement\nCREATE TABLE `array_table` (\n  `k` int NOT NULL,\n  `array_column` ARRAY<INT>,\n  INDEX idx_array_column (array_column) USING INVERTED\n) ENGINE=OLAP\nDUPLICATE KEY(`k`)\nDISTRIBUTED BY HASH(`k`) BUCKETS 1\nPROPERTIES (\n    "replication_num" = "1"\n);\n\n-- Insert\nINSERT INTO array_table VALUES (1, [1, 2, 3]), (2, [4, 5, 6]), (3, [7, 8, 9]);\n\n-- The inverted index accelerates the execution of the ARRAY_CONTAINS function\nSELECT * FROM array_table WHERE ARRAY_CONTAINS(array_column, 5);\n+------+--------------+\n| k    | array_column |\n+------+--------------+\n|    2 | [4, 5, 6]    |\n+------+--------------+\n\n-- The inverted index accelerates the execution of the ARRAYS_OVERLAP function\nSELECT * FROM array_table WHERE ARRAYS_OVERLAP(array_column, [6, 9]);\n+------+--------------+\n| k    | array_column |\n+------+--------------+\n|    2 | [4, 5, 6]    |\n|    3 | [7, 8, 9]    |\n+------+--------------+\n'})}),"\n"]}),"\n"]})]})}function A(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return l},a:function(){return i}});var a=r(667294);let s={},t=a.createContext(s);function i(e){let n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);