"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["874906"],{953313:function(n,e,s){s.r(e),s.d(e,{default:()=>u,frontMatter:()=>t,metadata:()=>i,assets:()=>d,toc:()=>c,contentTitle:()=>l});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/ip-functions/ipv6-cidr-to-range","title":"IPV6_CIDR_TO_RANGE","description":"ipv6cidrto_range","source":"@site/docs/sql-manual/sql-functions/scalar-functions/ip-functions/ipv6-cidr-to-range.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/ip-functions","slug":"/sql-manual/sql-functions/scalar-functions/ip-functions/ipv6-cidr-to-range","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv6-cidr-to-range","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"IPV6_CIDR_TO_RANGE","language":"en"},"sidebar":"docs","previous":{"title":"IPV4_TO_IPV6","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-to-ipv6"},"next":{"title":"IPV6_NUM_TO_STRING","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv6-num-to-string"}}'),r=s("785893"),a=s("250065");let t={title:"IPV6_CIDR_TO_RANGE",language:"en"},l=void 0,d={},c=[{value:"ipv6_cidr_to_range",id:"ipv6_cidr_to_range",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Usage Notes",id:"usage-notes",level:3},{value:"Examples",id:"examples",level:2},{value:"Keywords",id:"keywords",level:3}];function o(n){let e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"ipv6_cidr_to_range",children:"ipv6_cidr_to_range"}),"\n",(0,r.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(e.p,{children:"Calculates the minimum and maximum IPv6 addresses for a network segment based on an IPv6 address and CIDR prefix length, returning a struct containing two IPv6 addresses."}),"\n",(0,r.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:"IPV6_CIDR_TO_RANGE(<ipv6_address>, <cidr_prefix>)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"<ipv6_address>"}),": IPv6 type address or IPv6 string"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"<cidr_prefix>"}),": CIDR prefix length (SMALLINT type, range 0-128)"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsx)(e.p,{children:"Return Type: STRUCT<min: IPv6, max: IPv6>"}),"\n",(0,r.jsx)(e.p,{children:"Return Value Meaning:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Returns a struct containing two fields:\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"min"}),": Minimum IPv6 address of the network segment"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"max"}),": Maximum IPv6 address of the network segment"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"CIDR prefix length must be within the range 0-128"}),"\n",(0,r.jsx)(e.li,{children:"Supports both IPv6 type and string type input"}),"\n",(0,r.jsx)(e.li,{children:"Calculation is based on network mask, setting all host bits to zero for minimum address and all host bits to one for maximum address"}),"\n",(0,r.jsx)(e.li,{children:"Supports various combinations of constant parameters and column parameters"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(e.p,{children:"Calculate address range for /64 network segment."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'SELECT ipv6_cidr_to_range(INET6_ATON(\'2001:db8::1\'), 64) as range;\n+----------------------------------------+\n| range                                  |\n+----------------------------------------+\n| {"min": "2001:db8::", "max": "2001:db8::ffff:ffff:ffff:ffff"} |\n+----------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Calculate address range for /48 network segment."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:'SELECT ipv6_cidr_to_range(INET6_ATON(\'2001:db8:1::1\'), 48) as range;\n+----------------------------------------+\n| range                                  |\n+----------------------------------------+\n| {"min": "2001:db8:1::", "max": "2001:db8:1:ffff:ffff:ffff:ffff"} |\n+----------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"Access specific fields in the struct."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:"SELECT \n  ipv6_cidr_to_range(INET6_ATON('2001:db8::1'), 64).min as min_ip,\n  ipv6_cidr_to_range(INET6_ATON('2001:db8::1'), 64).max as max_ip;\n+-------------+----------------------------------+\n| min_ip      | max_ip                           |\n+-------------+----------------------------------+\n| 2001:db8::  | 2001:db8::ffff:ffff:ffff:ffff   |\n+-------------+----------------------------------+\n"})}),"\n",(0,r.jsx)(e.p,{children:"CIDR prefix out of range throws an exception."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:"SELECT ipv6_cidr_to_range(INET6_ATON('2001:db8::1'), 129);\nERROR 1105 (HY000): errCode = 2, detailMessage = (...)[INVALID_ARGUMENT]Illegal cidr value '129'\n"})}),"\n",(0,r.jsx)(e.h3,{id:"keywords",children:"Keywords"}),"\n",(0,r.jsx)(e.p,{children:"IPV6_CIDR_TO_RANGE"})]})}function u(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}},250065:function(n,e,s){s.d(e,{Z:function(){return l},a:function(){return t}});var i=s(667294);let r={},a=i.createContext(r);function t(n){let e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);