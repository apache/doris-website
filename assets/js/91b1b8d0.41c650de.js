"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["123184"],{443508:function(e,r,t){t.r(r),t.d(r,{default:()=>h,frontMatter:()=>o,metadata:()=>s,assets:()=>a,toc:()=>c,contentTitle:()=>d});var s=JSON.parse('{"id":"sql-manual/basic-element/operators/arithmetic-operators","title":"Arithmetic Operators","description":"Description","source":"@site/docs/sql-manual/basic-element/operators/arithmetic-operators.mdx","sourceDirName":"sql-manual/basic-element/operators","slug":"/sql-manual/basic-element/operators/arithmetic-operators","permalink":"/docs/dev/sql-manual/basic-element/operators/arithmetic-operators","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Arithmetic Operators","language":"en"},"sidebar":"docs","previous":{"title":"Comments","permalink":"/docs/dev/sql-manual/basic-element/comments"},"next":{"title":"Logic Operators","permalink":"/docs/dev/sql-manual/basic-element/operators/conditional-operators/logical-operators"}}'),i=t("785893"),n=t("250065");let o={title:"Arithmetic Operators",language:"en"},d=void 0,a={},c=[{value:"Description",id:"description",level:2},{value:"Operators",id:"operators",level:2},{value:"Usage Notes",id:"usage-notes",level:2}];function l(e){let r={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(r.p,{children:"You can use arithmetic operators with one or two parameters to perform negation, addition, subtraction, multiplication, and division on numbers. Some of these operators are also used for arithmetic operations on date and time intervals. The parameters of the operators must be parsed as numeric data types, or any data type that can be implicitly converted to numeric data types."}),"\n",(0,i.jsx)(r.p,{children:'Unary arithmetic operators return the same data type as the parameter numeric data type. For binary arithmetic operators, Doris will convert the parameters to the appropriate type for computation according to implicit type conversion rules, and return the appropriate type as the result. For specific conversion rules, please refer to the "Type Conversion" section.'}),"\n",(0,i.jsx)(r.h2,{id:"operators",children:"Operators"}),"\n",(0,i.jsxs)("table",{border:"1",children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{style:{width:"20%"},children:"Operators"}),(0,i.jsx)("th",{style:{width:"60%"},children:"Purpose"}),(0,i.jsx)("th",{style:{width:"20%"},children:"Example"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"+ -"}),(0,i.jsx)("td",{children:"Unary operator. It represents taking the positive or negative value of an expression. Equivalent to 0 + a and 0 - a"}),(0,i.jsx)("td",{children:(0,i.jsxs)("pre",{children:[(0,i.jsx)("div",{children:"SELECT +(5 + 3), -(5 + 3);"}),(0,i.jsx)("div",{children:"+---------+---------------+"}),(0,i.jsx)("div",{children:"| (5 + 3) | (0 - (5 + 3)) |"}),(0,i.jsx)("div",{children:"+---------+---------------+"}),(0,i.jsx)("div",{children:"| 8       | -8            |"}),(0,i.jsx)("div",{children:"+---------+---------------+"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"+ -"}),(0,i.jsx)("td",{children:"Binary operator. It represents adding or subtracting two expressions."}),(0,i.jsx)("td",{children:(0,i.jsxs)("pre",{children:[(0,i.jsx)("div",{children:"SELECT 5 + 3, 5 - 3;"}),(0,i.jsx)("div",{children:"+---------+---------+"}),(0,i.jsx)("div",{children:"| (5 + 3) | (5 - 3) |"}),(0,i.jsx)("div",{children:"+---------+---------+"}),(0,i.jsx)("div",{children:"| 8       | 2       |"}),(0,i.jsx)("div",{children:"+---------+---------+"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"*"}),(0,i.jsx)("td",{children:"Binary operator. It represents multiplying or dividing two expressions. Special case: when the second argument of division is 0, it returns NULL"}),(0,i.jsx)("td",{children:(0,i.jsxs)("pre",{children:[(0,i.jsx)("div",{children:"SELECT 5 * 3, 5 / 3;"}),(0,i.jsx)("div",{children:"+---------+-----------------------------------------+"}),(0,i.jsx)("div",{children:"| (5 * 3) | (cast(5 as DOUBLE) / cast(3 as DOUBLE)) |"}),(0,i.jsx)("div",{children:"+---------+-----------------------------------------+"}),(0,i.jsx)("div",{children:"| 15      | 1.6666666666666667                      |"}),(0,i.jsx)("div",{children:"+---------+-----------------------------------------+"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"DIV"}),(0,i.jsx)("td",{children:"Binary operator. It represents integer division of two expressions. Special case: when the second argument is 0, it returns NULL"}),(0,i.jsx)("td",{children:(0,i.jsxs)("pre",{children:[(0,i.jsx)("div",{children:"SELECT 5 DIV 3, 9 DIV 0;"}),(0,i.jsx)("div",{children:"+-----------+-----------+"}),(0,i.jsx)("div",{children:"| (5 DIV 3) | (9 DIV 0) |"}),(0,i.jsx)("div",{children:"+-----------+-----------+"}),(0,i.jsx)("div",{children:"| 1         | NULL      |"}),(0,i.jsx)("div",{children:"+-----------+-----------+"})]})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"%"}),(0,i.jsx)("td",{children:"Binary operator. It represents the remainder of two expressions. Special case: when the second argument is 0, it returns NULL"}),(0,i.jsx)("td",{children:(0,i.jsxs)("pre",{children:[(0,i.jsx)("div",{children:"SELECT 5 % 3, 9 % 0;"}),(0,i.jsx)("div",{children:"+---------+---------+"}),(0,i.jsx)("div",{children:"| (5 % 3) | (9 % 0) |"}),(0,i.jsx)("div",{children:"+---------+---------+"}),(0,i.jsx)("div",{children:"| 2       | NULL    |"}),(0,i.jsx)("div",{children:"+---------+---------+"})]})})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,i.jsx)(r.p,{children:"In arithmetic expressions:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Do not use consecutive minus signs ",(0,i.jsx)(r.code,{children:"--"})," to indicate double negation (this is the SQL comment symbol)"]}),"\n",(0,i.jsxs)(r.li,{children:["Use spaces or parentheses to separate as needed: ",(0,i.jsx)(r.code,{children:"-(-5)"})," or ",(0,i.jsx)(r.code,{children:"- -5"})]}),"\n",(0,i.jsx)(r.li,{children:'For more comment standards, please refer to the "Comments" section'}),"\n"]})]})}function h(e={}){let{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},250065:function(e,r,t){t.d(r,{Z:function(){return d},a:function(){return o}});var s=t(667294);let i={},n=s.createContext(i);function o(e){let r=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);