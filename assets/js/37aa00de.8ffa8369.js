"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["469075"],{558025:function(e,n,t){t.r(n),t.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>r,assets:()=>l,toc:()=>d,contentTitle:()=>i});var r=JSON.parse('{"id":"ecosystem/observability/opentelemetry","title":"OpenTelemetry","description":"Introduction","source":"@site/docs/ecosystem/observability/opentelemetry.md","sourceDirName":"ecosystem/observability","slug":"/ecosystem/observability/opentelemetry","permalink":"/docs/dev/ecosystem/observability/opentelemetry","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"OpenTelemetry","language":"en"},"sidebar":"docs","previous":{"title":"Filebeat","permalink":"/docs/dev/ecosystem/observability/beats"},"next":{"title":"FluentBit","permalink":"/docs/dev/ecosystem/observability/fluentbit"}}'),s=t("785893"),o=t("250065");let a={title:"OpenTelemetry",language:"en"},i="Doris OpenTelemetry Integration",l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Parameter Configuration",id:"parameter-configuration",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Usage Example",id:"usage-example-1",level:2},{value:"TEXT Log Collection Example",id:"text-log-collection-example",level:3},{value:"JSON Log Collection Example",id:"json-log-collection-example",level:3},{value:"Trace Collection Example",id:"trace-collection-example",level:3}];function c(e){let n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"doris-opentelemetry-integration",children:"Doris OpenTelemetry Integration"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"OpenTelemetry, also known as OTel, is a vendor-neutral open source Observability framework for instrumenting, generating, collecting, and exporting telemetry data such as traces, metrics, and logs. OpenTelemetry defines a set of standards and protocols for observability, widely adopted by the observability community and vendors, gradually becoming the de facto standard in the field of observability."}),"\n",(0,s.jsx)(n.p,{children:"A major goal of OpenTelemetry is to enable easy instrumentation of your applications and systems, regardless of the programming language, infrastructure, and runtime environments used. The backend (storage) and the frontend (visualization) of telemetry data are intentionally left to other tools. Doris, as a storage backend integrated with OpenTelemetry, provides high-performance, low-cost, unified observability data storage and analysis capabilities. The overall architecture is as follows:"}),"\n",(0,s.jsx)(n.img,{src:"/images/observability/otel_demo_doris.png",alt:"Doris OpenTelemetry Integration"}),"  \n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["Download the OpenTelemetry Collector Contrib installation package from the ",(0,s.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-releases/releases",children:"OpenTelemetry official Release page"}),", for example:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.132.2/otelcol-contrib_0.132.2_linux_amd64.tar.gz",children:"https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.132.2/otelcol-contrib_0.132.2_linux_amd64.tar.gz"})]}),"\n",(0,s.jsxs)(n.p,{children:["Extract the package to obtain the ",(0,s.jsx)(n.code,{children:"otelcol-contrib"})," executable file."]}),"\n",(0,s.jsx)(n.h2,{id:"parameter-configuration",children:"Parameter Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The core configuration of the OpenTelemetry Collector Doris Exporter is as follows:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Configuration"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"endpoint"})}),(0,s.jsxs)(n.td,{children:["Doris FE HTTP address in the format ",(0,s.jsx)(n.code,{children:"host:port"}),", e.g., ",(0,s.jsx)(n.code,{children:'"127.0.0.1:8030"'})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"mysql_endpoint"})}),(0,s.jsxs)(n.td,{children:["Doris FE MySQL address in the format ",(0,s.jsx)(n.code,{children:"host:port"}),", e.g., ",(0,s.jsx)(n.code,{children:'"127.0.0.1:9030"'})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"username"})}),(0,s.jsx)(n.td,{children:"Doris username with write permissions for the corresponding database tables"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"password"})}),(0,s.jsx)(n.td,{children:"Password for the Doris user"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"database"})}),(0,s.jsx)(n.td,{children:"Target Doris database name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"table.logs"})}),(0,s.jsxs)(n.td,{children:["Doris table name for logs data (default: ",(0,s.jsx)(n.code,{children:"otel_logs"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"table.traces"})}),(0,s.jsxs)(n.td,{children:["Doris table name for traces data (default: ",(0,s.jsx)(n.code,{children:"otel_traces"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"table.metrics"})}),(0,s.jsxs)(n.td,{children:["Doris table name for metrics data (default: ",(0,s.jsx)(n.code,{children:"otel_metrics"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"create_schema"})}),(0,s.jsxs)(n.td,{children:["Whether to automatically create Doris database tables (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"history_days"})}),(0,s.jsxs)(n.td,{children:["Retention days for historical data in auto-created tables (default: ",(0,s.jsx)(n.code,{children:"0"}),", meaning permanent retention)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"create_history_days"})}),(0,s.jsxs)(n.td,{children:["Initial partition days for auto-created tables (default: ",(0,s.jsx)(n.code,{children:"0"}),", meaning no partitions created)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"label_prefix"})}),(0,s.jsxs)(n.td,{children:["Doris Stream Load Label prefix. The final label is ",(0,s.jsx)(n.code,{children:"{label_prefix}_{db}_{table}_{yyyymmdd_hhmmss}_{uuid}"})," (default: ",(0,s.jsx)(n.code,{children:"open_telemetry"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"headers"})}),(0,s.jsx)(n.td,{children:"Headers for Doris Stream Load in YAML map format"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"log_progress_interval"})}),(0,s.jsxs)(n.td,{children:["Interval (in seconds) for logging throughput (default: ",(0,s.jsx)(n.code,{children:"10"}),", set to ",(0,s.jsx)(n.code,{children:"0"})," to disable)"]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["For more configurations, refer to:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/dorisexporter",children:"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/dorisexporter"})]}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.h2,{id:"usage-example-1",children:"Usage Example"}),"\n",(0,s.jsx)(n.h3,{id:"text-log-collection-example",children:"TEXT Log Collection Example"}),"\n",(0,s.jsx)(n.p,{children:"This example demonstrates TEXT log collection using Doris FE logs."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Data"})}),"\n",(0,s.jsxs)(n.p,{children:["FE log files are typically located in the ",(0,s.jsx)(n.code,{children:"fe/log/fe.log"})," file under the Doris installation directory. These are standard Java program logs, including fields such as timestamps, log levels, thread names, code locations, and log content. In addition to normal logs, there are also exception logs with stack traces. Since stack traces span multiple lines, the log collection and storage process must combine the main log and stack trace into a single log entry."]}),"\n",(0,s.jsx)(n.p,{children:"Example logs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"2024-07-08 21:18:01,432 INFO (Statistics Job Appender|61) [StatisticsJobAppender.runAfterCatalogReady():70] Stats table not available, skip  \n2024-07-08 21:18:53,710 WARN (STATS_FETCH-0|208) [StmtExecutor.executeInternalQuery():3332] Failed to run internal SQL: OriginStatement{originStmt='SELECT * FROM __internal_schema.column_statistics WHERE part_id is NULL  ORDER BY update_time DESC LIMIT 500000', idx=0}  \norg.apache.doris.common.UserException: errCode = 2, detailMessage = tablet 10031 has no queryable replicas. err: replica 10032's backend 10008 does not exist or not alive  \n        at org.apache.doris.planner.OlapScanNode.addScanRangeLocations(OlapScanNode.java:931) ~[doris-fe.jar:1.2-SNAPSHOT]  \n        at org.apache.doris.planner.OlapScanNode.computeTabletInfo(OlapScanNode.java:1197) ~[doris-fe.jar:1.2-SNAPSHOT]  \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. OpenTelemetry Configuration"})}),"\n",(0,s.jsxs)(n.p,{children:["The log collection configuration file (e.g., ",(0,s.jsx)(n.code,{children:"opentelemetry_java_log.yml"}),") consists of three main parts, corresponding to the ETL process:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Receivers"})," \u2013 Read raw data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Processors"})," \u2013 Transform data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exporters"})," \u2013 Output data."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example configuration (",(0,s.jsx)(n.code,{children:"opentelemetry_java_log.yml"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# 1. Receivers \u2013 Read raw data  \n# The `filelog` receiver reads log files from the local filesystem.  \n# The `multiline` configuration merges stack traces with the main log by matching timestamps.  \nreceivers:  \n  filelog:  \n    include:  \n      - /path/to/fe.log  \n    start_at: beginning  \n    multiline:  \n      line_start_pattern: '^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}'  # Match timestamp as new log start  \n    operators:  \n      # Parse logs  \n      - type: regex_parser  \n        regex: '^(?P<time>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) (?P<severity>INFO|WARN|ERROR) (?P<message>.*)'  \n        timestamp:  \n          parse_from: attributes.time  \n          layout: '%Y-%m-%d %H:%M:%S,%f'  \n        severity:  \n          parse_from: attributes.severity  \n          trace: TRACE  \n          debug: DEBUG  \n          info: INFO  \n          warn: WARN  \n          error: ERROR  \n          fatal: FATAL  \n\n# 2. Processors \u2013 Transform data  \n# The `batch` processor groups logs before sending.  \nprocessors:  \n  batch:  \n    send_batch_size: 100000  # Number of logs per batch (recommended batch size: 100MB\u20131GB)  \n    timeout: 10s  \n\n# 3. Exporters \u2013 Output data  \n# The `doris` exporter sends data to Doris using the Stream Load HTTP interface (JSON format by default).  \nexporters:  \n  doris:  \n    endpoint: http://localhost:8030  # FE HTTP address  \n    mysql_endpoint: localhost:9030   # FE MySQL address  \n    database: doris_db_name  \n    username: doris_username  \n    password: doris_password  \n    table:  \n      logs: otel_logs  \n    create_schema: true  # Automatically create schema (if false, tables must be created manually)  \n    history_days: 10  \n    create_history_days: 10  \n    timezone: Asia/Shanghai  \n    timeout: 60s  # HTTP Stream Load client timeout  \n    log_response: true  \n    sending_queue:  \n      enabled: true  \n      num_consumers: 20  \n      queue_size: 1000  \n    retry_on_failure:  \n      enabled: true  \n      initial_interval: 5s  \n      max_interval: 30s  \n    headers:  \n      load_to_single_tablet: \"true\"  \n\nservice:  \n  pipelines:  \n    logs:  \n      receivers: [filelog]  \n      processors: [batch]  \n      exporters: [doris]  \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"3. Running OpenTelemetry"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'./otelcol-contrib --config config/opentelemetry_java_log.yml  \n\n# When `log_response` is true, logs will display Stream Load request/response details:  \n2025-08-18T00:33:22.543+0800	info	dorisexporter@v0.132.0/exporter_logs.go:181	log response:  \n{  \n    "TxnId": 52,  \n    "Label": "open_telemetry_otel_otel_logs_20250818003321_498bb8ec-040c-4982-9eb4-452b15129782",  \n    "Comment": "",  \n    "TwoPhaseCommit": "false",  \n    "Status": "Success",  \n    "Message": "OK",  \n    "NumberTotalRows": 50355,  \n    "NumberLoadedRows": 50355,  \n    "NumberFilteredRows": 0,  \n    "NumberUnselectedRows": 0,  \n    "LoadBytes": 31130235,  \n    "LoadTimeMs": 680,  \n    "BeginTxnTimeMs": 0,  \n    "StreamLoadPutTimeMs": 3,  \n    "ReadDataTimeMs": 106,  \n    "WriteDataTimeMs": 653,  \n    "ReceiveDataTimeMs": 11,  \n    "CommitAndPublishTimeMs": 23  \n}  \n\n# Progress logs (every 10s) show throughput:  \n2025-08-18T00:05:00.017+0800	info	dorisexporter@v0.132.0/progress_reporter.go:63	[LOG] total 11 MB 18978 ROWS, total speed 0 MB/s 632 R/s, last 10 seconds speed 1 MB/s 1897 R/s  \n'})}),"\n",(0,s.jsx)(n.h3,{id:"json-log-collection-example",children:"JSON Log Collection Example"}),"\n",(0,s.jsx)(n.p,{children:"This example demonstrates JSON log collection using GitHub Events Archive data."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Data"})}),"\n",(0,s.jsxs)(n.p,{children:["GitHub Events Archive contains archived user activity events in JSON format, downloadable from ",(0,s.jsx)(n.a,{href:"https://www.gharchive.org/",children:"https://www.gharchive.org/"}),". For example, to download data from January 1, 2024, at 15:00:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"wget https://data.gharchive.org/2024-01-01-15.json.gz\n"})}),"\n",(0,s.jsx)(n.p,{children:"Below is a sample entry (formatted for readability; actual data is one JSON object per line):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "37066529221",\n  "type": "PushEvent",\n  "actor": {\n    "id": 46139131,\n    "login": "Bard89",\n    "display_login": "Bard89",\n    "gravatar_id": "",\n    "url": "https://api.github.com/users/Bard89",\n    "avatar_url": "https://avatars.githubusercontent.com/u/46139131?"\n  },\n  "repo": {\n    "id": 780125623,\n    "name": "Bard89/talk-to-me",\n    "url": "https://api.github.com/repos/Bard89/talk-to-me"\n  },\n  "payload": {\n    "repository_id": 780125623,\n    "push_id": 17799451992,\n    "size": 1,\n    "distinct_size": 1,\n    "ref": "refs/heads/add_mvcs",\n    "head": "f03baa2de66f88f5f1754ce3fa30972667f87e81",\n    "before": "85e6544ede4ae3f132fe2f5f1ce0ce35a3169d21"\n  },\n  "public": true,\n  "created_at": "2024-04-01T23:00:00Z"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. OpenTelemetry Configuration"})}),"\n",(0,s.jsxs)(n.p,{children:["The key difference from the TEXT log configuration is the ",(0,s.jsx)(n.code,{children:"json_parser"})," operator in the ",(0,s.jsx)(n.code,{children:"filelog"})," receiver, which parses each line as JSON. Extracted fields are used for subsequent processing."]}),"\n",(0,s.jsxs)(n.p,{children:["Example configuration (",(0,s.jsx)(n.code,{children:"opentelemetry_json_log.yml"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"receivers:\n  filelog:\n    include:\n      - /path/to/2024-01-01-15.json\n    start_at: beginning\n    operators:\n      - type: json_parser\n        timestamp:\n          parse_from: attributes.created_at\n          layout: '%Y-%m-%dT%H:%M:%SZ'\n\nprocessors:\n  batch:\n    send_batch_size: 100000  # Logs per batch (recommended: 100MB\u20131GB total size)\n    timeout: 10s\n\nexporters:\n  doris:\n    endpoint: http://localhost:8030  # FE HTTP address\n    mysql_endpoint: localhost:9030   # FE MySQL address\n    database: doris_db_name\n    username: doris_username\n    password: doris_password\n    table:\n      logs: otel_logs\n    create_schema: true  # Auto-create schema (if false, manually create tables)\n    history_days: 10\n    create_history_days: 10\n    timezone: Asia/Shanghai\n    timeout: 60s  # HTTP Stream Load client timeout\n    log_response: true\n    sending_queue:\n      enabled: true\n      num_consumers: 20\n      queue_size: 1000\n    retry_on_failure:\n      enabled: true\n      initial_interval: 5s\n      max_interval: 30s\n    headers:\n      load_to_single_tablet: \"true\"\n\nservice:\n  pipelines:\n    logs:\n      receivers: [filelog]\n      processors: [batch]\n      exporters: [doris]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"3. Running OpenTelemetry"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./otelcol-contrib --config config/opentelemetry_json_log.yml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"trace-collection-example",children:"Trace Collection Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. OpenTelemetry Configuration"})}),"\n",(0,s.jsxs)(n.p,{children:["Create the configuration file ",(0,s.jsx)(n.code,{children:"otel_trace.yml"})," as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'receivers:\n  otlp:  # OTLP protocol to receive data from OpenTelemetry Java Agent\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nprocessors:\n  batch:\n    send_batch_size: 100000  # Number of traces per batch (recommended batch size: 100MB\u20131GB)\n    timeout: 10s\n\nexporters:\n  doris:\n    endpoint: http://localhost:8030  # FE HTTP address\n    database: doris_db_name\n    username: doris_username\n    password: doris_password\n    table:\n      traces: doris_table_name\n    create_schema: true  # Auto-create schema (if false, tables must be created manually)\n    mysql_endpoint: localhost:9030  # FE MySQL address\n    history_days: 10\n    create_history_days: 10\n    timezone: Asia/Shanghai\n    timeout: 60s  # HTTP Stream Load client timeout\n    log_response: true\n    sending_queue:\n      enabled: true\n      num_consumers: 20\n      queue_size: 1000\n    retry_on_failure:\n      enabled: true\n      initial_interval: 5s\n      max_interval: 30s\n    headers:\n      load_to_single_tablet: "true"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [doris]\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. Run OpenTelemetry"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./otelcol-contrib --config otel_trace.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"3. Application Integration with OpenTelemetry SDK"})}),"\n",(0,s.jsxs)(n.p,{children:["Here we demonstrate integration using a Spring Boot example application (from the official ",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-boot/tutorial/first-application/index.html",children:"demo"}),'), which returns "Hello World!" for the "/" endpoint.']}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Download the ",(0,s.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases",children:"OpenTelemetry Java Agent"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Advantage: No code changes required for existing applications."}),"\n",(0,s.jsxs)(n.li,{children:["For other languages/integration methods, see OpenTelemetry docs:\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://opentelemetry.io/docs/languages/",children:"Language APIs & SDKs"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://opentelemetry.io/docs/zero-code/",children:"Zero-code Instrumentation"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Before starting the application, set these environment variables (no code modification needed):"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export JAVA_TOOL_OPTIONS="${JAVA_TOOL_OPTIONS} -javaagent:/your/path/to/opentelemetry-javaagent.jar"  # Path to OpenTelemetry Java Agent\nexport OTEL_JAVAAGENT_LOGGING="none"  # Disable OTEL logs to avoid interference with application logs\nexport OTEL_SERVICE_NAME="myproject"\nexport OTEL_TRACES_EXPORTER="otlp"  # Use OTLP protocol to send trace data\nexport OTEL_EXPORTER_OTLP_ENDPOINT="http://localhost:4317"  # OpenTelemetry Collector address\n\njava -jar myproject-0.0.1-SNAPSHOT.jar\n'})})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return a}});var r=t(667294);let s={},o=r.createContext(s);function a(e){let n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);