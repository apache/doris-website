"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["206778"],{763795:function(e,n,s){s.r(n),s.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>t,assets:()=>o,toc:()=>c,contentTitle:()=>i});var t=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/json-functions/to-json","title":"TO_JSON","description":"\x3c!--","source":"@site/docs/sql-manual/sql-functions/scalar-functions/json-functions/to-json.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/json-functions","slug":"/sql-manual/sql-functions/scalar-functions/json-functions/to-json","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/to-json","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"TO_JSON","language":"en"},"sidebar":"docs","previous":{"title":"SORT_JSON_OBJECT_KEYS","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/sort-json-object-keys"},"next":{"title":"ELEMENT_AT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/variant-functions/element-at"}}'),a=s("785893"),l=s("250065");let r={title:"TO_JSON",language:"en"},i=void 0,o={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic scalar values",id:"basic-scalar-values",level:3},{value:"Date types",id:"date-types",level:3},{value:"IP types",id:"ip-types",level:3},{value:"Array conversion",id:"array-conversion",level:3},{value:"Accessing array elements in resulting JSON",id:"accessing-array-elements-in-resulting-json",level:3},{value:"Struct conversion",id:"struct-conversion",level:3},{value:"Accessing object properties in resulting JSON",id:"accessing-object-properties-in-resulting-json",level:3},{value:"MAP conversion",id:"map-conversion",level:3},{value:"Handling NULL values",id:"handling-null-values",level:3},{value:"Unsupported Doris Types",id:"unsupported-doris-types",level:3},{value:"Notes",id:"notes",level:2}];function d(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"Converts Doris internal data types to JSONB type. This function allows for converting compatible Doris data types into JSON representation without precision loss."}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"TO_JSON(value)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"value"})," - The value to be converted to JSONB type."]}),"\n",(0,a.jsx)(n.p,{children:"The following types have direct mapping to JSONB types and can be converted directly:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,a.jsx)(n.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,a.jsx)(n.li,{children:"String type: STRING, VARCHAR, CHAR"}),"\n",(0,a.jsx)(n.li,{children:"Complex types: ARRAY, STRUCT"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Additionally, the function supports converting the following types:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Date types: DATETIME, DATE, TIME"}),"\n",(0,a.jsx)(n.li,{children:"IP types: IPV4, IPV6"}),"\n",(0,a.jsx)(n.li,{children:"Complex types: MAP"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For DATETIME, DATE, TIME, IPV4, IPV6 types that don't have corresponding JSONB types, they will be converted to STRING type.\nFor MAP type, it will be converted to JSONB Object type. The Map keys must be STRING type, as JSON standard requires Object keys to be strings."}),"\n",(0,a.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsx)(n.p,{children:"Returns a value of JSONB type."}),"\n",(0,a.jsxs)(n.p,{children:["When the input ",(0,a.jsx)(n.code,{children:"value"})," is SQL NULL, the function returns SQL NULL (not a JSON null value). When NULL values appear within arrays or structs, they are converted to JSON null values."]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.h3,{id:"basic-scalar-values",children:"Basic scalar values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT to_json(1), to_json(3.14), to_json("12345");\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'+------------+---------------+------------------+\n| to_json(1) | to_json(3.14) | to_json("12345") |\n+------------+---------------+------------------+\n| 1          | 3.14          | "12345"          |\n+------------+---------------+------------------+\n'})}),"\n",(0,a.jsx)(n.h3,{id:"date-types",children:"Date types"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT \n     to_json(cast('2020-01-01' as date)) , \n     to_json(cast('2020-01-01 12:00:00' as datetime)),\n     to_json(cast('2020-01-01 12:00:00.123' as datetime(3))),\n     to_json(cast('2020-01-01 12:00:00.123456' as datetime(6))),\n     to_json(cast('8:23:45' as time));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+-------------------------------------+--------------------------------------------------+---------------------------------------------------------+------------------------------------------------------------+----------------------------------+\n| to_json(cast('2020-01-01' as date)) | to_json(cast('2020-01-01 12:00:00' as datetime)) | to_json(cast('2020-01-01 12:00:00.123' as datetime(3))) | to_json(cast('2020-01-01 12:00:00.123456' as datetime(6))) | to_json(cast('8:23:45' as time)) |\n+-------------------------------------+--------------------------------------------------+---------------------------------------------------------+------------------------------------------------------------+----------------------------------+\n| \"2020-01-01\"                        | \"2020-01-01 12:00:00\"                            | \"2020-01-01 12:00:00.123\"                               | \"2020-01-01 12:00:00.123456\"                               | \"08:23:45\"                       |\n+-------------------------------------+--------------------------------------------------+---------------------------------------------------------+------------------------------------------------------------+----------------------------------+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"ip-types",children:"IP types"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT \n     to_json(cast('192.168.0.1' as ipv4)) , \n     to_json(cast('2001:0db8:85a3:0000:0000:8a2e:0370:7334' as ipv6));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+--------------------------------------+------------------------------------------------------------------+\n| to_json(cast('192.168.0.1' as ipv4)) | to_json(cast('2001:0db8:85a3:0000:0000:8a2e:0370:7334' as ipv6)) |\n+--------------------------------------+------------------------------------------------------------------+\n| \"192.168.0.1\"                        | \"2001:db8:85a3::8a2e:370:7334\"                                   |\n+--------------------------------------+------------------------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"array-conversion",children:"Array conversion"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT to_json(array(array(1,2,3),array(4,5,6)));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+-------------------------------------------+\n| to_json(array(array(1,2,3),array(4,5,6))) |\n+-------------------------------------------+\n| [[1,2,3],[4,5,6]]                         |\n+-------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT to_json(array(12,34,null));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+----------------------------+\n| to_json(array(12,34,null)) |\n+----------------------------+\n| [12,34,null]               |\n+----------------------------+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"accessing-array-elements-in-resulting-json",children:"Accessing array elements in resulting JSON"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT json_extract(to_json(array(array(1,2,3),array(4,5,6))), '$.[1].[2]');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+----------------------------------------------------------------------+\n| json_extract(to_json(array(array(1,2,3),array(4,5,6))), '$.[1].[2]') |\n+----------------------------------------------------------------------+\n| 6                                                                    |\n+----------------------------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"struct-conversion",children:"Struct conversion"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT to_json(struct(123,array(4,5,6),"789"));\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'+------------------------------------------+\n| to_json(struct(123,array(4,5,6),"789"))  |\n+------------------------------------------+\n| {"col1":123,"col2":[4,5,6],"col3":"789"} |\n+------------------------------------------+\n'})}),"\n",(0,a.jsx)(n.h3,{id:"accessing-object-properties-in-resulting-json",children:"Accessing object properties in resulting JSON"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT json_extract(to_json(struct(123,array(4,5,6),"789")),"$.col2");\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'+----------------------------------------------------------------+\n| json_extract(to_json(struct(123,array(4,5,6),"789")),"$.col2") |\n+----------------------------------------------------------------+\n| [4,5,6]                                                        |\n+----------------------------------------------------------------+\n'})}),"\n",(0,a.jsx)(n.h3,{id:"map-conversion",children:"MAP conversion"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT to_json(map("1",2,"abc",3));  \n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'+-----------------------------+\n| to_json(map("1",2,"abc",3)) |\n+-----------------------------+\n| {"1":2,"abc":3}             |\n+-----------------------------+\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT to_json(map(1,2));  \n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"to_json only support map with string-like key type\n"})}),"\n",(0,a.jsx)(n.h3,{id:"handling-null-values",children:"Handling NULL values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- SQL NULL as input returns SQL NULL\nSELECT to_json(null);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+---------------+\n| to_json(null) |\n+---------------+\n| NULL          |\n+---------------+\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- NULL values within arrays become JSON null values\nSELECT to_json(array(12,34,null));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+----------------------------+\n| to_json(array(12,34,null)) |\n+----------------------------+\n| [12,34,null]               |\n+----------------------------+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"unsupported-doris-types",children:"Unsupported Doris Types"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT to_json(makedate(2025,5));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"ERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: to_json(DATE)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Convert to string first and then apply to_json\nSELECT to_json(cast(makedate(2025,5) as string));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'+-------------------------------------------+\n| to_json(cast(makedate(2025,5) as string)) |\n+-------------------------------------------+\n| "2025-01-05"                              |\n+-------------------------------------------+\n'})}),"\n",(0,a.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Some types do not have direct JSON mapping (like DATE). For these types, you need to convert them to STRING first, then use ",(0,a.jsx)(n.code,{children:"TO_JSON"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["When converting Doris internal types to JSONB using ",(0,a.jsx)(n.code,{children:"TO_JSON"}),", there is no precision loss, unlike when converting through text representation."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["JSONB objects in Doris have a size limitation of 1,048,576 bytes (1 MB) by default, which can be adjusted through the BE configuration ",(0,a.jsx)(n.code,{children:"string_type_length_soft_limit_bytes"})," up to 2,147,483,643 bytes (approximately 2 GB)."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"In Doris JSON objects, keys cannot exceed 255 bytes in length."}),"\n"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return i},a:function(){return r}});var t=s(667294);let a={},l=t.createContext(a);function r(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);