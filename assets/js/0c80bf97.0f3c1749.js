"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["9591"],{153702:function(e,n,t){t.r(n),t.d(n,{default:()=>d,frontMatter:()=>a,metadata:()=>s,assets:()=>o,toc:()=>c,contentTitle:()=>l});var s=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/date-time-functions/sec-to-time","title":"SEC_TO_TIME","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/date-time-functions/sec-to-time.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/date-time-functions","slug":"/sql-manual/sql-functions/scalar-functions/date-time-functions/sec-to-time","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/sec-to-time","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SEC_TO_TIME","language":"en"},"sidebar":"docs","previous":{"title":"QUARTERS_SUB","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/quarters-sub"},"next":{"title":"SECOND","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/second"}}'),i=t("785893"),r=t("250065");let a={title:"SEC_TO_TIME",language:"en"},l=void 0,o={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function u(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"The SEC_TO_TIME function converts a numeric value in seconds to TIME type,The return format is HH:MM:SS or HH:MM:SS.ssssss. The input seconds represent the time calculated from the starting point of a day (00:00:00.000000), supporting positive and negative seconds as well as time ranges exceeding one day."}),"\n",(0,i.jsxs)(n.p,{children:["This function is consistent with the ",(0,i.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sec-to-time",children:"sec_to_time function"})," in MySQL."]}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SEC_TO_TIME(<seconds>)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<seconds>"})}),(0,i.jsx)(n.td,{children:"Required. The input number of seconds, representing the seconds calculated from the start of a day (00:00:00). Supports positive or negative integer types."})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)(n.p,{children:"Returns a TIME type value converted from seconds."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the input seconds exceed the valid range of TIME type (-838:59:59 to 838:59:59, corresponding to seconds range -3023999 to 3023999), returns TIME max or min value"}),"\n",(0,i.jsx)(n.li,{children:"If the input is NULL, returns NULL"}),"\n",(0,i.jsx)(n.li,{children:"if the input is an integer, the return format is HH:MM:SS; if the input is a floating-point number, the return format is HH:MM:SS.ssssss."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Positive seconds (time within the day)\nSELECT SEC_TO_TIME(59738) AS result;\n+----------+\n| result   |\n+----------+\n| 16:35:38 |\n+----------+\n\n-- Seconds exceeding one day (automatically converted to multiple hours)\nSELECT SEC_TO_TIME(90061) AS result;\n+----------+\n| result   |\n+----------+\n| 25:01:01 |\n+----------+\n\n-- Negative seconds (time from previous day)\nSELECT SEC_TO_TIME(-3600) AS result;\n+----------+\n| result   |\n+----------+\n| -01:00:00 |\n+----------+\n\n-- Zero seconds (start time)\nSELECT SEC_TO_TIME(0) AS result;\n+----------+\n| result   |\n+----------+\n| 00:00:00 |\n+----------+\n\n-- Decimal seconds\nSELECT SEC_TO_TIME(3661.9) AS result;\n+-----------------+\n| result          |\n+-----------------+\n| 01:01:01.900000 |\n+-----------------+\n\n-- Input is NULL (returns NULL)\nSELECT SEC_TO_TIME(NULL) AS result;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\n--- If the input seconds exceed the valid range of TIME type (-838:59:59 to 838:59:59, corresponding to seconds range -3023999 to 3023999), returns TIME max or min value\n SELECT SEC_TO_TIME(30245000) AS result;\n+-----------+\n| result    |\n+-----------+\n| 838:59:59 |\n+-----------+\n\nSELECT SEC_TO_TIME(-30245000) AS result;\n+------------+\n| result     |\n+------------+\n| -838:59:59 |\n+------------+\n"})})]})}function d(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return a}});var s=t(667294);let i={},r=s.createContext(i);function a(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);