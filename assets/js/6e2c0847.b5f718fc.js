"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["762673"],{646059:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>o,metadata:()=>r,assets:()=>l,toc:()=>d,contentTitle:()=>a});var r=JSON.parse('{"id":"ecosystem/flink-doris-connector","title":"Flink Doris Connector","description":"* Flink Doris Connector can support data stored in Doris through Flink operations (read, insert, modify, delete). This document introduces how to operate Doris through Datastream and SQL through Flink.","source":"@site/versioned_docs/version-2.0/ecosystem/flink-doris-connector.md","sourceDirName":"ecosystem","slug":"/ecosystem/flink-doris-connector","permalink":"/docs/2.0/ecosystem/flink-doris-connector","draft":false,"unlisted":false,"tags":[],"version":"2.0","frontMatter":{"title":"Flink Doris Connector","language":"en"},"sidebar":"docs","previous":{"title":"Spark Doris Connector","permalink":"/docs/2.0/ecosystem/spark-doris-connector"},"next":{"title":"Doris Kafka Connector","permalink":"/docs/2.0/ecosystem/doris-kafka-connector"}}'),i=s("785893"),t=s("250065");let o={title:"Flink Doris Connector",language:"en"},a="Flink Doris Connector",l={},d=[{value:"Version Compatibility",id:"version-compatibility",level:2},{value:"USE",id:"use",level:2},{value:"Maven",id:"maven",level:3},{value:"compile",id:"compile",level:3},{value:"Instructions",id:"instructions",level:2},{value:"Read",id:"read",level:3},{value:"Write",id:"write",level:3},{value:"Lookup Join",id:"lookup-join",level:3},{value:"Configuration",id:"configuration",level:2},{value:"General configuration items",id:"general-configuration-items",level:3},{value:"Source configuration item",id:"source-configuration-item",level:3},{value:"Datastream-specific configuration items",id:"datastream-specific-configuration-items",level:4},{value:"Sink configuration items",id:"sink-configuration-items",level:3},{value:"Lookup Join configuration item",id:"lookup-join-configuration-item",level:3},{value:"Doris &amp; Flink Column Type Mapping",id:"doris--flink-column-type-mapping",level:2},{value:"Flink write Metrics",id:"flink-write-metrics",level:2},{value:"An example of using Flink CDC to access Doris",id:"an-example-of-using-flink-cdc-to-access-doris",level:2},{value:"Example of using FlinkSQL to access and implement partial column updates through CDC",id:"example-of-using-flinksql-to-access-and-implement-partial-column-updates-through-cdc",level:2},{value:"Use Flink CDC to access multiple tables or the entire database (Supports MySQL, Oracle, PostgreSQL, SQLServer, MongoDB)",id:"use-flink-cdc-to-access-multiple-tables-or-the-entire-database-supports-mysql-oracle-postgresql-sqlserver-mongodb",level:2},{value:"Grammar",id:"grammar",level:3},{value:"MySQL synchronization example",id:"mysql-synchronization-example",level:3},{value:"Oracle synchronization example",id:"oracle-synchronization-example",level:3},{value:"PostgreSQL synchronization example",id:"postgresql-synchronization-example",level:3},{value:"SQLServer synchronization example",id:"sqlserver-synchronization-example",level:3},{value:"DB2 synchronization example",id:"db2-synchronization-example",level:3},{value:"MongoDB synchronization example",id:"mongodb-synchronization-example",level:3},{value:"Use Flink CDC to update Key column",id:"use-flink-cdc-to-update-key-column",level:2},{value:"Principle",id:"principle",level:3},{value:"Example",id:"example",level:3},{value:"Use Flink to delete data based on specified columns",id:"use-flink-to-delete-data-based-on-specified-columns",level:2},{value:"Example",id:"example-1",level:3},{value:"Java example",id:"java-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Application scenarios",id:"application-scenarios",level:3},{value:"Other",id:"other",level:3},{value:"FAQ",id:"faq",level:2}];function c(e){let n={a:"a",admonition:"admonition",annotation:"annotation",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"flink-doris-connector",children:"Flink Doris Connector"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector",children:"Flink Doris Connector"})," can support data stored in Doris through Flink operations (read, insert, modify, delete). This document introduces how to operate Doris through Datastream and SQL through Flink."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Note:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Modification and deletion are only supported on the Unique Key model"}),"\n",(0,i.jsx)(n.li,{children:"The current deletion is to support Flink CDC to access data to achieve automatic deletion. If it is to delete other data access methods, you need to implement it yourself. For the data deletion usage of Flink CDC, please refer to the last section of this document"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"version-compatibility",children:"Version Compatibility"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Connector Version"}),(0,i.jsx)(n.th,{children:"Flink Version"}),(0,i.jsx)(n.th,{children:"Doris Version"}),(0,i.jsx)(n.th,{children:"Java Version"}),(0,i.jsx)(n.th,{children:"Scala Version"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1.0.3"}),(0,i.jsx)(n.td,{children:"1.11,1.12,1.13,1.14"}),(0,i.jsx)(n.td,{children:"0.15+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"2.11,2.12"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1.1.1"}),(0,i.jsx)(n.td,{children:"1.14"}),(0,i.jsx)(n.td,{children:"1.0+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"2.11,2.12"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1.2.1"}),(0,i.jsx)(n.td,{children:"1.15"}),(0,i.jsx)(n.td,{children:"1.0+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1.3.0"}),(0,i.jsx)(n.td,{children:"1.16"}),(0,i.jsx)(n.td,{children:"1.0+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1.4.0"}),(0,i.jsx)(n.td,{children:"1.15,1.16,1.17"}),(0,i.jsx)(n.td,{children:"1.0+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1.5.2"}),(0,i.jsx)(n.td,{children:"1.15,1.16,1.17,1.18"}),(0,i.jsx)(n.td,{children:"1.0+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1.6.2"}),(0,i.jsx)(n.td,{children:"1.15,1.16,1.17,1.18,1.19"}),(0,i.jsx)(n.td,{children:"1.0+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"24.0.1"}),(0,i.jsx)(n.td,{children:"1.15,1.16,1.17,1.18,1.19,1.20"}),(0,i.jsx)(n.td,{children:"1.0+"}),(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:"-"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"use",children:"USE"}),"\n",(0,i.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,i.jsx)(n.p,{children:"Add flink-doris-connector"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\x3c!-- flink-doris-connector --\x3e\n<dependency>\n   <groupId>org.apache.doris</groupId>\n   <artifactId>flink-doris-connector-1.16</artifactId>\n   <version>24.0.1</version>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Remark"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Please replace the corresponding Connector and Flink dependent versions according to different Flink versions."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["You can also download the relevant version jar package from ",(0,i.jsx)(n.a,{href:"https://repo.maven.apache.org/maven2/org/apache/doris/",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"compile",children:"compile"}),"\n",(0,i.jsxs)(n.p,{children:["When compiling, you can run ",(0,i.jsx)(n.code,{children:"sh build.sh"})," directly. For details, please refer to ",(0,i.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/README.md",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["After the compilation is successful, the target jar package will be generated in the ",(0,i.jsx)(n.code,{children:"dist"})," directory, such as: ",(0,i.jsx)(n.code,{children:"flink-doris-connector-1.5.0-SNAPSHOT.jar"}),".\nCopy this file to ",(0,i.jsx)(n.code,{children:"classpath"})," of ",(0,i.jsx)(n.code,{children:"Flink"})," to use ",(0,i.jsx)(n.code,{children:"Flink-Doris-Connector"}),". For example, ",(0,i.jsx)(n.code,{children:"Flink"})," running in ",(0,i.jsx)(n.code,{children:"Local"})," mode, put this file in the ",(0,i.jsx)(n.code,{children:"lib/"})," folder. ",(0,i.jsx)(n.code,{children:"Flink"})," running in ",(0,i.jsx)(n.code,{children:"Yarn"})," cluster mode, put this file into the pre-deployment package."]}),"\n",(0,i.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,i.jsx)(n.h3,{id:"read",children:"Read"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"SQL"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- doris source\nCREATE TABLE flink_doris_source (\n     name STRING,\n     age INT,\n     price DECIMAL(5,2),\n     sale DOUBLE\n     )\n     WITH (\n       'connector' = 'doris',\n       'fenodes' = 'FE_IP:HTTP_PORT',\n       'table.identifier' = 'database.table',\n       'username' = 'root',\n       'password' = 'password'\n);\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"info",children:(0,i.jsxs)(n.p,{children:["Flink Connector 24.0.0 and later versions support using ",(0,i.jsx)(n.a,{href:"https://doris.apache.org/docs/dev/db-connect/arrow-flight-sql-connect/",children:"Arrow Flight SQL"})," to read data"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE doris_source (\nname STRING,\nage int\n) \nWITH (\n  'connector' = 'doris',\n  'fenodes' = 'FE_IP:HTTP_PORT',\n  'table.identifier' = 'database.table',\n  'source.use-flight-sql' = 'true',\n  'source.flight-sql-port' = '{fe.conf:arrow_flight_sql_port}',\n  'username' = 'root',\n  'password' = ''\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"DataStream"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'DorisOptions.Builder builder = DorisOptions.builder()\n         .setFenodes("FE_IP:HTTP_PORT")\n         .setTableIdentifier("db.table")\n         .setUsername("root")\n         .setPassword("password");\n\nDorisSource<List<?>> dorisSource = DorisSource.<List<?>>builder()\n         .setDorisOptions(builder.build())\n         .setDorisReadOptions(DorisReadOptions.builder().build())\n         .setDeserializer(new SimpleListDeserializationSchema())\n         .build();\n\nenv.fromSource(dorisSource, WatermarkStrategy.noWatermarks(), "doris source").print();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"write",children:"Write"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"SQL"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"--enable checkpoint\nSET 'execution.checkpointing.interval' = '10s';\n\n-- doris sink\nCREATE TABLE flink_doris_sink (\n     name STRING,\n     age INT,\n     price DECIMAL(5,2),\n     sale DOUBLE\n     )\n     WITH (\n       'connector' = 'doris',\n       'fenodes' = 'FE_IP:HTTP_PORT',\n       'table.identifier' = 'db.table',\n       'username' = 'root',\n       'password' = 'password',\n       'sink.label-prefix' = 'doris_label'\n);\n\n-- submit insert job\nINSERT INTO flink_doris_sink select name,age,price,sale from flink_doris_source\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"DataStream"})}),"\n",(0,i.jsx)(n.p,{children:"DorisSink writes data to Doris through StreamLoad, and DataStream supports different serialization methods when writing"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"String data stream (SimpleStringSerializer)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// enable checkpoint\nenv.enableCheckpointing(10000);\n// using batch mode for bounded data\nenv.setRuntimeMode(RuntimeExecutionMode.BATCH);\n\nDorisSink.Builder<String> builder = DorisSink.builder();\nDorisOptions.Builder dorisBuilder = DorisOptions.builder();\ndorisBuilder.setFenodes("FE_IP:HTTP_PORT")\n         .setTableIdentifier("db.table")\n         .setUsername("root")\n         .setPassword("password");\n\nProperties properties = new Properties();\n// When the upstream is writing json, the configuration needs to be enabled.\n//properties.setProperty("format", "json");\n//properties.setProperty("read_json_by_line", "true");\nDorisExecutionOptions.Builder executionBuilder = DorisExecutionOptions.builder();\nexecutionBuilder.setLabelPrefix("label-doris") //streamload label prefix\n                 .setDeletable(false)\n                 .setStreamLoadProp(properties); ;\n\nbuilder.setDorisReadOptions(DorisReadOptions.builder().build())\n         .setDorisExecutionOptions(executionBuilder.build())\n         .setSerializer(new SimpleStringSerializer()) //serialize according to string\n         .setDorisOptions(dorisBuilder.build());\n\n//mock string source\nList<Tuple2<String, Integer>> data = new ArrayList<>();\ndata.add(new Tuple2<>("doris",1));\nDataStreamSource<Tuple2<String, Integer>> source = env. fromCollection(data);\n\nsource.map((MapFunction<Tuple2<String, Integer>, String>) t -> t.f0 + "\\t" + t.f1)\n       .sinkTo(builder.build());\n\n//mock json string source\n//env.fromElements("{\\"name\\":\\"zhangsan\\",\\"age\\":1}").sinkTo(builder.build());\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RowData data stream (RowDataSerializer)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// enable checkpoint\nenv.enableCheckpointing(10000);\n// using batch mode for bounded data\nenv.setRuntimeMode(RuntimeExecutionMode.BATCH);\n\n//doris sink option\nDorisSink.Builder<RowData> builder = DorisSink.builder();\nDorisOptions.Builder dorisBuilder = DorisOptions.builder();\ndorisBuilder.setFenodes("FE_IP:HTTP_PORT")\n         .setTableIdentifier("db.table")\n         .setUsername("root")\n         .setPassword("password");\n\n// json format to streamload\nProperties properties = new Properties();\nproperties.setProperty("format", "json");\nproperties.setProperty("read_json_by_line", "true");\nDorisExecutionOptions.Builder executionBuilder = DorisExecutionOptions.builder();\nexecutionBuilder.setLabelPrefix("label-doris") //streamload label prefix\n                 .setDeletable(false)\n                 .setStreamLoadProp(properties); //streamload params\n\n//flink rowdata\'s schema\nString[] fields = {"city", "longitude", "latitude", "destroy_date"};\nDataType[] types = {DataTypes.VARCHAR(256), DataTypes.DOUBLE(), DataTypes.DOUBLE(), DataTypes.DATE()};\n\nbuilder.setDorisReadOptions(DorisReadOptions.builder().build())\n         .setDorisExecutionOptions(executionBuilder.build())\n         .setSerializer(RowDataSerializer.builder() //serialize according to rowdata\n                            .setFieldNames(fields)\n                            .setType("json") //json format\n                            .setFieldType(types).build())\n         .setDorisOptions(dorisBuilder.build());\n\n//mock rowdata source\nDataStream<RowData> source = env. fromElements("")\n     .map(new MapFunction<String, RowData>() {\n         @Override\n         public RowData map(String value) throws Exception {\n             GenericRowData genericRowData = new GenericRowData(4);\n             genericRowData.setField(0, StringData.fromString("beijing"));\n             genericRowData.setField(1, 116.405419);\n             genericRowData.setField(2, 39.916927);\n             genericRowData.setField(3, LocalDate.now().toEpochDay());\n             return genericRowData;\n         }\n     });\n\nsource. sinkTo(builder. build());\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CDC data stream (JsonDebeziumSchemaSerializer)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// enable checkpoint\nenv.enableCheckpointing(10000);\n\nProperties props = new Properties();\nprops. setProperty("format", "json");\nprops.setProperty("read_json_by_line", "true");\nDorisOptions dorisOptions = DorisOptions. builder()\n         .setFenodes("127.0.0.1:8030")\n         .setTableIdentifier("test.t1")\n         .setUsername("root")\n         .setPassword("").build();\n\nDorisExecutionOptions.Builder executionBuilder = DorisExecutionOptions.builder();\nexecutionBuilder.setLabelPrefix("label-prefix")\n         .setStreamLoadProp(props).setDeletable(true);\n\nDorisSink.Builder<String> builder = DorisSink.builder();\nbuilder.setDorisReadOptions(DorisReadOptions.builder().build())\n         .setDorisExecutionOptions(executionBuilder.build())\n         .setDorisOptions(dorisOptions)\n         .setSerializer(JsonDebeziumSchemaSerializer.builder().setDorisOptions(dorisOptions).build());\n\nenv.fromSource(mySqlSource, WatermarkStrategy.noWatermarks(), "MySQL Source")\n         .sinkTo(builder.build());\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Reference: ",(0,i.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/flink-doris-connector/src/test/java/org/apache/doris/flink/example/CDCSchemaChangeExample.java",children:"CDCSchemaChangeExample"})]}),"\n",(0,i.jsx)(n.h3,{id:"lookup-join",children:"Lookup Join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE fact_table (\n  `id` BIGINT,\n  `name` STRING,\n  `city` STRING,\n  `process_time` as proctime()\n) WITH (\n  'connector' = 'kafka',\n  ...\n);\n\ncreate table dim_city(\n  `city` STRING,\n  `level` INT ,\n  `province` STRING,\n  `country` STRING\n) WITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'jdbc-url' = 'jdbc:mysql://127.0.0.1:9030',\n  'table.identifier' = 'dim.dim_city',\n  'username' = 'root',\n  'password' = ''\n);\n\nSELECT a.id, a.name, a.city, c.province, c.country,c.level \nFROM fact_table a\nLEFT JOIN dim_city FOR SYSTEM_TIME AS OF a.process_time AS c\nON a.city = c.city\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"general-configuration-items",children:"General configuration items"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Default Value"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Comment"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"fenodes"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"Y"}),(0,i.jsx)(n.td,{children:"Doris FE http address, multiple addresses are supported, separated by commas"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"benodes"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsxs)(n.td,{children:["Doris BE http address, multiple addresses are supported, separated by commas. refer to ",(0,i.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/pull/187",children:"#187"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"jdbc-url"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"jdbc connection information, such as: jdbc:mysql://127.0.0.1:9030"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"table.identifier"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"Y"}),(0,i.jsx)(n.td,{children:"Doris table name, such as: db.tbl"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"username"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"Y"}),(0,i.jsx)(n.td,{children:"username to access Doris"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"password"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"Y"}),(0,i.jsx)(n.td,{children:"Password to access Doris"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"auto-redirect"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Whether to redirect StreamLoad requests. After being turned on, StreamLoad will be written through FE, and BE information will no longer be displayed."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.request.retries"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Number of retries to send requests to Doris"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.request.connect.timeout.ms"}),(0,i.jsx)(n.td,{children:"30000"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Connection timeout for sending requests to Doris"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.request.read.timeout.ms"}),(0,i.jsx)(n.td,{children:"30000"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Read timeout for sending requests to Doris"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"source-configuration-item",children:"Source configuration item"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Default Value"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Comment"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.request.query.timeout.s"}),(0,i.jsx)(n.td,{children:"3600"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The timeout time for querying Doris, the default value is 1 hour, -1 means no timeout limit"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.request.tablet.size"}),(0,i.jsx)(n.td,{children:"Integer. MAX_VALUE"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The number of Doris Tablets corresponding to a Partition. The smaller this value is set, the more Partitions will be generated. This improves the parallelism on the Flink side, but at the same time puts more pressure on Doris."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.batch.size"}),(0,i.jsx)(n.td,{children:"1024"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The maximum number of rows to read data from BE at a time. Increasing this value reduces the number of connections established between Flink and Doris. Thereby reducing the additional time overhead caused by network delay."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.exec.mem.limit"}),(0,i.jsx)(n.td,{children:"2147483648"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Memory limit for a single query. The default is 2GB, in bytes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.deserialize.arrow.async"}),(0,i.jsx)(n.td,{children:"FALSE"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Whether to support asynchronous conversion of Arrow format to RowBatch needed for flink-doris-connector iterations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.deserialize.queue.size"}),(0,i.jsx)(n.td,{children:"64"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Asynchronous conversion of internal processing queue in Arrow format, effective when doris.deserialize.arrow.async is true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"source.use-flight-sql"}),(0,i.jsx)(n.td,{children:"FALSE"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Whether to use Arrow Flight SQL to read"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"source.flight-sql-port"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"When using ArrowFlightSQL to read, FE's arrow_flight_sql_port"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"datastream-specific-configuration-items",children:"Datastream-specific configuration items"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Default Value"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Comment"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.read.field"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Read the list of column names of the Doris table, separated by commas"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doris.filter.query"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The expression to filter the read data, this expression is transparently passed to Doris. Doris uses this expression to complete source-side data filtering. For example age=18."})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"sink-configuration-items",children:"Sink configuration items"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Default Value"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Comment"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.label-prefix"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"Y"}),(0,i.jsx)(n.td,{children:"The label prefix used by Stream load import. In the 2pc scenario, global uniqueness is required to ensure Flink's EOS semantics."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.properties.*"}),(0,i.jsx)(n.td,{children:"--"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsxs)(n.td,{children:["Import parameters for Stream Load. ",(0,i.jsx)(n.br,{}),"For example: 'sink.properties.column_separator' = ', ' defines column delimiters, 'sink.properties.escape_delimiters' = 'true' special characters as delimiters, '\\x01' will be converted to binary 0x01 ",(0,i.jsx)(n.br,{}),(0,i.jsx)(n.br,{}),"JSON format import",(0,i.jsx)(n.br,{}),"'sink.properties.format' = 'json' 'sink.properties. read_json_by_line' = 'true'",(0,i.jsx)(n.br,{}),"Detailed parameters refer to ",(0,i.jsx)(n.a,{href:"../data-operate/import/import-way/stream-load-manual",children:"here"}),".",(0,i.jsx)(n.br,{}),(0,i.jsx)(n.br,{}),"Group Commit mode",(0,i.jsx)(n.br,{}),"'sink.properties.group_commit' = 'sync_mode'",(0,i.jsx)(n.br,{})," Starting from version 1.6.2, we have introduced support for load data with group commit functionality. For a comprehensive understanding of the available parameters, please refer to the Group Commit Manual ",(0,i.jsx)(n.a,{href:"https://doris.apache.org/docs/data-operate/import/import-way/group-commit-manual/",children:"group commit"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.enable-delete"}),(0,i.jsx)(n.td,{children:"TRUE"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Whether to enable delete. This option requires the Doris table to enable the batch delete function (Doris 0.15+ version is enabled by default), and only supports the Unique model."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.enable-2pc"}),(0,i.jsx)(n.td,{children:"TRUE"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsxs)(n.td,{children:["Whether to enable two-phase commit (2pc), the default is true, to ensure Exactly-Once semantics. For two-phase commit, please refer to ",(0,i.jsx)(n.a,{href:"../data-operate/import/import-way/stream-load-manual",children:"here"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.buffer-size"}),(0,i.jsx)(n.td,{children:"1MB"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The size of the write data cache buffer, in bytes. It is not recommended to modify, the default configuration is enough"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.buffer-count"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The number of write data buffers. It is not recommended to modify, the default configuration is enough"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.max-retries"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Maximum number of retries after Commit failure, default 3"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.use-cache"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"In case of an exception, whether to use the memory cache for recovery. When enabled, the data during the Checkpoint period will be retained in the cache."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.enable.batch-mode"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsxs)(n.td,{children:["Whether to use the batch mode to write to Doris. After it is enabled, the writing timing does not depend on Checkpoint. The writing is controlled through the sink.buffer-flush.max-rows/sink.buffer-flush.max-bytes/sink.buffer-flush.interval parameter. Enter the opportunity. ",(0,i.jsx)(n.br,{}),"After being turned on at the same time, Exactly-once semantics will not be guaranteed. Uniq model can be used to achieve idempotence."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.flush.queue-size"}),(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"In batch mode, the cached column size."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.buffer-flush.max-rows"}),(0,i.jsx)(n.td,{children:"500000"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"In batch mode, the maximum number of data rows written in a single batch."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.buffer-flush.max-bytes"}),(0,i.jsx)(n.td,{children:"100MB"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"In batch mode, the maximum number of bytes written in a single batch."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.buffer-flush.interval"}),(0,i.jsx)(n.td,{children:"10s"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"In batch mode, the interval for asynchronously refreshing the cache"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sink.ignore.update-before"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Whether to ignore the update-before event, ignored by default."})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"lookup-join-configuration-item",children:"Lookup Join configuration item"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Default Value"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Comment"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lookup.cache.max-rows"}),(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The maximum number of rows in the lookup cache, the default value is -1, and the cache is not enabled"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lookup.cache.ttl"}),(0,i.jsx)(n.td,{children:"10s"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The maximum time of lookup cache, the default is 10s"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lookup.max-retries"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The number of retries after a lookup query fails"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lookup.jdbc.async"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Whether to enable asynchronous lookup, the default is false"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lookup.jdbc.read.batch.size"}),(0,i.jsx)(n.td,{children:"128"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"Under asynchronous lookup, the maximum batch size for each query"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lookup.jdbc.read.batch.queue-size"}),(0,i.jsx)(n.td,{children:"256"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The size of the intermediate buffer queue during asynchronous lookup"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lookup.jdbc.read.thread-size"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"N"}),(0,i.jsx)(n.td,{children:"The number of jdbc threads for lookup in each task"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"doris--flink-column-type-mapping",children:"Doris & Flink Column Type Mapping"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Doris Type"}),(0,i.jsx)(n.th,{children:"Flink Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"NULL_TYPE"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BOOLEAN"}),(0,i.jsx)(n.td,{children:"BOOLEAN"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TINYINT"}),(0,i.jsx)(n.td,{children:"TINYINT"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"SMALLINT"}),(0,i.jsx)(n.td,{children:"SMALLINT"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"INT"}),(0,i.jsx)(n.td,{children:"INT"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BIGINT"}),(0,i.jsx)(n.td,{children:"BIGINT"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"FLOAT"}),(0,i.jsx)(n.td,{children:"FLOAT"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DOUBLE"}),(0,i.jsx)(n.td,{children:"DOUBLE"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DATE"}),(0,i.jsx)(n.td,{children:"DATE"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DATETIME"}),(0,i.jsx)(n.td,{children:"TIMESTAMP"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DECIMAL"}),(0,i.jsx)(n.td,{children:"DECIMAL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"CHAR"}),(0,i.jsx)(n.td,{children:"STRING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"LARGEINT"}),(0,i.jsx)(n.td,{children:"STRING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"VARCHAR"}),(0,i.jsx)(n.td,{children:"STRING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"STRING"}),(0,i.jsx)(n.td,{children:"STRING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DECIMALV2"}),(0,i.jsx)(n.td,{children:"DECIMAL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ARRAY"}),(0,i.jsx)(n.td,{children:"ARRAY"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MAP"}),(0,i.jsx)(n.td,{children:"MAP"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"JSON"}),(0,i.jsx)(n.td,{children:"STRING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"VARIANT"}),(0,i.jsx)(n.td,{children:"STRING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"IPV4"}),(0,i.jsx)(n.td,{children:"STRING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"IPV6"}),(0,i.jsx)(n.td,{children:"STRING"})]})]})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Starting from version connector-1.6.1, support is added for reading three data types: Variant, IPV6, and IPV4. Reading IPV6 and Variant requires Doris version 2.1.1 or higher."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"flink-write-metrics",children:"Flink write Metrics"}),"\n",(0,i.jsx)(n.p,{children:"Where the metrics value of type Counter is the cumulative value of the imported task from the beginning to the current time, you can observe each metric in each table in the Flink Webui metrics."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Metric Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"totalFlushLoadBytes"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of bytes imported."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"flushTotalNumberRows"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of rows imported for total processing"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"totalFlushLoadedRows"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of rows successfully imported."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"totalFlushTimeMs"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of Import completion time. Unit milliseconds"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"totalFlushSucceededNumber"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of times that the data-batch been successfully imported."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"totalFlushFailedNumber"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of times that the data-batch been failed."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"totalFlushFilteredRows"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of rows that do not qualify for data quality flushed"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"totalFlushUnselectedRows"}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:"Number of rows filtered by where condition flushed"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"beginTxnTimeMs"}),(0,i.jsx)(n.td,{children:"Histogram"}),(0,i.jsx)(n.td,{children:"The time cost for RPC to Fe to begin a transaction, Unit milliseconds."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"putDataTimeMs"}),(0,i.jsx)(n.td,{children:"Histogram"}),(0,i.jsx)(n.td,{children:"The time cost for RPC to Fe to get a stream load plan, Unit milliseconds."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"readDataTimeMs"}),(0,i.jsx)(n.td,{children:"Histogram"}),(0,i.jsx)(n.td,{children:"Read data time, Unit milliseconds."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"writeDataTimeMs"}),(0,i.jsx)(n.td,{children:"Histogram"}),(0,i.jsx)(n.td,{children:"Write data time, Unit milliseconds."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"commitAndPublishTimeMs"}),(0,i.jsx)(n.td,{children:"Histogram"}),(0,i.jsx)(n.td,{children:"The time cost for RPC to Fe to commit and publish a transaction, Unit milliseconds."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"loadTimeMs"}),(0,i.jsx)(n.td,{children:"Histogram"}),(0,i.jsx)(n.td,{children:"Import completion time"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"an-example-of-using-flink-cdc-to-access-doris",children:"An example of using Flink CDC to access Doris"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SET 'execution.checkpointing.interval' = '10s';\nCREATE TABLE cdc_mysql_source (\n  id int\n  ,name VARCHAR\n  ,PRIMARY KEY (id) NOT ENFORCED\n) WITH (\n 'connector' = 'mysql-cdc',\n 'hostname' = '127.0.0.1',\n 'port' = '3306',\n 'username' = 'root',\n 'password' = 'password',\n 'database-name' = 'database',\n 'table-name' = 'table'\n);\n\n-- Support synchronous insert/update/delete events\nCREATE TABLE doris_sink (\nid INT,\nname STRING\n) \nWITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'table.identifier' = 'database.table',\n  'username' = 'root',\n  'password' = '',\n  'sink.properties.format' = 'json',\n  'sink.properties.read_json_by_line' = 'true',\n  'sink.enable-delete' = 'true', -- Synchronize delete events\n  'sink.label-prefix' = 'doris_label'\n);\n\ninsert into doris_sink select id,name from cdc_mysql_source;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example-of-using-flinksql-to-access-and-implement-partial-column-updates-through-cdc",children:"Example of using FlinkSQL to access and implement partial column updates through CDC"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- enable checkpoint\nSET 'execution.checkpointing.interval' = '10s';\n\nCREATE TABLE cdc_mysql_source (\n   id int\n  ,name STRING\n  ,bank STRING\n  ,age int\n  ,PRIMARY KEY (id) NOT ENFORCED\n) WITH (\n 'connector' = 'mysql-cdc',\n 'hostname' = '127.0.0.1',\n 'port' = '3306',\n 'username' = 'root',\n 'password' = 'password',\n 'database-name' = 'database',\n 'table-name' = 'table'\n);\n\nCREATE TABLE doris_sink (\n    id INT,\n    name STRING,\n    bank STRING,\n    age int\n) \nWITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'table.identifier' = 'database.table',\n  'username' = 'root',\n  'password' = '',\n  'sink.properties.format' = 'json',\n  'sink.properties.read_json_by_line' = 'true',\n  'sink.properties.columns' = 'id,name,bank,age',\n  'sink.properties.partial_columns' = 'true' --Enable partial column updates\n);\n\n\ninsert into doris_sink select id,name,bank,age from cdc_mysql_source;\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"use-flink-cdc-to-access-multiple-tables-or-the-entire-database-supports-mysql-oracle-postgresql-sqlserver-mongodb",children:"Use Flink CDC to access multiple tables or the entire database (Supports MySQL, Oracle, PostgreSQL, SQLServer, MongoDB)"}),"\n",(0,i.jsx)(n.h3,{id:"grammar",children:"Grammar"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"<FLINK_HOME>bin/flink run \\\n     -c org.apache.doris.flink.tools.cdc.CdcTools \\\n     lib/flink-doris-connector-1.16-1.4.0-SNAPSHOT.jar\\\n     <mysql-sync-database|oracle-sync-database|postgres-sync-database|sqlserver-sync-database|mongodb-sync-database> \\\n     --database <doris-database-name> \\\n     [--job-name <flink-job-name>] \\\n     [--table-prefix <doris-table-prefix>] \\\n     [--table-suffix <doris-table-suffix>] \\\n     [--including-tables <mysql-table-name|name-regular-expr>] \\\n     [--excluding-tables <mysql-table-name|name-regular-expr>] \\\n     --mysql-conf <mysql-cdc-source-conf> [--mysql-conf <mysql-cdc-source-conf> ...] \\\n     --oracle-conf <oracle-cdc-source-conf> [--oracle-conf <oracle-cdc-source-conf> ...] \\\n     --postgres-conf <postgres-cdc-source-conf> [--postgres-conf <postgres-cdc-source-conf> ...] \\\n     --sqlserver-conf <sqlserver-cdc-source-conf> [--sqlserver-conf <sqlserver-cdc-source-conf> ...] \\\n     --sink-conf <doris-sink-conf> [--table-conf <doris-sink-conf> ...] \\\n     [--table-conf <doris-table-conf> [--table-conf <doris-table-conf> ...]]\n"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Comment"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--job-name"}),(0,i.jsx)(n.td,{children:"Flink task name, optional"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--database"}),(0,i.jsx)(n.td,{children:"Database name synchronized to Doris"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--table-prefix"}),(0,i.jsx)(n.td,{children:"Doris table prefix name, such as --table-prefix ods_."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--table-suffix"}),(0,i.jsx)(n.td,{children:"Same as above, the suffix name of the Doris table."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--including-tables"}),(0,i.jsx)(n.td,{children:'For MySQL tables that need to be synchronized, you can use "\uFF5C" to separate multiple tables and support regular expressions. For example --including-tables table1'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--excluding-tables"}),(0,i.jsx)(n.td,{children:"For tables that do not need to be synchronized, the usage is the same as above."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--mysql-conf"}),(0,i.jsxs)(n.td,{children:["MySQL CDCSource configuration, for example --mysql-conf hostname=127.0.0.1, you can find it ",(0,i.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/docs/connectors/legacy-flink-cdc-sources/mysql-cdc/",children:"here"}),"  View all configurations MySQL-CDC, where hostname/username/password/database-name is required. When the synchronized library table contains a non-primary key table, ",(0,i.jsx)(n.code,{children:"scan.incremental.snapshot.chunk.key-column"})," must be set, and only one field of non-null type can be selected. ",(0,i.jsx)(n.br,{}),"For example: ",(0,i.jsx)(n.code,{children:"scan.incremental.snapshot.chunk.key-column=database.table:column,database.table1:column..."}),", different database table columns are separated by ",(0,i.jsx)(n.code,{children:","}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--oracle-conf"}),(0,i.jsxs)(n.td,{children:["Oracle CDCSource configuration, for example --oracle-conf hostname=127.0.0.1, you can find ",(0,i.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/docs/connectors/legacy-flink-cdc-sources/oracle-cdc/",children:"here"})," View all configurations Oracle-CDC, where hostname/username/password/database-name/schema-name is required."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--postgres-conf"}),(0,i.jsxs)(n.td,{children:["Postgres CDCSource configuration, e.g. --postgres-conf hostname=127.0.0.1, you can find ",(0,i.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/docs/connectors/legacy-flink-cdc-sources/postgres-cdc/",children:"here"})," View all configurations Postgres-CDC where hostname/username/password/database-name/schema-name/slot.name is required."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--sqlserver-conf"}),(0,i.jsxs)(n.td,{children:["SQLServer CDCSource configuration, for example --sqlserver-conf hostname=127.0.0.1, you can find it ",(0,i.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/docs/connectors/legacy-flink-cdc-sources/sqlserver-cdc/",children:"here"})," View all configurations SQLServer-CDC, where hostname/username/password/database-name/schema-name is required."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--db2-conf"}),(0,i.jsxs)(n.td,{children:["DB2 CDCSource configuration, for example --db2-conf hostname=127.0.0.1, you can find it ",(0,i.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.1/docs/connectors/flink-sources/db2-cdc/",children:"here"})," View all configurations DB2-CDC, where hostname/username/password/database-name/schema-name is required."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--mongodb-conf"}),(0,i.jsxs)(n.td,{children:["MongoDB CDCSource configuration, for example --mongodb-conf hosts=127.0.0.1:27017, you can find all Mongo-CDC configurations ",(0,i.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/docs/connectors/flink-sources/mongodb-cdc/",children:"here"}),", where hosts/username/password/database are required. The --mongodb-conf schema.sample-percent configuration is for automatically sampling MongoDB data for creating a table in Doris, with a default value of 0.2."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--sink-conf"}),(0,i.jsxs)(n.td,{children:["All configurations of Doris Sink can be found ",(0,i.jsx)(n.a,{href:"https://doris.apache.org/zh-CN/docs/dev/ecosystem/flink-doris-connector/#%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E9%A1%B9",children:"here"})," View the complete configuration items."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--table-conf"}),(0,i.jsxs)(n.td,{children:["The configuration items of the Doris table(The exception is table-buckets, non-properties attributes), that is, the content contained in properties. For example ",(0,i.jsx)(n.code,{children:"--table-conf replication_num=1"}),", and the ",(0,i.jsx)(n.code,{children:'--table-conf table-buckets="tbl1:10,tbl2:20,a.*:30,b.*:40,.*:50"'})," option specifies the number of buckets for different tables based on the order of regular expressions. If there is no match, the table is created with the default setting of BUCKETS AUTO."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--ignore-default-value"}),(0,i.jsxs)(n.td,{children:["Turn off the default value of synchronizing MySQL table structure. It is suitable for synchronizing MySQL data to Doris when the field has a default value but the actual inserted data is null. Reference ",(0,i.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/pull/152",children:"here"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--use-new-schema-change"}),(0,i.jsxs)(n.td,{children:["Whether to use the new schema change to support synchronization of MySQL multi-column changes and default values. since version 1.6.0, the default value has been set to true. Reference ",(0,i.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/pull/167",children:"here"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--schema-change-mode"}),(0,i.jsxs)(n.td,{children:["The mode for parsing schema change supports two parsing modes: ",(0,i.jsx)(n.code,{children:"debezium_structure"})," and ",(0,i.jsx)(n.code,{children:"sql_parser"}),". The default mode is ",(0,i.jsx)(n.code,{children:"debezium_structure"}),". ",(0,i.jsx)(n.br,{}),(0,i.jsx)(n.br,{})," ",(0,i.jsx)(n.code,{children:"debezium_structure"})," parses the data structure used when upstream CDC synchronizes data, and determines DDL change operations by parsing this structure. ",(0,i.jsx)(n.br,{})," ",(0,i.jsx)(n.code,{children:"sql_parser"})," determines the DDL change operation by parsing the DDL statement when the upstream CDC synchronizes data, so this parsing mode is more accurate. ",(0,i.jsx)(n.br,{})," Usage example: ",(0,i.jsx)(n.code,{children:"--schema-change-mode debezium_structure"}),(0,i.jsx)(n.br,{})," This feature will be available in versions after 1.6.2.1"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--single-sink"}),(0,i.jsx)(n.td,{children:"Whether to use a single Sink to synchronize all tables. When turned on, newly created tables in the upstream can also be automatically recognized and tables automatically created."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--multi-to-one-origin"}),(0,i.jsxs)(n.td,{children:['When writing multiple upstream tables into the same table, the configuration of the source table, for example: --multi-to-one-origin "a_.*\uFF5Cb_.*"\uFF0C Reference ',(0,i.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/pull/208",children:"here"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--multi-to-one-target"}),(0,i.jsx)(n.td,{children:'Used with multi-to-one-origin, the configuration of the target table, such as: --multi-to-one-target "a|b"'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"--create-table-only"}),(0,i.jsx)(n.td,{children:"Whether only the table schema should be synchronized"})]})]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"info",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["When synchronizing, you need to add the corresponding Flink CDC dependencies in the ",(0,i.jsx)(n.code,{children:"$FLINK_HOME/lib"})," directory, such as flink-sql-connector-mysql-cdc-",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"v"}),(0,i.jsx)(n.mi,{children:"e"}),(0,i.jsx)(n.mi,{children:"r"}),(0,i.jsx)(n.mi,{children:"s"}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mi,{children:"o"}),(0,i.jsx)(n.mi,{children:"n"})]}),(0,i.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,i.jsx)(n.mi,{children:"j"}),(0,i.jsx)(n.mi,{children:"a"}),(0,i.jsx)(n.mi,{children:"r"}),(0,i.jsx)(n.mo,{separator:"true",children:","}),(0,i.jsx)(n.mi,{children:"f"}),(0,i.jsx)(n.mi,{children:"l"}),(0,i.jsx)(n.mi,{children:"i"}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"k"}),(0,i.jsx)(n.mo,{children:"\u2212"}),(0,i.jsx)(n.mi,{children:"s"}),(0,i.jsx)(n.mi,{children:"q"}),(0,i.jsx)(n.mi,{children:"l"}),(0,i.jsx)(n.mo,{children:"\u2212"}),(0,i.jsx)(n.mi,{children:"c"}),(0,i.jsx)(n.mi,{children:"o"}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mi,{children:"e"}),(0,i.jsx)(n.mi,{children:"c"}),(0,i.jsx)(n.mi,{children:"t"}),(0,i.jsx)(n.mi,{children:"o"}),(0,i.jsx)(n.mi,{children:"r"}),(0,i.jsx)(n.mo,{children:"\u2212"}),(0,i.jsx)(n.mi,{children:"o"}),(0,i.jsx)(n.mi,{children:"r"}),(0,i.jsx)(n.mi,{children:"a"}),(0,i.jsx)(n.mi,{children:"c"}),(0,i.jsx)(n.mi,{children:"l"}),(0,i.jsx)(n.mi,{children:"e"}),(0,i.jsx)(n.mo,{children:"\u2212"}),(0,i.jsx)(n.mi,{children:"c"}),(0,i.jsx)(n.mi,{children:"d"}),(0,i.jsx)(n.mi,{children:"c"}),(0,i.jsx)(n.mo,{children:"\u2212"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"{version}.jar, flink-sql-connector-oracle-cdc-"})]})})}),(0,i.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsxs)(n.span,{className:"mord",children:[(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"ers"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"})]}),(0,i.jsx)(n.span,{className:"mord",children:"."}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"ja"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,i.jsx)(n.span,{className:"mpunct",children:","}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"ink"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"ql"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.6984em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"co"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"nn"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"ec"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"or"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"or"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"c"}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"c"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"c"}),(0,i.jsx)(n.span,{className:"mord",children:"\u2212"})]})]})]}),"{version}.jar , flink-sql-connector-mongodb-cdc-${version}.jar"]}),"\n",(0,i.jsxs)(n.li,{children:["The Flink CDC version that Connector 24.0.0 depends on must be above 3.1 . If Flink CDC is to be used for synchronizing data from MySQL or Oracle, relevant JDBC drivers also need to be added under ",(0,i.jsx)(n.code,{children:"$FLINK_HOME/lib"}),"."]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"mysql-synchronization-example",children:"MySQL synchronization example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'<FLINK_HOME>bin/flink run \\\n     -Dexecution.checkpointing.interval=10s\\\n     -Dparallelism.default=1\\\n     -c org.apache.doris.flink.tools.cdc.CdcTools\\\n     lib/flink-doris-connector-1.18-24.0.1.jar \\\n     mysql-sync-database\\\n     --database test_db \\\n     --mysql-conf hostname=127.0.0.1 \\\n     --mysql-conf port=3306 \\\n     --mysql-conf username=root \\\n     --mysql-conf password=123456 \\\n     --mysql-conf database-name=mysql_db \\\n     --including-tables "tbl1|test.*" \\\n     --sink-conf fenodes=127.0.0.1:8030 \\\n     --sink-conf username=root \\\n     --sink-conf password=123456 \\\n     --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n     --sink-conf sink.label-prefix=label \\\n     --table-conf replication_num=1\n'})}),"\n",(0,i.jsx)(n.h3,{id:"oracle-synchronization-example",children:"Oracle synchronization example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'<FLINK_HOME>bin/flink run \\\n      -Dexecution.checkpointing.interval=10s \\\n      -Dparallelism.default=1 \\\n      -c org.apache.doris.flink.tools.cdc.CdcTools \\\n      ./lib/flink-doris-connector-1.18-24.0.1.jar \\\n      oracle-sync-database \\\n      --database test_db \\\n      --oracle-conf hostname=127.0.0.1 \\\n      --oracle-conf port=1521 \\\n      --oracle-conf username=admin \\\n      --oracle-conf password="password" \\\n      --oracle-conf database-name=XE \\\n      --oracle-conf schema-name=ADMIN \\\n      --including-tables "tbl1|tbl2" \\\n      --sink-conf fenodes=127.0.0.1:8030 \\\n      --sink-conf username=root \\\n      --sink-conf password=\\\n      --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n      --sink-conf sink.label-prefix=label \\\n      --table-conf replication_num=1\n'})}),"\n",(0,i.jsx)(n.h3,{id:"postgresql-synchronization-example",children:"PostgreSQL synchronization example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'<FLINK_HOME>/bin/flink run \\\n     -Dexecution.checkpointing.interval=10s \\\n     -Dparallelism.default=1\\\n     -c org.apache.doris.flink.tools.cdc.CdcTools \\\n     ./lib/flink-doris-connector-1.18-24.0.1.jar \\\n     postgres-sync-database \\\n     --database db1\\\n     --postgres-conf hostname=127.0.0.1 \\\n     --postgres-conf port=5432 \\\n     --postgres-conf username=postgres \\\n     --postgres-conf password="123456" \\\n     --postgres-conf database-name=postgres \\\n     --postgres-conf schema-name=public \\\n     --postgres-conf slot.name=test \\\n     --postgres-conf decoding.plugin.name=pgoutput \\\n     --including-tables "tbl1|tbl2" \\\n     --sink-conf fenodes=127.0.0.1:8030 \\\n     --sink-conf username=root \\\n     --sink-conf password=\\\n     --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n     --sink-conf sink.label-prefix=label \\\n     --table-conf replication_num=1\n'})}),"\n",(0,i.jsx)(n.h3,{id:"sqlserver-synchronization-example",children:"SQLServer synchronization example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'<FLINK_HOME>/bin/flink run \\\n     -Dexecution.checkpointing.interval=10s \\\n     -Dparallelism.default=1 \\\n     -c org.apache.doris.flink.tools.cdc.CdcTools \\\n     ./lib/flink-doris-connector-1.18-24.0.1.jar \\\n     sqlserver-sync-database \\\n     --database db1\\\n     --sqlserver-conf hostname=127.0.0.1 \\\n     --sqlserver-conf port=1433 \\\n     --sqlserver-conf username=sa \\\n     --sqlserver-conf password="123456" \\\n     --sqlserver-conf database-name=CDC_DB \\\n     --sqlserver-conf schema-name=dbo \\\n     --including-tables "tbl1|tbl2" \\\n     --sink-conf fenodes=127.0.0.1:8030 \\\n     --sink-conf username=root \\\n     --sink-conf password=\\\n     --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n     --sink-conf sink.label-prefix=label \\\n     --table-conf replication_num=1\n'})}),"\n",(0,i.jsx)(n.h3,{id:"db2-synchronization-example",children:"DB2 synchronization example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'<FLINK_HOME>bin/flink run \\\n    -Dexecution.checkpointing.interval=10s \\\n    -Dparallelism.default=1 \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    lib/flink-doris-connector-1.16-24.0.1.jar \\\n    db2-sync-database \\\n    --database db2_test \\\n    --db2-conf hostname=127.0.0.1 \\\n    --db2-conf port=50000 \\\n    --db2-conf username=db2inst1 \\\n    --db2-conf password=doris123456 \\\n    --db2-conf database-name=testdb \\\n    --db2-conf schema-name=DB2INST1 \\\n    --including-tables "FULL_TYPES|CUSTOMERS" \\\n    --single-sink true \\\n    --use-new-schema-change true \\\n    --sink-conf fenodes=127.0.0.1:8030 \\\n    --sink-conf username=root \\\n    --sink-conf password=123456 \\\n    --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n    --sink-conf sink.label-prefix=label \\\n    --table-conf replication_num=1 \n'})}),"\n",(0,i.jsx)(n.h3,{id:"mongodb-synchronization-example",children:"MongoDB synchronization example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'<FLINK_HOME>/bin/flink run \\\n    -Dexecution.checkpointing.interval=10s \\\n    -Dparallelism.default=1 \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    ./lib/flink-doris-connector-1.18-24.0.1.jar \\\n    mongodb-sync-database \\\n    --database doris_db \\\n    --schema-change-mode debezium_structure \\\n    --mongodb-conf hosts=127.0.0.1:27017 \\\n    --mongodb-conf username=flinkuser \\\n    --mongodb-conf password=flinkpwd \\\n    --mongodb-conf database=test \\\n    --mongodb-conf scan.startup.mode=initial \\\n    --mongodb-conf schema.sample-percent=0.2 \\\n    --including-tables "tbl1|tbl2" \\\n    --sink-conf fenodes=127.0.0.1:8030 \\\n    --sink-conf username=root \\\n    --sink-conf password= \\\n    --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n    --sink-conf sink.label-prefix=label \\\n    --sink-conf sink.enable-2pc=false \\\n    --table-conf replication_num=1\n'})}),"\n",(0,i.jsx)(n.h2,{id:"use-flink-cdc-to-update-key-column",children:"Use Flink CDC to update Key column"}),"\n",(0,i.jsx)(n.p,{children:"Generally, in a business database, the number is used as the primary key of the table, such as the Student table, the number (id) is used as the primary key, but with the development of the business, the number corresponding to the data may change.\nIn this scenario, using Flink CDC + Doris Connector to synchronize data can automatically update the data in the Doris primary key column."}),"\n",(0,i.jsx)(n.h3,{id:"principle",children:"Principle"}),"\n",(0,i.jsx)(n.p,{children:"The underlying collection tool of Flink CDC is Debezium. Debezium internally uses the op field to identify the corresponding operation: the values of the op field are c, u, d, and r, corresponding to create, update, delete, and read.\nFor the update of the primary key column, Flink CDC will send DELETE and INSERT events downstream, and after the data is synchronized to Doris, it will automatically update the data of the primary key column."}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The Flink program can refer to the CDC synchronization example above. After the task is successfully submitted, execute the Update primary key column statement (",(0,i.jsx)(n.code,{children:"update student set id = '1002' where id = '1001'"}),") on the MySQL side to modify the data in Doris ."]}),"\n",(0,i.jsx)(n.h2,{id:"use-flink-to-delete-data-based-on-specified-columns",children:"Use Flink to delete data based on specified columns"}),"\n",(0,i.jsx)(n.p,{children:'Generally, messages in Kafka use specific fields to mark the operation type, such as {"op_type":"delete",data:{...}}. For this type of data, it is hoped that the data with op_type=delete will be deleted.'}),"\n",(0,i.jsxs)(n.p,{children:["By default, DorisSink will distinguish the type of event based on RowKind. Usually, in the case of cdc, the event type can be obtained directly, and the hidden column ",(0,i.jsx)(n.code,{children:"__DORIS_DELETE_SIGN__"})," is assigned to achieve the purpose of deletion, while Kafka needs to be based on business logic. Judgment, display the value passed in to the hidden column."]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Such as upstream data: {\"op_type\":\"delete\",data:{\"id\":1,\"name\":\"zhangsan\"}}\nCREATE TABLE KAFKA_SOURCE(\n  data STRING,\n  op_type STRING\n) WITH (\n  'connector' = 'kafka',\n  ...\n);\n\nCREATE TABLE DORIS_SINK(\n  id INT,\n  name STRING,\n  __DORIS_DELETE_SIGN__ INT\n) WITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'table.identifier' = 'db.table',\n  'username' = 'root',\n  'password' = '',\n  'sink.enable-delete' = 'false',        -- false means not to get the event type from RowKind\n  'sink.properties.columns' = 'id, name, __DORIS_DELETE_SIGN__'  -- Display the import column of the specified streamload\n);\n\nINSERT INTO DORIS_SINK\nSELECT json_value(data,'$.id') as id,\njson_value(data,'$.name') as name, \nif(op_type='delete',1,0) as __DORIS_DELETE_SIGN__ \nfrom KAFKA_SOURCE;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"java-example",children:"Java example"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"samples/doris-demo/"}),"  An example of the Java version is provided below for reference, see ",(0,i.jsx)(n.a,{href:"https://github.com/apache/doris/tree/master/samples/doris-demo/",children:"here"})]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"application-scenarios",children:"Application scenarios"}),"\n",(0,i.jsx)(n.p,{children:"The most suitable scenario for using Flink Doris Connector is to synchronize source data to Doris (MySQL, Oracle, PostgreSQL) in real time/batch, etc., and use Flink to perform joint analysis on data in Doris and other data sources. You can also use Flink Doris Connector"}),"\n",(0,i.jsx)(n.h3,{id:"other",children:"Other"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The Flink Doris Connector mainly relies on Checkpoint for streaming writing, so the interval between Checkpoints is the visible delay time of the data."}),"\n",(0,i.jsxs)(n.li,{children:["To ensure the Exactly Once semantics of Flink, the Flink Doris Connector enables two-phase commit by default, and Doris enables two-phase commit by default after version 1.1. 1.0 can be enabled by modifying the BE parameters, please refer to ",(0,i.jsx)(n.a,{href:"../data-operate/import/import-way/stream-load-manual",children:"two_phase_commit"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"After Doris Source finishes reading data, why does the stream end?"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Currently Doris Source is a bounded stream and does not support CDC reading."}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Can Flink read Doris and perform conditional pushdown?"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By configuring the doris.filter.query parameter, refer to the configuration section for details."}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"How to write Bitmap type?"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE bitmap_sink (\ndt int,\npage string,\nuser_id int\n)\nWITH (\n   'connector' = 'doris',\n   'fenodes' = '127.0.0.1:8030',\n   'table.identifier' = 'test.bitmap_test',\n   'username' = 'root',\n   'password' = '',\n   'sink.label-prefix' = 'doris_label',\n   'sink.properties.columns' = 'dt,page,user_id,user_id=to_bitmap(user_id)'\n)\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"errCode = 2, detailMessage = Label [label_0_1] has already been used, relate to txn [19650]"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In the Exactly-Once scenario, the Flink Job must be restarted from the latest Checkpoint/Savepoint, otherwise the above error will be reported.\nWhen Exactly-Once is not required, it can also be solved by turning off 2PC commits (sink.enable-2pc=false) or changing to a different sink.label-prefix."}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"errCode = 2, detailMessage = transaction [19650] not found"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This occurs during the Commit stage. The transaction ID recorded in the checkpoint has expired on the FE side. When committing again at this time, the above error will occur. At this point, it's impossible to start from the checkpoint. Subsequently, you can extend the expiration time by modifying the ",(0,i.jsx)(n.code,{children:"streaming_label_keep_max_second"})," configuration in ",(0,i.jsx)(n.code,{children:"fe.conf"}),". The default expiration time is 12 hours. After doris version 2.0, it will also be limited by the ",(0,i.jsx)(n.code,{children:"label_num_threshold"})," configuration in ",(0,i.jsx)(n.code,{children:"fe.conf"})," (default 2000), which can be increased or changed to -1 (-1 means only limited by time)."]}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"errCode = 2, detailMessage = current running txns on db 10006 is 100, larger than limit 100"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This is because the concurrent import of the same library exceeds 100, which can be solved by adjusting the parameter ",(0,i.jsx)(n.code,{children:"max_running_txn_num_per_db"})," of fe.conf. For details, please refer to ",(0,i.jsx)(n.a,{href:"../admin-manual/config/fe-config#max_running_txn_num_per_db",children:"max_running_txn_num_per_db"})]}),"\n",(0,i.jsx)(n.p,{children:"At the same time, if a task frequently modifies the label and restarts, it may also cause this error. In the 2pc scenario (Duplicate/Aggregate model), the label of each task needs to be unique, and when restarting from the checkpoint, the Flink task will actively abort the txn that has been successfully precommitted before and has not been committed. Frequently modifying the label and restarting will cause a large number of txn that have successfully precommitted to fail to be aborted, occupying the transaction. Under the Unique model, 2pc can also be turned off, which can realize idempotent writing."}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"How to ensure the order of a batch of data when Flink writes to the Uniq model?"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can add sequence column configuration to ensure that, for details, please refer to ",(0,i.jsx)(n.a,{href:"/docs/2.0/data-operate/update/update-of-unique-model",children:"sequence"})]}),"\n",(0,i.jsxs)(n.ol,{start:"8",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"The Flink task does not report an error, but the data cannot be synchronized? "})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Before Connector1.1.0, it was written in batches, and the writing was driven by data. It was necessary to determine whether there was data written upstream. After 1.1.0, it depends on Checkpoint, and Checkpoint must be enabled to write."}),"\n",(0,i.jsxs)(n.ol,{start:"9",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"tablet writer write failed, tablet_id=190958, txn_id=3505530, err=-235"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It usually occurs before Connector1.1.0, because the writing frequency is too fast, resulting in too many versions. The frequency of Streamload can be reduced by setting the sink.batch.size and sink.batch.interval parameters. After Connector 1.1.0, the default write timing is controlled by Checkpoint, and the write frequency can be reduced by increasing the Checkpoint interval."}),"\n",(0,i.jsxs)(n.ol,{start:"10",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Flink imports dirty data, how to skip it? "})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"When Flink imports data, if there is dirty data, such as field format, length, etc., it will cause StreamLoad to report an error, and Flink will continue to retry at this time. If you need to skip, you can disable the strict mode of StreamLoad (strict_mode=false, max_filter_ratio=1) or filter the data before the Sink operator."}),"\n",(0,i.jsxs)(n.ol,{start:"11",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"How should the source table and Doris table correspond?"}),'\nWhen using Flink Connector to import data, pay attention to two aspects. The first is that the columns and types of the source table correspond to the columns and types in flink sql; the second is that the columns and types in flink sql must match those of the Doris table For the correspondence between columns and types, please refer to the above "Doris & Flink Column Type Mapping" for details']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TApplicationException: get_next failed: out of sequence response: expected 4 but got 3"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This is due to concurrency bugs in the Thrift. It is recommended that you use the latest connector and compatible Flink version possible."}),"\n",(0,i.jsxs)(n.ol,{start:"13",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["DorisRuntimeException: Fail to abort transaction 26153 with url ",(0,i.jsx)(n.a,{href:"http://192.168.0.1:8040/api/table_name/_stream_load_2pc",children:"http://192.168.0.1:8040/api/table_name/_stream_load_2pc"})]})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can search for the log ",(0,i.jsx)(n.code,{children:"abort transaction response"})," in TaskManager and determine whether it is a client issue or a server issue based on the HTTP return code."]}),"\n",(0,i.jsxs)(n.ol,{start:"14",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:'org.apache.flink.table.api.SqlParserException when using doris.filter.query: SQL parsing failed. "xx" encountered at row x, column xx'})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This problem is mainly caused by the conditional varchar/string type, which needs to be quoted. The correct way to write it is xxx = ''xxx''. In this way, the Flink SQL parser will interpret two consecutive single quotes as one single quote character instead of The end of the string, and the concatenated string is used as the value of the attribute. For example: ",(0,i.jsx)(n.code,{children:"t1 >= '2024-01-01'"})," can be written as ",(0,i.jsx)(n.code,{children:"'doris.filter.query' = 't1 >=''2024-01-01'''"}),"."]}),"\n",(0,i.jsxs)(n.ol,{start:"15",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Failed to connect to backend: ",(0,i.jsx)(n.code,{children:"http://host:webserver_port"}),", and BE is still alive"]})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The issue may have occurred due to configuring the IP address of ",(0,i.jsx)(n.code,{children:"be"}),", which is not reachable by the external Flink cluster.This is mainly because when connecting to ",(0,i.jsx)(n.code,{children:"fe"}),", the address of ",(0,i.jsx)(n.code,{children:"be"})," is resolved through fe. For instance, if you add a be address as '127.0.0.1', the be address obtained by the Flink cluster through fe will be '127.0.0.1:webserver_port', and Flink will connect to that address. When this issue arises, you can resolve it by adding the actual corresponding external IP address of the be to the \"with\" attribute:",(0,i.jsx)(n.code,{children:"'benodes'=\"be_ip:webserver_port,be_ip:webserver_port...\""}),".For the entire database synchronization, the following properties are available",(0,i.jsx)(n.code,{children:"--sink-conf benodes=be_ip:webserver,be_ip:webserver..."}),"."]}),"\n",(0,i.jsxs)(n.ol,{start:"16",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"When using Flink-connector to synchronize MySQL data to Doris, there is a time difference of several hours between the timestamp."})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Flink  Connector synchronizes the entire database from MySQL with a default timezone of UTC+8. If your data resides in a different timezone, you can adjust it using the following configuration, for example: ",(0,i.jsx)(n.code,{children:'--mysql-conf debezium.date.format.timestamp.zone="UTC+3"'}),"."]}),"\n",(0,i.jsxs)(n.ol,{start:"17",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"What is the difference between batch writing and streaming writing"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Connector 1.5.0 and later support batch writing. Batch writing does not rely on Checkpoint. Data is cached in memory and the writing timing is controlled according to the parameters sink.buffer-flush.max-rows/sink.buffer-flush.max-bytes/sink.buffer-flush.interval. Checkpoint must be enabled for streaming writing. During the entire Checkpoint period, upstream data is continuously written to Doris, and data is not cached in memory all the time."})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return o}});var r=s(667294);let i={},t=r.createContext(i);function o(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);