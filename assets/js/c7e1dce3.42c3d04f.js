"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["356606"],{2316:function(n,e,s){s.r(e),s.d(e,{default:()=>o,frontMatter:()=>i,metadata:()=>r,assets:()=>d,toc:()=>S,contentTitle:()=>a});var r=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/conversion/json-conversion","title":"Cast to/from JSON","description":"The JSON type in Doris uses binary encoding for storage rather than text storage, providing more efficient processing and storage. There is a one-to-one mapping between JSON types and Doris internal types.","source":"@site/docs/sql-manual/basic-element/sql-data-types/conversion/json-conversion.md","sourceDirName":"sql-manual/basic-element/sql-data-types/conversion","slug":"/sql-manual/basic-element/sql-data-types/conversion/json-conversion","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/json-conversion","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Cast to/from JSON","language":"en"},"sidebar":"docs","previous":{"title":"Cast to IP Types","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/ip-conversion"},"next":{"title":"Cast to MAP Types","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/conversion/map-conversion"}}'),t=s("785893"),l=s("250065");let i={title:"Cast to/from JSON",language:"en"},a=void 0,d={},S=[{value:"Cast to JSON",id:"cast-to-json",level:2},{value:"FROM String",id:"from-string",level:3},{value:"String Parsing Rules",id:"string-parsing-rules",level:4},{value:"Numeric Parsing Rules",id:"numeric-parsing-rules",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"FROM Other Doris Types",id:"from-other-doris-types",level:3},{value:"Examples",id:"examples",level:4},{value:"Types Not Directly Supported",id:"types-not-directly-supported",level:4},{value:"Cast from JSON",id:"cast-from-json",level:2},{value:"TO Boolean",id:"to-boolean",level:3},{value:"TO Numeric Types",id:"to-numeric-types",level:3},{value:"TO String",id:"to-string",level:3},{value:"TO Array",id:"to-array",level:3},{value:"TO Struct",id:"to-struct",level:3},{value:"JSON Null Handling",id:"json-null-handling",level:3},{value:"Type Conversion Summary",id:"type-conversion-summary",level:2},{value:"keywords",id:"keywords",level:3}];function c(n){let e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"The JSON type in Doris uses binary encoding for storage rather than text storage, providing more efficient processing and storage. There is a one-to-one mapping between JSON types and Doris internal types."}),"\n",(0,t.jsx)(e.h2,{id:"cast-to-json",children:"Cast to JSON"}),"\n",(0,t.jsx)(e.h3,{id:"from-string",children:"FROM String"}),"\n",(0,t.jsxs)(e.p,{children:["When casting a string to JSON, the string content must conform to valid JSON syntax as defined in ",(0,t.jsx)(e.a,{href:"https://datatracker.ietf.org/doc/html/rfc7159",children:"RFC7159"}),". The parser will validate the string and convert it to the corresponding JSON binary format."]}),"\n",(0,t.jsx)(e.h4,{id:"string-parsing-rules",children:"String Parsing Rules"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"If the string contains a valid JSON structure (object, array, number, boolean, or null), it will be parsed as that JSON type:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT CAST('[1,2,3,4]' AS JSON); -- Output: [1,2,3,4] (parsed as JSON array)\n+---------------------------+\n| CAST('[1,2,3,4]' AS JSON) |\n+---------------------------+\n| [1,2,3,4]                 |\n+---------------------------+\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["To create a JSON string value (where the string itself is treated as a JSON string value rather than being parsed), use the ",(0,t.jsx)(e.code,{children:"TO_JSON"})," function:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT TO_JSON('[1,2,3,4]'); -- Output: \"[1,2,3,4]\" (a JSON string with quotes)\n+----------------------+\n| TO_JSON('[1,2,3,4]') |\n+----------------------+\n| \"[1,2,3,4]\"          |\n+----------------------+\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"numeric-parsing-rules",children:"Numeric Parsing Rules"}),"\n",(0,t.jsx)(e.p,{children:"When parsing numeric values from a JSON string:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"If a number contains a decimal point, it will be converted to a JSON Double type:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT JSON_TYPE(CAST('{\"key\":123.45}' AS JSON), '$.key');\n+------------------------------------------------------+\n| JSON_TYPE(CAST('{\"key\":123.45}' AS JSON), '$.key')   |\n+------------------------------------------------------+\n| double                                               |\n+------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"If a number is an integer, it will be stored as the smallest compatible integer type:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT JSON_TYPE(CAST('{\"key\":123456789}' AS JSON), '$.key');\n+---------------------------------------------------------+\n| JSON_TYPE(CAST('{\"key\":123456789}' AS JSON), '$.key')   |\n+---------------------------------------------------------+\n| int                                                     |\n+---------------------------------------------------------+\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT JSON_TYPE(CAST('{\"key\":1234567891234}' AS JSON), '$.key');\n+-------------------------------------------------------------+\n| JSON_TYPE(CAST('{\"key\":1234567891234}' AS JSON), '$.key')   |\n+-------------------------------------------------------------+\n| bigint                                                      |\n+-------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"If an integer exceeds the Int128 range, it will be stored as a double, which may result in precision loss:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT JSON_TYPE(CAST('{\"key\":12345678901234567890123456789012345678901234567890}' AS JSON), '$.key');\n+--------------------------------------------------------------------------------------------------+\n| JSON_TYPE(CAST('{\"key\":12345678901234567890123456789012345678901234567890}' AS JSON), '$.key')   |\n+--------------------------------------------------------------------------------------------------+\n| double                                                                                           |\n+--------------------------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(e.p,{children:"When parsing a string to JSON:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"In strict mode (default), invalid JSON syntax will cause an error"}),"\n",(0,t.jsx)(e.li,{children:"In non-strict mode, invalid JSON syntax will return NULL"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SET enable_strict_cast = false;\nmysql> SELECT CAST('{\"invalid JSON' AS JSON);\n+-----------------------------+\n| CAST('{\"invalid JSON' AS JSON) |\n+-----------------------------+\n| NULL                        |\n+-----------------------------+\n\nmysql> SET enable_strict_cast = true;\nmysql> SELECT CAST('{\"invalid JSON' AS JSON);\nERROR 1105 (HY000): errCode = 2, detailMessage = (127.0.0.1)[INVALID_ARGUMENT]Failed to parse json string: {\"invalid JSON, ...\n"})}),"\n",(0,t.jsx)(e.h3,{id:"from-other-doris-types",children:"FROM Other Doris Types"}),"\n",(0,t.jsx)(e.p,{children:"The following Doris types can be directly cast to JSON without loss of precision:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Doris Type"}),(0,t.jsx)(e.th,{children:"JSON Type"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"BOOLEAN"}),(0,t.jsx)(e.td,{children:"Bool"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"TINYINT"}),(0,t.jsx)(e.td,{children:"Int8"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"SMALLINT"}),(0,t.jsx)(e.td,{children:"Int16"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"INT"}),(0,t.jsx)(e.td,{children:"Int32"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"BIGINT"}),(0,t.jsx)(e.td,{children:"Int64"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"LARGEINT"}),(0,t.jsx)(e.td,{children:"Int128"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"FLOAT"}),(0,t.jsx)(e.td,{children:"Float"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"DOUBLE"}),(0,t.jsx)(e.td,{children:"Double"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"DECIMAL"}),(0,t.jsx)(e.td,{children:"Decimal"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"STRING"}),(0,t.jsx)(e.td,{children:"String"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"ARRAY"}),(0,t.jsx)(e.td,{children:"Array"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"STRUCT"}),(0,t.jsx)(e.td,{children:"Object"})]})]})]}),"\n",(0,t.jsx)(e.h4,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- Integer array to JSON\nmysql> SELECT CAST(ARRAY(123,456,789) AS JSON);\n+----------------------------------+\n| CAST(ARRAY(123,456,789) AS JSON) |\n+----------------------------------+\n| [123,456,789]                    |\n+----------------------------------+\n\n-- Decimal array to JSON (preserves precision)\nmysql> SELECT CAST(ARRAY(12345678.12345678,0.00000001,12.000000000000000001) AS JSON);\n+--------------------------------------------------------------------------+\n| CAST(ARRAY(12345678.12345678,0.00000001,12.000000000000000001) AS JSON)  |\n+--------------------------------------------------------------------------+\n| [12345678.123456780000000000,0.000000010000000000,12.000000000000000001] |\n+--------------------------------------------------------------------------+\n"})}),"\n",(0,t.jsx)(e.h4,{id:"types-not-directly-supported",children:"Types Not Directly Supported"}),"\n",(0,t.jsx)(e.p,{children:"Types not in the table above cannot be directly cast to JSON:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT CAST(MAKEDATE(2021, 1) AS JSON);\nERROR 1105 (HY000): CAST AS JSONB can only be performed between JSONB, String, Number, Boolean, Array, Struct types. Got Date to JSONB\n"})}),"\n",(0,t.jsx)(e.p,{children:"Solution: First cast to a compatible type, then to JSON:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT CAST(CAST(MAKEDATE(2021, 1) AS BIGINT) AS JSON);\n+---------------------------------------------------+\n| CAST(CAST(MAKEDATE(2021, 1) AS BIGINT) AS JSON)   |\n+---------------------------------------------------+\n| 20210101                                          |\n+---------------------------------------------------+\n"})}),"\n",(0,t.jsx)(e.h2,{id:"cast-from-json",children:"Cast from JSON"}),"\n",(0,t.jsxs)(e.admonition,{title:"Behavior Change",type:"caution",children:[(0,t.jsx)(e.p,{children:"Before version 4.0, Doris had more relaxed requirements for JSON CAST behavior and didn't handle overflow situations properly."}),(0,t.jsx)(e.p,{children:"Starting from version 4.0, overflow in JSON CAST will result in an error in strict mode or return null in non-strict mode."})]}),"\n",(0,t.jsx)(e.h3,{id:"to-boolean",children:"TO Boolean"}),"\n",(0,t.jsx)(e.p,{children:"JSON Bool, Number, and String types can be cast to BOOLEAN:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- From JSON Bool\nmysql> SELECT CAST(CAST('true' AS JSON) AS BOOLEAN);\n+---------------------------------------+\n| CAST(CAST('true' AS JSON) AS BOOLEAN) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n\n-- From JSON Number\nmysql> SELECT CAST(CAST('123' AS JSON) AS BOOLEAN);\n+--------------------------------------+\n| CAST(CAST('123' AS JSON) AS BOOLEAN) |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+\n\n-- From JSON String (must contain valid boolean representation)\nmysql> SELECT CAST(TO_JSON('true') AS BOOLEAN);\n+----------------------------------+\n| CAST(TO_JSON('true') AS BOOLEAN) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n"})}),"\n",(0,t.jsx)(e.h3,{id:"to-numeric-types",children:"TO Numeric Types"}),"\n",(0,t.jsx)(e.p,{children:"JSON Bool, Number, and String types can be cast to numeric types (TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL):"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- From JSON Number to INT\nmysql> SELECT CAST(CAST('123' AS JSON) AS INT);\n+----------------------------------+\n| CAST(CAST('123' AS JSON) AS INT) |\n+----------------------------------+\n|                              123 |\n+----------------------------------+\n\n-- From JSON Bool to numeric types\nmysql> SELECT CAST(CAST('true' AS JSON) AS INT), CAST(CAST('false' AS JSON) AS DOUBLE);\n+-----------------------------------+--------------------------------------+\n| CAST(CAST('true' AS JSON) AS INT) | CAST(CAST('false' AS JSON) AS DOUBLE) |\n+-----------------------------------+--------------------------------------+\n|                                 1 |                                    0 |\n+-----------------------------------+--------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Numeric overflow rules apply when casting to smaller types:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- In strict mode, overflow causes error\nmysql> SET enable_strict_cast = true;\nmysql> SELECT CAST(TO_JSON(12312312312312311) AS INT);\nERROR 1105 (HY000): Cannot cast from jsonb value type 12312312312312311 to doris type INT\n\n-- In non-strict mode, overflow returns NULL\nmysql> SET enable_strict_cast = false;\nmysql> SELECT CAST(TO_JSON(12312312312312311) AS INT);\n+-----------------------------------------+\n| CAST(TO_JSON(12312312312312311) AS INT) |\n+-----------------------------------------+\n|                                    NULL |\n+-----------------------------------------+\n"})}),"\n",(0,t.jsx)(e.h3,{id:"to-string",children:"TO String"}),"\n",(0,t.jsx)(e.p,{children:"Any JSON type can be cast to STRING, which produces the JSON text representation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT CAST(CAST(\'{"key1":"value1","key2":123}\' AS JSON) AS STRING);\n+----------------------------------------------------------+\n| CAST(CAST(\'{"key1":"value1","key2":123}\' AS JSON) AS STRING) |\n+----------------------------------------------------------+\n| {"key1":"value1","key2":123}                             |\n+----------------------------------------------------------+\n\nmysql> SELECT CAST(CAST(\'true\' AS JSON) AS STRING);\n+--------------------------------------+\n| CAST(CAST(\'true\' AS JSON) AS STRING) |\n+--------------------------------------+\n| true                                 |\n+--------------------------------------+\n'})}),"\n",(0,t.jsx)(e.h3,{id:"to-array",children:"TO Array"}),"\n",(0,t.jsx)(e.p,{children:"JSON Array and String types can be cast to Doris ARRAY types:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT CAST(TO_JSON(ARRAY(1,2,3)) AS ARRAY<INT>);\n+-------------------------------------------+\n| CAST(TO_JSON(ARRAY(1,2,3)) AS ARRAY<INT>) |\n+-------------------------------------------+\n| [1, 2, 3]                                 |\n+-------------------------------------------+\n\n-- Type conversion within array elements\nmysql> SELECT CAST(TO_JSON(ARRAY(1.2,2.3,3.4)) AS ARRAY<INT>);\n+-------------------------------------------------+\n| CAST(TO_JSON(ARRAY(1.2,2.3,3.4)) AS ARRAY<INT>) |\n+-------------------------------------------------+\n| [1, 2, 3]                                       |\n+-------------------------------------------------+\n\n-- Convert string to array\nmysql> SELECT CAST(TO_JSON(\"['123','456']\") AS ARRAY<INT>);\n+----------------------------------------------+\n| CAST(TO_JSON(\"['123','456']\") AS ARRAY<INT>) |\n+----------------------------------------------+\n| [123, 456]                                   |\n+----------------------------------------------+\n"})}),"\n",(0,t.jsx)(e.p,{children:"Elements in arrays are converted individually following the standard cast rules:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- In non-strict mode, invalid elements become NULL\nmysql> SET enable_strict_cast = false;\nmysql> SELECT CAST(TO_JSON(ARRAY(10,20,200)) AS ARRAY<TINYINT>);\n+---------------------------------------------------+\n| CAST(TO_JSON(ARRAY(10,20,200)) AS ARRAY<TINYINT>) |\n+---------------------------------------------------+\n| [10, 20, null]                                    |\n+---------------------------------------------------+\n\n-- In strict mode, invalid elements cause error\nmysql> SET enable_strict_cast = true;\nmysql> SELECT CAST(TO_JSON(ARRAY(10,20,200)) AS ARRAY<TINYINT>);\nERROR 1105 (HY000): Cannot cast from jsonb value type 200 to doris type TINYINT\n"})}),"\n",(0,t.jsx)(e.h3,{id:"to-struct",children:"TO Struct"}),"\n",(0,t.jsx)(e.p,{children:"JSON Object and String types can be cast to Doris STRUCT types:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT CAST(CAST(\'{"key1":123,"key2":"456"}\' AS JSON) AS STRUCT<key1:INT,key2:STRING>);\n+------------------------------------------------------------------------------+\n| CAST(CAST(\'{"key1":123,"key2":"456"}\' AS JSON) AS STRUCT<key1:INT,key2:STRING>) |\n+------------------------------------------------------------------------------+\n| {"key1":123, "key2":"456"}                                                   |\n+------------------------------------------------------------------------------+\n\nmysql> SELECT CAST(TO_JSON(\'{"key1":123,"key2":"456"}\') AS STRUCT<key1:INT,key2:STRING>);\n+----------------------------------------------------------------------------+\n| CAST(TO_JSON(\'{"key1":123,"key2":"456"}\') AS STRUCT<key1:INT,key2:STRING>) |\n+----------------------------------------------------------------------------+\n| {"key1":123, "key2":"456"}                                                 |\n+----------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"Fields in the struct are converted individually according to the specified types:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT CAST(CAST(\'{"key1":[123.45,678.90],"key2":[12312313]}\' AS JSON) AS STRUCT<key1:ARRAY<DOUBLE>,key2:ARRAY<BIGINT>>);\n+--------------------------------------------------------------------------------------------------------------------------+\n| CAST(CAST(\'{"key1":[123.45,678.90],"key2":[12312313]}\' AS JSON) AS STRUCT<key1:ARRAY<DOUBLE>,key2:ARRAY<BIGINT>>) |\n+--------------------------------------------------------------------------------------------------------------------------+\n| {"key1":[123.45, 678.9], "key2":[12312313]}                                                                              |\n+--------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,t.jsx)(e.p,{children:"The field count and names must match between JSON and struct definition:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'-- In non-strict mode, mismatched fields return NULL\nmysql> SET enable_strict_cast = false;\nmysql> SELECT CAST(CAST(\'{"key1":123,"key2":456}\' AS JSON) AS STRUCT<key1:INT>);\n+-------------------------------------------------------------------------+\n| CAST(CAST(\'{"key1":123,"key2":456}\' AS JSON) AS STRUCT<key1:INT>) |\n+-------------------------------------------------------------------------+\n| NULL                                                                    |\n+-------------------------------------------------------------------------+\n\n-- In strict mode, mismatched fields cause error\nmysql> SET enable_strict_cast = true;\nmysql> SELECT CAST(CAST(\'{"key1":123,"key2":456}\' AS JSON) AS STRUCT<key1:INT>);\nERROR 1105 (HY000): jsonb_value field size 2 is not equal to struct size 1\n'})}),"\n",(0,t.jsx)(e.h3,{id:"json-null-handling",children:"JSON Null Handling"}),"\n",(0,t.jsx)(e.p,{children:"JSON null is distinct from SQL NULL:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"When a JSON field contains a null value, casting it to any Doris type produces a SQL NULL:"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT CAST(CAST('null' AS JSON) AS INT);\n+----------------------------------+\n| CAST(CAST('null' AS JSON) AS INT) |\n+----------------------------------+\n|                             NULL |\n+----------------------------------+\n"})}),"\n",(0,t.jsx)(e.h2,{id:"type-conversion-summary",children:"Type Conversion Summary"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"JSON Type"}),(0,t.jsx)(e.th,{children:"Can Be Cast To"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Bool"}),(0,t.jsx)(e.td,{children:"BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, LARGEINT, DOUBLE, FLOAT, DECIMAL, STRING"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Null"}),(0,t.jsx)(e.td,{children:"(Always converted to SQL NULL)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Number"}),(0,t.jsx)(e.td,{children:"BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, LARGEINT, DOUBLE, FLOAT, DECIMAL, STRING"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"String"}),(0,t.jsx)(e.td,{children:"BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, LARGEINT, DOUBLE, FLOAT, DECIMAL, STRING, ARRAY, STRUCT"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Array"}),(0,t.jsx)(e.td,{children:"STRING, ARRAY"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Object"}),(0,t.jsx)(e.td,{children:"STRING, STRUCT"})]})]})]}),"\n",(0,t.jsx)(e.h3,{id:"keywords",children:"keywords"}),"\n",(0,t.jsx)(e.p,{children:"JSON, JSONB, CAST, conversion, to_json"})]})}function o(n={}){let{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},250065:function(n,e,s){s.d(e,{Z:function(){return a},a:function(){return i}});var r=s(667294);let t={},l=r.createContext(t);function i(n){let e=r.useContext(l);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(l.Provider,{value:e},n.children)}}}]);