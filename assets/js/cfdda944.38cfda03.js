"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["571571"],{682068:function(e,t,a){a.r(t),a.d(t,{default:()=>p,frontMatter:()=>o,metadata:()=>n,assets:()=>r,toc:()=>c,contentTitle:()=>s});var n=JSON.parse('{"id":"data-operate/delete/atomicity-replace","title":"Replacing Atomic Table","description":"Doris supports atomic table replacement operations for two tables. This is only applicable to OLAP tables.","source":"@site/versioned_docs/version-2.0/data-operate/delete/atomicity-replace.md","sourceDirName":"data-operate/delete","slug":"/data-operate/delete/atomicity-replace","permalink":"/docs/2.0/data-operate/delete/atomicity-replace","draft":false,"unlisted":false,"tags":[],"version":"2.0","frontMatter":{"title":"Replacing Atomic Table","language":"en"},"sidebar":"docs","previous":{"title":"Deleting Data with TRUNCATE Command","permalink":"/docs/2.0/data-operate/delete/truncate-manual"},"next":{"title":"Temporary Partition","permalink":"/docs/2.0/data-operate/delete/table-temp-partition"}}'),l=a("785893"),i=a("250065");let o={title:"Replacing Atomic Table",language:"en"},s="Atomicity Replace",r={},c=[{value:"Applicable scenarios",id:"applicable-scenarios",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Note",id:"note",level:2}];function d(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"atomicity-replace",children:"Atomicity Replace"})}),"\n",(0,l.jsx)(t.p,{children:"Doris supports atomic table replacement operations for two tables. This is only applicable to OLAP tables."}),"\n",(0,l.jsx)(t.h2,{id:"applicable-scenarios",children:"Applicable scenarios"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Atomic overwrite operations"}),"\n",(0,l.jsxs)(t.li,{children:['In certain cases, users may want to rewrite data in a table. However, the "delete and load" approach causes a data invisibility window. To solve that, Doris allows users to create a new table of the same schema using the CREATE TABLE LIKE statement, import the new data into this new table, and then atomically replace the old table with the new table. For atomic replacement at the partition level, please refer to the ',(0,l.jsx)(t.a,{href:"../../data-operate/delete/table-temp-partition/",children:"temporary partition"}),"documentation."]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-Plain",children:"ALTER TABLE [db.]tbl1 REPLACE WITH TABLE tbl2\n[PROPERTIES('swap' = 'true')];\n"})}),"\n",(0,l.jsx)(t.p,{children:"Replace table tbl1 with table tbl2."}),"\n",(0,l.jsxs)(t.p,{children:["If ",(0,l.jsx)(t.code,{children:"swap"})," is ",(0,l.jsx)(t.code,{children:"true"}),", after the replacement, data in ",(0,l.jsx)(t.code,{children:"tbl1"})," will be replaced by that in ",(0,l.jsx)(t.code,{children:"tbl2"}),", while data in ",(0,l.jsx)(t.code,{children:"tbl2"})," will be replaced by that in ",(0,l.jsx)(t.code,{children:"tbl1"}),". In other words, the two tables will swap data."]}),"\n",(0,l.jsxs)(t.p,{children:["If ",(0,l.jsx)(t.code,{children:"swap"})," is ",(0,l.jsx)(t.code,{children:"false"}),", after the replacement, data in ",(0,l.jsx)(t.code,{children:"tbl1"})," will be replaced by that in ",(0,l.jsx)(t.code,{children:"tbl2"})," and ",(0,l.jsx)(t.code,{children:"tbl2"})," will be deleted."]}),"\n",(0,l.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,l.jsx)(t.p,{children:"In fact, table replacement is to combine the following operations into one atomic operation."}),"\n",(0,l.jsxs)(t.p,{children:["Assuming that table A is to be replaced with table B, and ",(0,l.jsx)(t.code,{children:"swap"})," is set to ",(0,l.jsx)(t.code,{children:"true"}),". The operations to be implemented are as follows:"]}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsx)(t.li,{children:"Rename table B to table A."}),"\n",(0,l.jsx)(t.li,{children:"Rename table A to table B."}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["If ",(0,l.jsx)(t.code,{children:"swap"})," is set to ",(0,l.jsx)(t.code,{children:"false"}),", the operations are as follows:"]}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsx)(t.li,{children:"Delete table A."}),"\n",(0,l.jsx)(t.li,{children:"Rename table B to table A."}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"note",children:"Note"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"swap"})," defaults to ",(0,l.jsx)(t.code,{children:"true"}),", meaning to swap the data between two tables."]}),"\n",(0,l.jsxs)(t.li,{children:["If ",(0,l.jsx)(t.code,{children:"swap"})," is set to ",(0,l.jsx)(t.code,{children:"false"}),", the table being replaced (table A) will be deleted and cannot be recovered."]}),"\n",(0,l.jsx)(t.li,{children:"The replacement operation can only be implemented between two OLAP tables and it does not check for table schema consistency."}),"\n",(0,l.jsx)(t.li,{children:"The replacement operation does not change the existing privilege settings because privilege checks are based on table names."}),"\n"]})]})}function p(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},250065:function(e,t,a){a.d(t,{Z:function(){return s},a:function(){return o}});var n=a(667294);let l={},i=n.createContext(l);function o(e){let t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);