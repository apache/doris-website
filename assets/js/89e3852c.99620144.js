"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["621545"],{892897:function(e,a,t){t.r(a),t.d(a,{default:()=>p,frontMatter:()=>i,metadata:()=>n,assets:()=>d,toc:()=>l,contentTitle:()=>o});var n=JSON.parse('{"id":"data-operate/import/complex-types/variant","title":"Variant","description":"The VARIANT type can store semi-structured JSON data, allowing for the storage of complex data structures that contain different data types (such as integers, strings, booleans, etc.) without the need to predefine specific columns in the table structure. This type is particularly suitable for handling complex nested structures that may change at any time. During the writing process, the VARIANT type can automatically infer the structure and type of the columns, dynamically merging the written schema, and storing the JSON keys and their corresponding values as columns and dynamic sub-columns. For more documentation, please refer to VARIANT.","source":"@site/versioned_docs/version-2.1/data-operate/import/complex-types/variant.md","sourceDirName":"data-operate/import/complex-types","slug":"/data-operate/import/complex-types/variant","permalink":"/docs/2.1/data-operate/import/complex-types/variant","draft":false,"unlisted":false,"tags":[],"version":"2.1","frontMatter":{"title":"Variant","language":"en"},"sidebar":"docs","previous":{"title":"HLL","permalink":"/docs/2.1/data-operate/import/complex-types/hll"},"next":{"title":"Handling Data Issues","permalink":"/docs/2.1/data-operate/import/handling-messy-data"}}'),s=t("785893"),r=t("250065");let i={title:"Variant",language:"en"},o=void 0,d={},l=[{value:"Usage Limitations",id:"usage-limitations",level:2},{value:"Loading CSV Format",id:"loading-csv-format",level:2},{value:"Step 1: Prepare Data",id:"step-1-prepare-data",level:3},{value:"Step 2: Create Table in Database",id:"step-2-create-table-in-database",level:3},{value:"Step 3: Load Data",id:"step-3-load-data",level:3},{value:"Step 4: Check Loaded Data",id:"step-4-check-loaded-data",level:3},{value:"Loading JSON Format",id:"loading-json-format",level:2},{value:"Step 1: Prepare Data",id:"step-1-prepare-data-1",level:3},{value:"Step 2: Create Table in Database",id:"step-2-create-table-in-database-1",level:3},{value:"Step 3: Load Data",id:"step-3-load-data-1",level:3},{value:"Step 4: Check Loaded Data",id:"step-4-check-loaded-data-1",level:3},{value:"Step 5: Check type inference",id:"step-5-check-type-inference",level:3}];function c(e){let a={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["The VARIANT type can store semi-structured JSON data, allowing for the storage of complex data structures that contain different data types (such as integers, strings, booleans, etc.) without the need to predefine specific columns in the table structure. This type is particularly suitable for handling complex nested structures that may change at any time. During the writing process, the VARIANT type can automatically infer the structure and type of the columns, dynamically merging the written schema, and storing the JSON keys and their corresponding values as columns and dynamic sub-columns. For more documentation, please refer to ",(0,s.jsx)(a.a,{href:"../../../sql-manual/basic-element/sql-data-types/semi-structured/VARIANT",children:"VARIANT"}),"."]}),"\n",(0,s.jsx)(a.h2,{id:"usage-limitations",children:"Usage Limitations"}),"\n",(0,s.jsx)(a.p,{children:"Supports CSV and JSON formats."}),"\n",(0,s.jsx)(a.h2,{id:"loading-csv-format",children:"Loading CSV Format"}),"\n",(0,s.jsx)(a.h3,{id:"step-1-prepare-data",children:"Step 1: Prepare Data"}),"\n",(0,s.jsxs)(a.p,{children:["Create a CSV file named ",(0,s.jsx)(a.code,{children:"test_variant.csv"})," with the following content:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'14186154924|PushEvent|{"avatar_url":"https://avatars.githubusercontent.com/u/282080?","display_login":"brianchandotcom","gravatar_id":"","id":282080,"login":"brianchandotcom","url":"https://api.github.com/users/brianchandotcom"}|{"id":1920851,"name":"brianchandotcom/liferay-portal","url":"https://api.github.com/repos/brianchandotcom/liferay-portal"}|{"before":"abb58cc0db673a0bd5190000d2ff9c53bb51d04d","commits":[""],"distinct_size":4,"head":"91edd3c8c98c214155191feb852831ec535580ba","push_id":6027092734,"ref":"refs/heads/master","size":4}|1|2020-11-14 02:00:00\n'})}),"\n",(0,s.jsx)(a.h3,{id:"step-2-create-table-in-database",children:"Step 2: Create Table in Database"}),"\n",(0,s.jsx)(a.p,{children:"Execute the following SQL statement to create the table:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'CREATE TABLE IF NOT EXISTS testdb.test_variant (\n    id BIGINT NOT NULL,\n    type VARCHAR(30) NULL,\n    actor VARIANT NULL,\n    repo VARIANT NULL,\n    payload VARIANT NULL,\n    public BOOLEAN NULL,\n    created_at DATETIME NULL,\n    INDEX idx_payload (`payload`) USING INVERTED PROPERTIES("parser" = "english") COMMENT \'inverted index for payload\'\n)\nDUPLICATE KEY(`id`)\nDISTRIBUTED BY HASH(id) BUCKETS 10\nproperties("replication_num" = "1");\n'})}),"\n",(0,s.jsx)(a.h3,{id:"step-3-load-data",children:"Step 3: Load Data"}),"\n",(0,s.jsx)(a.p,{children:"Using stream load as an example, use the following command to load data:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'curl --location-trusted -u root:  -T test_variant.csv -H "column_separator:|" http://127.0.0.1:8030/api/testdb/test_variant/_stream_load\n'})}),"\n",(0,s.jsx)(a.p,{children:"Example of load results:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'{\n    "TxnId": 12,\n    "Label": "96cd6250-9c78-4a9f-b8b3-2b7cef0dd606",\n    "Comment": "",\n    "TwoPhaseCommit": "false",\n    "Status": "Success",\n    "Message": "OK",\n    "NumberTotalRows": 1,\n    "NumberLoadedRows": 1,\n    "NumberFilteredRows": 0,\n    "NumberUnselectedRows": 0,\n    "LoadBytes": 660,\n    "LoadTimeMs": 213,\n    "BeginTxnTimeMs": 0,\n    "StreamLoadPutTimeMs": 6,\n    "ReadDataTimeMs": 0,\n    "WriteDataTimeMs": 183,\n    "ReceiveDataTimeMs": 14,\n    "CommitAndPublishTimeMs": 20\n}\n'})}),"\n",(0,s.jsx)(a.h3,{id:"step-4-check-loaded-data",children:"Step 4: Check Loaded Data"}),"\n",(0,s.jsx)(a.p,{children:"Use the following SQL query to check the loaded data:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'mysql> select * from testdb.test_variant\\G\n*************************** 1. row ***************************\n        id: 14186154924\n      type: PushEvent\n     actor: {"avatar_url":"https://avatars.githubusercontent.com/u/282080?","display_login":"brianchandotcom","gravatar_id":"","id":282080,"login":"brianchandotcom","url":"https://api.github.com/users/brianchandotcom"}\n      repo: {"id":1920851,"name":"brianchandotcom/liferay-portal","url":"https://api.github.com/repos/brianchandotcom/liferay-portal"}\n   payload: {"before":"abb58cc0db673a0bd5190000d2ff9c53bb51d04d","commits":[""],"distinct_size":4,"head":"91edd3c8c98c214155191feb852831ec535580ba","push_id":6027092734,"ref":"refs/heads/master","size":4}\n    public: 1\ncreated_at: 2020-11-14 02:00:00\n'})}),"\n",(0,s.jsx)(a.h2,{id:"loading-json-format",children:"Loading JSON Format"}),"\n",(0,s.jsx)(a.h3,{id:"step-1-prepare-data-1",children:"Step 1: Prepare Data"}),"\n",(0,s.jsxs)(a.p,{children:["Create a JSON file named ",(0,s.jsx)(a.code,{children:"test_variant.json"})," with the following content:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'{"id": "14186154924","type": "PushEvent","actor": {"id": 282080,"login":"brianchandotcom","display_login": "brianchandotcom","gravatar_id": "","url": "https://api.github.com/users/brianchandotcom","avatar_url": "https://avatars.githubusercontent.com/u/282080?"},"repo": {"id": 1920851,"name": "brianchandotcom/liferay-portal","url": "https://api.github.com/repos/brianchandotcom/liferay-portal"},"payload": {"push_id": 6027092734,"size": 4,"distinct_size": 4,"ref": "refs/heads/master","head": "91edd3c8c98c214155191feb852831ec535580ba","before": "abb58cc0db673a0bd5190000d2ff9c53bb51d04d","commits": [""]},"public": true,"created_at": "2020-11-13T18:00:00Z"}\n'})}),"\n",(0,s.jsx)(a.h3,{id:"step-2-create-table-in-database-1",children:"Step 2: Create Table in Database"}),"\n",(0,s.jsx)(a.p,{children:"Execute the following SQL statement to create the table:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'CREATE TABLE IF NOT EXISTS testdb.test_variant (\n    id BIGINT NOT NULL,\n    type VARCHAR(30) NULL,\n    actor VARIANT NULL,\n    repo VARIANT NULL,\n    payload VARIANT NULL,\n    public BOOLEAN NULL,\n    created_at DATETIME NULL,\n    INDEX idx_payload (`payload`) USING INVERTED PROPERTIES("parser" = "english") COMMENT \'inverted index for payload\'\n)\nDUPLICATE KEY(`id`)\nDISTRIBUTED BY HASH(id) BUCKETS 10;\n'})}),"\n",(0,s.jsx)(a.h3,{id:"step-3-load-data-1",children:"Step 3: Load Data"}),"\n",(0,s.jsx)(a.p,{children:"Using stream load as an example, use the following command to load data:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'curl --location-trusted -u root:  -T test_variant.json -H "format:json"  http://127.0.0.1:8030/api/testdb/test_variant/_stream_load\n'})}),"\n",(0,s.jsx)(a.p,{children:"Example of load results:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'{\n    "TxnId": 12,\n    "Label": "96cd6250-9c78-4a9f-b8b3-2b7cef0dd606",\n    "Comment": "",\n    "TwoPhaseCommit": "false",\n    "Status": "Success",\n    "Message": "OK",\n    "NumberTotalRows": 1,\n    "NumberLoadedRows": 1,\n    "NumberFilteredRows": 0,\n    "NumberUnselectedRows": 0,\n    "LoadBytes": 660,\n    "LoadTimeMs": 213,\n    "BeginTxnTimeMs": 0,\n    "StreamLoadPutTimeMs": 6,\n    "ReadDataTimeMs": 0,\n    "WriteDataTimeMs": 183,\n    "ReceiveDataTimeMs": 14,\n    "CommitAndPublishTimeMs": 20\n}\n'})}),"\n",(0,s.jsx)(a.h3,{id:"step-4-check-loaded-data-1",children:"Step 4: Check Loaded Data"}),"\n",(0,s.jsx)(a.p,{children:"Use the following SQL query to check the loaded data:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-SQL",children:'mysql> select * from testdb.test_variant\\G\n*************************** 1. row ***************************\n        id: 14186154924\n      type: PushEvent\n     actor: {"avatar_url":"https://avatars.githubusercontent.com/u/282080?","display_login":"brianchandotcom","gravatar_id":"","id":282080,"login":"brianchandotcom","url":"https://api.github.com/users/brianchandotcom"}\n      repo: {"id":1920851,"name":"brianchandotcom/liferay-portal","url":"https://api.github.com/repos/brianchandotcom/liferay-portal"}\n   payload: {"before":"abb58cc0db673a0bd5190000d2ff9c53bb51d04d","commits":[""],"distinct_size":4,"head":"91edd3c8c98c214155191feb852831ec535580ba","push_id":6027092734,"ref":"refs/heads/master","size":4}\n    public: 1\ncreated_at: 2020-11-14 02:00:00\n'})}),"\n",(0,s.jsx)(a.h3,{id:"step-5-check-type-inference",children:"Step 5: Check type inference"}),"\n",(0,s.jsx)(a.p,{children:"Running desc command to view schema information, sub-columns will automatically expand at the storage layer and undergo type inference."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-sql",children:"mysql> desc github_events;\n+------------------------------------------------------------+------------+------+-------+---------+-------+\n| Field                                                      | Type       | Null | Key   | Default | Extra |\n+------------------------------------------------------------+------------+------+-------+---------+-------+\n| id                                                         | BIGINT     | No   | true  | NULL    |       |\n| type                                                       | VARCHAR(*) | Yes  | false | NULL    | NONE  |\n| actor                                                      | VARIANT    | Yes  | false | NULL    | NONE  |\n| created_at                                                 | DATETIME   | Yes  | false | NULL    | NONE  |\n| payload                                                    | VARIANT    | Yes  | false | NULL    | NONE  |\n| public                                                     | BOOLEAN    | Yes  | false | NULL    | NONE  |\n+------------------------------------------------------------+------------+------+-------+---------+-------+\n6 rows in set (0.07 sec)\n\nmysql> set describe_extend_variant_column = true;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> desc github_events;\n+------------------------------------------------------------+------------+------+-------+---------+-------+\n| Field                                                      | Type       | Null | Key   | Default | Extra |\n+------------------------------------------------------------+------------+------+-------+---------+-------+\n| id                                                         | BIGINT     | No   | true  | NULL    |       |\n| type                                                       | VARCHAR(*) | Yes  | false | NULL    | NONE  |\n| actor                                                      | VARIANT    | Yes  | false | NULL    | NONE  |\n| actor.avatar_url                                           | TEXT       | Yes  | false | NULL    | NONE  |\n| actor.display_login                                        | TEXT       | Yes  | false | NULL    | NONE  |\n| actor.id                                                   | INT        | Yes  | false | NULL    | NONE  |\n| actor.login                                                | TEXT       | Yes  | false | NULL    | NONE  |\n| actor.url                                                  | TEXT       | Yes  | false | NULL    | NONE  |\n| created_at                                                 | DATETIME   | Yes  | false | NULL    | NONE  |\n| payload                                                    | VARIANT    | Yes  | false | NULL    | NONE  |\n| payload.action                                             | TEXT       | Yes  | false | NULL    | NONE  |\n| payload.before                                             | TEXT       | Yes  | false | NULL    | NONE  |\n| payload.comment.author_association                         | TEXT       | Yes  | false | NULL    | NONE  |\n| payload.comment.body                                       | TEXT       | Yes  | false | NULL    | NONE  |\n....\n+------------------------------------------------------------+------------+------+-------+---------+-------+\n406 rows in set (0.07 sec)\n"})}),"\n",(0,s.jsx)(a.p,{children:"DESC can be used to specify partition and view the schema of a particular partition. The syntax is as follows:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-sql",children:"DESCRIBE ${table_name} PARTITION ($partition_name);\n"})})]})}function p(e={}){let{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},250065:function(e,a,t){t.d(a,{Z:function(){return o},a:function(){return i}});var n=t(667294);let s={},r=n.createContext(s);function i(e){let a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:a},e.children)}}}]);