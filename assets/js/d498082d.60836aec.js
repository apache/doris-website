"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["717360"],{608983:function(e,n,t){t.r(n),t.d(n,{default:()=>d,frontMatter:()=>s,metadata:()=>i,assets:()=>a,toc:()=>c,contentTitle:()=>r});var i=JSON.parse('{"id":"how-to-contribute/commit-format-specification","title":"Commit Format Specification","description":"\x3c!--","source":"@site/community/how-to-contribute/commit-format-specification.md","sourceDirName":"how-to-contribute","slug":"/how-to-contribute/commit-format-specification","permalink":"/community/how-to-contribute/commit-format-specification","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Commit Format Specification","language":"en"},"sidebar":"community","previous":{"title":"How to Become Committer","permalink":"/community/how-to-contribute/how-to-be-a-committer"},"next":{"title":"Docs Format Specification","permalink":"/community/how-to-contribute/docs-format-specification"}}'),o=t("785893"),l=t("250065");let s={title:"Commit Format Specification",language:"en"},r=void 0,a={},c=[{value:"Commit Format Specification",id:"commit-format-specification",level:2}];function h(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"commit-format-specification",children:"Commit Format Specification"}),"\n",(0,o.jsx)(n.p,{children:"Commit is divided into \u2018 title \u2019 and \u2018 content \u2019 , the title should be lowercase and the contents  should be capitalized in principle ."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Title"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"[<type>](<scope>) <subject> (#pr)"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"<type>"})}),"\n",(0,o.jsx)(n.p,{children:"The types of this pull request are limited to the following types (all lowercase)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"fix: Bug fix"}),"\n",(0,o.jsx)(n.li,{children:"feature: New feature"}),"\n",(0,o.jsx)(n.li,{children:"feature-wip: Feature works-in-progress."}),"\n",(0,o.jsx)(n.li,{children:"improvement: Optimization and improvement for the original feature."}),"\n",(0,o.jsx)(n.li,{children:"style: Code style adjustment"}),"\n",(0,o.jsx)(n.li,{children:"typo: Code or Document correction"}),"\n",(0,o.jsx)(n.li,{children:"refactor: Code refactoring (no function changes involved)"}),"\n",(0,o.jsx)(n.li,{children:"performance/optimize: Performance optimization"}),"\n",(0,o.jsx)(n.li,{children:"test: Addition or repair of unit test"}),"\n",(0,o.jsx)(n.li,{children:"chore: Modification of build tool"}),"\n",(0,o.jsx)(n.li,{children:"revert: Revert a previous commit"}),"\n",(0,o.jsx)(n.li,{children:"deps: Modification of third-party dependency Library"}),"\n",(0,o.jsx)(n.li,{children:"community: Such as modification of Github issue template."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Some tips\uFF1A"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"If there are multiple types in one commit, multiple types need to be added"}),"\n",(0,o.jsx)(n.li,{children:"If code refactoring brings performance improvement,  [refactor][optimize] can be added at the same time"}),"\n",(0,o.jsx)(n.li,{children:"There should be no other types than those listed above. If necessary, you need to add new types to this document."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"<scope>"})}),"\n",(0,o.jsx)(n.p,{children:"Because there are many functional modules, only part of the module scope of the design submitted this time is listed here, which will be continuously improved according to the needs in the future."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"planner"}),"\n",(0,o.jsx)(n.li,{children:"meta"}),"\n",(0,o.jsx)(n.li,{children:"storage"}),"\n",(0,o.jsx)(n.li,{children:"stream-load"}),"\n",(0,o.jsx)(n.li,{children:"broker-load"}),"\n",(0,o.jsx)(n.li,{children:"routine-load"}),"\n",(0,o.jsx)(n.li,{children:"sync-job"}),"\n",(0,o.jsx)(n.li,{children:"export"}),"\n",(0,o.jsx)(n.li,{children:"executor"}),"\n",(0,o.jsx)(n.li,{children:"spark-connector"}),"\n",(0,o.jsx)(n.li,{children:"flink-connector"}),"\n",(0,o.jsx)(n.li,{children:"datax"}),"\n",(0,o.jsx)(n.li,{children:"log"}),"\n",(0,o.jsx)(n.li,{children:"cache"}),"\n",(0,o.jsx)(n.li,{children:"config"}),"\n",(0,o.jsx)(n.li,{children:"vectorization"}),"\n",(0,o.jsx)(n.li,{children:"docs"}),"\n",(0,o.jsx)(n.li,{children:"profile"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Some tips\uFF1A"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Try to use options that already exist in the list. If you need to add, please update this document in time"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"<subject>"})}),"\n",(0,o.jsx)(n.p,{children:"The title should clearly indicate the main contents of this commit as far as possible."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Content"}),"\n",(0,o.jsx)(n.p,{children:"commit message should follow the following format:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"issue\uFF1A#7777\n\nyour message\n"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"If there is no issue, it can be left blank. Issue can also appear in message."}),"\n",(0,o.jsx)(n.li,{children:"One line should not exceed 100 characters"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[fix](executor) change DateTimeValue's memory layout to load (#7022)\n\nChange DateTimeValue memory's layout to old to fix compatibility problems.\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[feat](log) extend logger interface, support structured log output(#6600)\n\nSupport structured logging.\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[fix][feat-opt](executor)(load)(config) fix some memory bugs (#6699)\n\n1. Fix a memory leak in `collect_iterator.cpp` (Fix #6700)\n2. Add a new BE config `max_segment_num_per_rowset` to limit the num of segment in new rowset.(Fix #6701)\n3. Make the error msg of stream load more friendly.\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[feat-opt](load) Reduce the number of segments when loading a large volume data in one batch (#6947)\n\n## Case\n\nIn the load process, each tablet will have a memtable to save the incoming data,\nand if the data in a memtable is larger than 100MB, it will be flushed to disk\nas a `segment` file. And then a new memtable will be created to save the following data.\n\nAssume that this is a table with N buckets(tablets). So the max size of all memtables\nwill be `N * 100MB`. If N is large, it will cost too much memory.\n\nSo for memory limit purpose, when the size of all memtables reach a threshold(2GB as default),\nDoris will try to flush all current memtables to disk(even if their size are not reach 100MB).\n\nSo you will see that the memtable will be flushed when it's size reach `2GB/N`, which maybe much\nsmaller than 100MB, resulting in too many small segment files.\n\n## Solution\n\nWhen decide to flush memtable to reduce memory consumption, NOT to flush all memtable,\nbut to flush part of them.\n\nFor example, there are 50 tablets(with 50 memtables). The memory limit is 1GB,\nso when each memtable reach 20MB, the total size reach 1GB, and flush will occur.\n\nIf I only flush 25 of 50 memtables, then next time when the total size reach 1GB,\nthere will be 25 memtables with size 10MB, and other 25 memtables with size 30MB.\nSo I can flush those memtables with size 30MB, which is larger than 20MB.\n\nThe main idea is to introduce some jitter during flush to ensure the small unevenness\nof each memtable, so as to ensure that flush will only be triggered when the memtable\nis large enough.\n\nIn my test, loading a table with 48 buckets, mem limit 2G, in previous version,\nthe average memtable size is 44MB, after modification, the average size is 82MB\n"})}),"\n"]}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return s}});var i=t(667294);let o={},l=i.createContext(o);function s(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);