"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["287683"],{930662:function(n,e,r){r.r(e),r.d(e,{default:()=>d,frontMatter:()=>t,metadata:()=>a,assets:()=>c,toc:()=>o,contentTitle:()=>i});var a=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-count","title":"ARRAY_COUNT","description":"array_count","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-count.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-count","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-count","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_COUNT","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_CONTAINS_ALL","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-contains_all"},"next":{"title":"ARRAY_CUM_SUM","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-cum-sum"}}'),l=r("785893"),s=r("250065");let t={title:"ARRAY_COUNT",language:"en"},i=void 0,c={},o=[{value:"array_count",id:"array_count",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Examples",id:"examples",level:3},{value:"Keywords",id:"keywords",level:3}];function u(n){let e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",version:"version",...(0,s.a)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{id:"array_count",children:"array_count"}),"\n",(0,l.jsxs)(e.version,{since:"2.0.0",children:["\n",(0,l.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(e.p,{children:"Applies a lambda expression to elements in an array and counts the number of elements whose return value is not 0."}),"\n",(0,l.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"array_count(lambda, array1, ...)\n"})}),"\n",(0,l.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"lambda"}),"\uFF1Alambda expression, used to evaluate and calculate array elements"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"array1, ..."}),"\uFF1Aone or more ARRAY<T> type parameters"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"T supported types:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,l.jsx)(e.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,l.jsx)(e.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,l.jsx)(e.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,l.jsx)(e.li,{children:"IP types: IPV4, IPV6"}),"\n",(0,l.jsx)(e.li,{children:"Complex data types: ARRAY, MAP, STRUCT"}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"return-value",children:"Return Value"}),"\n",(0,l.jsx)(e.p,{children:"Return type: BIGINT"}),"\n",(0,l.jsx)(e.p,{children:"Return value meaning:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Returns the number of elements whose lambda expression result is true"}),"\n",(0,l.jsx)(e.li,{children:"0: if no elements satisfy the condition, or the input array is NULL"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Usage notes:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"The number of parameters in the lambda expression must match the number of array parameters"}),"\n",(0,l.jsx)(e.li,{children:"All input arrays must have the same length"}),"\n",(0,l.jsx)(e.li,{children:"Supports counting on multiple arrays and complex type arrays"}),"\n",(0,l.jsx)(e.li,{children:"Empty array returns 0, NULL array returns 0"}),"\n",(0,l.jsx)(e.li,{children:"Lambda expressions can call other higher-order functions, but the return types must be compatible"}),"\n",(0,l.jsx)(e.li,{children:"For null values in array elements: null elements will be passed to the lambda expression for processing, and the lambda can evaluate null values"}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE array_count_test (\n    id INT,\n    int_array ARRAY<INT>,\n    double_array ARRAY<DOUBLE>,\n    string_array ARRAY<STRING>\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 3\nPROPERTIES (\n    \"replication_num\" = \"1\"\n);\n\nINSERT INTO array_count_test VALUES\n(1, [1, 2, 3, 4, 5], [1.1, 2.2, 3.3, 4.4, 5.5], ['a', 'bb', 'ccc', 'dddd', 'eeeee']),\n(2, [1, null, 3, null, 5], [1.1, null, 3.3, null, 5.5], ['a', null, 'ccc', null, 'eeeee']),\n(3, [], [], []),\n(4, NULL, NULL, NULL);\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Query examples:"})}),"\n",(0,l.jsx)(e.p,{children:"Count elements in int_array that are greater than 2:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> x > 2, int_array) FROM array_count_test WHERE id = 1;\n+-------------------------------------+\n| array_count(x -> x > 2, int_array)  |\n+-------------------------------------+\n|                                   3 |\n+-------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Count elements in double_array that are greater than or equal to 3:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> x >= 3, double_array) FROM array_count_test WHERE id = 1;\n+------------------------------------------+\n| array_count(x -> x >= 3, double_array)   |\n+------------------------------------------+\n|                                        3 |\n+------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Count elements in string_array with length greater than 2:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> length(x) > 2, string_array) FROM array_count_test WHERE id = 1;\n+--------------------------------------------------+\n| array_count(x -> length(x) > 2, string_array)    |\n+--------------------------------------------------+\n|                                              3   |\n+--------------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"For empty array calculation:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> x > 0, int_array) FROM array_count_test WHERE id = 3;\n+-------------------------------------+\n| array_count(x -> x > 0, int_array)  |\n+-------------------------------------+\n|                                   0 |\n+-------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"For NULL array calculation:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> x > 0, int_array) FROM array_count_test WHERE id = 4;\n+-------------------------------------+\n| array_count(x -> x > 0, int_array)  |\n+-------------------------------------+\n|                                   0 |\n+-------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Count null elements in an array containing null values:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> x is null, int_array) FROM array_count_test WHERE id = 2;\n+------------------------------------------+\n| array_count(x -> x is null, int_array)   |\n+------------------------------------------+\n|                                        2 |\n+------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Count non-null elements in an array containing null values:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> x is not null, int_array) FROM array_count_test WHERE id = 2;\n+----------------------------------------------+\n| array_count(x -> x is not null, int_array)   |\n+----------------------------------------------+\n|                                            3 |\n+----------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Multiple array parameters example:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count((x, y) -> x > y, [1, 2, 3], [0, 3, 2]);\n+--------------------------------------------------+\n| array_count((x, y) -> x > y, [1, 2, 3], [0, 3, 2]) |\n+--------------------------------------------------+\n|                                              2   |\n+--------------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Complex type example - count arrays with more than 2 elements:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> array_length(x) > 2, [[1,2],[1,2,3],[4,5,6,7]]);\n+--------------------------------------------------+\n| array_count(x -> array_length(x) > 2, [[1,2],[1,2,3],[4,5,6,7]]) |\n+--------------------------------------------------+\n|                                              2   |\n+--------------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Nested higher-order function example - count arrays that contain elements greater than 5:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> array_exists(y -> y > 5, x), [[1,2,3],[4,5,6],[7,8,9]]);\n+--------------------------------------------------+\n| array_count(x -> array_exists(y -> y > 5, x), [[1,2,3],[4,5,6],[7,8,9]]) |\n+--------------------------------------------------+\n|                                              2   |\n+--------------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.p,{children:"Literal array example:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-sql",children:"SELECT array_count(x -> x % 2 = 0, [1, 2, 3, 4, 5, 6]);\n+------------------------------------------+\n| array_count(x -> x % 2 = 0, [1, 2, 3, 4, 5, 6]) |\n+------------------------------------------+\n|                                        3 |\n+------------------------------------------+\n"})}),"\n",(0,l.jsx)(e.h3,{id:"keywords",children:"Keywords"}),"\n",(0,l.jsx)(e.p,{children:"ARRAY, COUNT, ARRAY_COUNT"}),"\n"]})]})}function d(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(u,{...n})}):u(n)}},250065:function(n,e,r){r.d(e,{Z:function(){return i},a:function(){return t}});var a=r(667294);let l={},s=a.createContext(l);function t(n){let e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:t(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);