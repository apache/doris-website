"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["862290"],{374255:function(e,n,r){r.r(n),r.d(n,{default:()=>u,frontMatter:()=>l,metadata:()=>a,assets:()=>c,toc:()=>o,contentTitle:()=>i});var a=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-intersect","title":"ARRAY_INTERSECT","description":"array_intersect","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-intersect.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-intersect","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-intersect","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_INTERSECT","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_FLATTEN","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-flatten"},"next":{"title":"ARRAY_JOIN","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-join"}}'),s=r("785893"),t=r("250065");let l={title:"ARRAY_INTERSECT",language:"en"},i=void 0,c={},o=[{value:"array_intersect",id:"array_intersect",level:2},{value:"Description",id:"description",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Keywords",id:"keywords",level:3}];function d(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",t:"t",ul:"ul",version:"version",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"array_intersect",children:"array_intersect"}),"\n",(0,s.jsx)(n.version,{since:"2.0.0",children:"\n"}),"\n",(0,s.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Returns the intersection of multiple arrays, i.e., elements that exist in all arrays. The function finds elements that exist in all input arrays and forms a new array after deduplication."}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"array_intersect(ARRAY<T> arr1, ARRAY<T> arr2, [ARRAY<T> arr3, ...])\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"arr1, arr2, arr3, ..."}),"\uFF1AARRAY",(0,s.jsx)(n.t,{children:" type, arrays for which to calculate the intersection. Supports two or more array parameters."})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported types for T:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,s.jsx)(n.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,s.jsx)(n.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,s.jsx)(n.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,s.jsx)(n.li,{children:"IP types: IPV4, IPV6"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:["Return type: ARRAY",(0,s.jsx)(n.t,{})]}),"\n",(0,s.jsx)(n.p,{children:"Return value meaning:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a new array containing unique elements that exist in all input arrays"}),"\n",(0,s.jsx)(n.li,{children:"Empty array: when there are no common elements among all input parameter arrays"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Usage notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The function finds elements that exist in all input arrays, and elements in the result array will be deduplicated"}),"\n",(0,s.jsx)(n.li,{children:"Empty arrays and any non-NULL array result in empty arrays. If there are no overlapping elements, the function will return an empty array."}),"\n",(0,s.jsx)(n.li,{children:"The function does not support NULL arrays"}),"\n",(0,s.jsx)(n.li,{children:"Element comparison follows type compatibility rules. When types are incompatible, conversion will be attempted, and failure results in null"}),"\n",(0,s.jsx)(n.li,{children:"For null values in array elements: null elements are treated as regular elements in operations, and null is considered the same as null"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Query Examples:"})}),"\n",(0,s.jsx)(n.p,{children:"Intersection of two arrays:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([1, 2, 3, 4, 5], [2, 4, 6, 8]);\n+------------------------------------------------+\n| array_intersect([1, 2, 3, 4, 5], [2, 4, 6, 8]) |\n+------------------------------------------------+\n| [4, 2]                                         |\n+------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Intersection of multiple arrays:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([1, 2, 3, 4, 5], [2, 4, 6, 8], [2, 4, 10, 12]);\n+----------------------------------------------------------------+\n| array_intersect([1, 2, 3, 4, 5], [2, 4, 6, 8], [2, 4, 10, 12]) |\n+----------------------------------------------------------------+\n| [2, 4]                                                         |\n+----------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Intersection of string arrays:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect(['a', 'b', 'c'], ['b', 'c', 'd']);\n+--------------------------------------------+\n| array_intersect(['a','b','c'], ['b','c','d']) |\n+--------------------------------------------+\n| [\"b\", \"c\"]                                 |\n+--------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Array containing null values, null is treated as a value that can be compared for equality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([1, null, 2, null, 3], [null, 2, 3, 4]);\n+---------------------------------------------------------+\n| array_intersect([1, null, 2, null, 3], [null, 2, 3, 4]) |\n+---------------------------------------------------------+\n| [null, 2, 3]                                            |\n+---------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Intersection of string array and integer array:\nString '2' can be converted to integer 2, 'b' conversion fails and becomes null:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([1, 2, null, 3], ['2', 'b']);\n+----------------------------------------------+\n| array_intersect([1, 2, null, 3], ['2', 'b']) |\n+----------------------------------------------+\n| [null, 2]                                    |\n+----------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Empty array with any array:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([], [1, 2, 3]);\n+-----------------------------+\n| array_intersect([], [1,2,3]) |\n+-----------------------------+\n| []                          |\n+-----------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"NULL input arrays will error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect(NULL, NULL);\nERROR 1105 (HY000): errCode = 2, detailMessage = class org.apache.doris.nereids.types.NullType cannot be cast to class org.apache.doris.nereids.types.ArrayType (org.apache.doris.nereids.types.NullType and org.apache.doris.nereids.types.ArrayType are in unnamed module of loader 'app')\n"})}),"\n",(0,s.jsx)(n.p,{children:"Complex types are not supported and will error:\nNested array types are not supported, will error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([[1,2],[3,4],[5,6]]);\nERROR 1105 (HY000): errCode = 2, detailMessage = array_intersect does not support type ARRAY<ARRAY<TINYINT>>, expression is array_intersect([[1, 2], [3, 4], [5, 6]])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Map types are not supported, will error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([{'k':1},{'k':2},{'k':3}]);\nERROR 1105 (HY000): errCode = 2, detailMessage = array_intersect does not support type ARRAY<MAP<VARCHAR(1),TINYINT>>, expression is array_intersect([map('k', 1), map('k', 2), map('k', 3)])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Error when parameter count is wrong:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect([1, 2, 3]);\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not found function 'array_intersect' which has 1 arity. Candidate functions are: [array_intersect(Expression, Expression, ...)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Error when passing non-array type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_intersect('not_an_array', [1, 2, 3]);\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: array_intersect(VARCHAR(12), ARRAY<INT>)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsx)(n.p,{children:"ARRAY, INTERSECT, ARRAY_INTERSECT"})]})}function u(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return i},a:function(){return l}});var a=r(667294);let s={},t=a.createContext(s);function l(e){let n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);