"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["918696"],{281931:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>i,assets:()=>l,toc:()=>d,contentTitle:()=>o});var i=JSON.parse('{"id":"ecosystem/flink-doris-connector","title":"Flink Doris Connector","description":"The Flink Doris Connector is used to read from and write data to a Doris cluster through Flink. It also integrates FlinkCDC, which allows for more convenient full database synchronization with upstream databases such as MySQL.","source":"@site/docs/ecosystem/flink-doris-connector.md","sourceDirName":"ecosystem","slug":"/ecosystem/flink-doris-connector","permalink":"/docs/dev/ecosystem/flink-doris-connector","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Flink Doris Connector","language":"en"},"sidebar":"docs","previous":{"title":"Spark Doris Connector","permalink":"/docs/dev/ecosystem/spark-doris-connector"},"next":{"title":"Doris Kafka Connector","permalink":"/docs/dev/ecosystem/doris-kafka-connector"}}'),r=s("785893"),t=s("250065");let a={title:"Flink Doris Connector",language:"en"},o=void 0,l={},d=[{value:"Version Description",id:"version-description",level:2},{value:"Usage",id:"usage",level:2},{value:"Jar",id:"jar",level:4},{value:"Maven",id:"maven",level:4},{value:"Working Principles",id:"working-principles",level:2},{value:"Reading Data from Doris",id:"reading-data-from-doris",level:3},{value:"Writing Data to Doris",id:"writing-data-to-doris",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Preparation",id:"preparation",level:4},{value:"Flink Cluster Deployment",id:"flink-cluster-deployment",level:4},{value:"Initialize Doris Tables",id:"initialize-doris-tables",level:4},{value:"Run FlinkSQL Task",id:"run-flinksql-task",level:4},{value:"Query Data",id:"query-data",level:4},{value:"Scenarios and Operations",id:"scenarios-and-operations",level:2},{value:"Reading Data from Doris",id:"reading-data-from-doris-1",level:3},{value:"Using FlinkSQL to Read Data",id:"using-flinksql-to-read-data",level:4},{value:"Thrift Method",id:"thrift-method",level:5},{value:"ArrowFlightSQL",id:"arrowflightsql",level:5},{value:"Using DataStream API to Read Data",id:"using-datastream-api-to-read-data",level:4},{value:"Writing Data to Doris",id:"writing-data-to-doris-1",level:3},{value:"Using FlinkSQL to Write Data",id:"using-flinksql-to-write-data",level:4},{value:"Using DataStream API to Write Data",id:"using-datastream-api-to-write-data",level:4},{value:"Standard String Format",id:"standard-string-format",level:5},{value:"RowData Format",id:"rowdata-format",level:5},{value:"Debezium Format",id:"debezium-format",level:5},{value:"Multi-table Write Format",id:"multi-table-write-format",level:5},{value:"Lookup Join",id:"lookup-join",level:3},{value:"Full Database Synchronization",id:"full-database-synchronization",level:3},{value:"MySQL Whole Database Synchronization",id:"mysql-whole-database-synchronization",level:4},{value:"Oracle Whole Database Synchronization",id:"oracle-whole-database-synchronization",level:4},{value:"PostgreSQL Whole Database Synchronization",id:"postgresql-whole-database-synchronization",level:4},{value:"SQLServer Whole Database Synchronization",id:"sqlserver-whole-database-synchronization",level:4},{value:"DB2 Whole Database Synchronization",id:"db2-whole-database-synchronization",level:4},{value:"MongoDB Whole Database Synchronization",id:"mongodb-whole-database-synchronization",level:4},{value:"AWS Aurora MySQL Whole Database Synchronization",id:"aws-aurora-mysql-whole-database-synchronization",level:4},{value:"AWS RDS MySQL Whole Database Synchronization",id:"aws-rds-mysql-whole-database-synchronization",level:4},{value:"Usage Instructions",id:"usage-instructions",level:2},{value:"Parameter Configuration",id:"parameter-configuration",level:3},{value:"General Configuration Items",id:"general-configuration-items",level:4},{value:"Source Configuration",id:"source-configuration",level:4},{value:"Sink Configuration",id:"sink-configuration",level:4},{value:"Lookup Join Configuration",id:"lookup-join-configuration",level:4},{value:"Full Database Synchronization Configuration",id:"full-database-synchronization-configuration",level:4},{value:"Type Mapping",id:"type-mapping",level:3},{value:"Monitoring Metrics",id:"monitoring-metrics",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"FlinkSQL Quickly Connects to MySQL Data via CDC",id:"flinksql-quickly-connects-to-mysql-data-via-cdc",level:3},{value:"Flink Performs Partial Column Updates",id:"flink-performs-partial-column-updates",level:3},{value:"Flink Imports Bitmap Data",id:"flink-imports-bitmap-data",level:3},{value:"FlinkCDC Updates Key Columns",id:"flinkcdc-updates-key-columns",level:3},{value:"Flink Deletes Data According to Specified Columns",id:"flink-deletes-data-according-to-specified-columns",level:3},{value:"Flink CDC Synchronize DDL Statements",id:"flink-cdc-synchronize-ddl-statements",level:3},{value:"Frequently Asked Questions (FAQ)",id:"frequently-asked-questions-faq",level:2}];function c(e){let n={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector",children:"Flink Doris Connector"})," is used to read from and write data to a Doris cluster through Flink. It also integrates ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/docs/connectors/flink-sources/overview/",children:"FlinkCDC"}),", which allows for more convenient full database synchronization with upstream databases such as MySQL."]}),"\n",(0,r.jsx)(n.p,{children:"Using the Flink Connector, you can perform the following operations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Read data from Doris"}),": Flink Connector supports parallel reading from BE, improving data retrieval efficiency."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Write data to Doris"}),": After batching in Flink, data is imported into Doris in bulk using Stream Load."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Perform dimension table joins with Lookup Join"}),": Batching and asynchronous queries accelerate dimension table joins."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Full database synchronization"}),": Using Flink CDC, you can synchronize entire databases such as MySQL, Oracle, and PostgreSQL, including automatic table creation and DDL operations."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"version-description",children:"Version Description"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Connector Version"}),(0,r.jsx)(n.th,{children:"Flink Version"}),(0,r.jsx)(n.th,{children:"Doris Version"}),(0,r.jsx)(n.th,{children:"Java Version"}),(0,r.jsx)(n.th,{children:"Scala Version"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.0.3"}),(0,r.jsx)(n.td,{children:"1.11,1.12,1.13,1.14"}),(0,r.jsx)(n.td,{children:"0.15+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"2.11,2.12"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.1.1"}),(0,r.jsx)(n.td,{children:"1.14"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"2.11,2.12"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.2.1"}),(0,r.jsx)(n.td,{children:"1.15"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.3.0"}),(0,r.jsx)(n.td,{children:"1.16"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.4.0"}),(0,r.jsx)(n.td,{children:"1.15,1.16,1.17"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.5.2"}),(0,r.jsx)(n.td,{children:"1.15,1.16,1.17,1.18"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.6.1"}),(0,r.jsx)(n.td,{children:"1.15,1.16,1.17,1.18,1.19"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"24.0.1"}),(0,r.jsx)(n.td,{children:"1.15,1.16,1.17,1.18,1.19,1.20"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"24.1.0"}),(0,r.jsx)(n.td,{children:"1.15,1.16,1.17,1.18,1.19,1.20"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"25.0.0"}),(0,r.jsx)(n.td,{children:"1.15,1.16,1.17,1.18,1.19,1.20"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"25.1.0"}),(0,r.jsx)(n.td,{children:"1.15,1.16,1.17,1.18,1.19,1.20"}),(0,r.jsx)(n.td,{children:"1.0+"}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"-"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"The Flink Doris Connector can be used in two ways: via Jar or Maven."}),"\n",(0,r.jsx)(n.h4,{id:"jar",children:"Jar"}),"\n",(0,r.jsxs)(n.p,{children:["You can download the corresponding version of the Flink Doris Connector Jar file ",(0,r.jsx)(n.a,{href:"https://doris.apache.org/download#doris-ecosystem",children:"here"}),", then copy this file to the ",(0,r.jsx)(n.code,{children:"classpath"})," of your ",(0,r.jsx)(n.code,{children:"Flink"})," setup to use the ",(0,r.jsx)(n.code,{children:"Flink-Doris-Connector"}),". For a ",(0,r.jsx)(n.code,{children:"Standalone"})," mode Flink deployment, place this file under the ",(0,r.jsx)(n.code,{children:"lib/"})," folder. For a Flink cluster running in ",(0,r.jsx)(n.code,{children:"Yarn"})," mode, place the file into the pre-deployment package."]}),"\n",(0,r.jsx)(n.h4,{id:"maven",children:"Maven"}),"\n",(0,r.jsx)(n.p,{children:"To use it with Maven, simply add the following dependency to your Pom file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n  <groupId>org.apache.doris</groupId>\n  <artifactId>flink-doris-connector-${flink.version}</artifactId>\n  <version>${connector.version}</version>\n</dependency> \n"})}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n  <groupId>org.apache.doris</groupId>\n  <artifactId>flink-doris-connector-1.16</artifactId>\n  <version>25.1.0</version>\n</dependency> \n"})}),"\n",(0,r.jsx)(n.h2,{id:"working-principles",children:"Working Principles"}),"\n",(0,r.jsx)(n.h3,{id:"reading-data-from-doris",children:"Reading Data from Doris"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Flink Connector Principles JDBC Doris",src:s(923422).Z+"",width:"8556",height:"2472"})}),"\n",(0,r.jsx)(n.p,{children:"When reading data, Flink Doris Connector offers higher performance compared to Flink JDBC Connector and is recommended for use:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Flink JDBC Connector"}),": Although Doris is compatible with the MySQL protocol, using Flink JDBC Connector for reading and writing to a Doris cluster is not recommended. This approach results in serial read/write operations on a single FE node, creating a bottleneck and affecting performance."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Flink Doris Connector"}),": Starting from Doris 2.1, ADBC is the default protocol for Flink Doris Connector. The reading process follows these steps:"]}),"\n",(0,r.jsx)(n.p,{children:"a. Flink Doris Connector first retrieves Tablet ID information from FE based on the query plan."}),"\n",(0,r.jsxs)(n.p,{children:["b. It generates the query statement: ",(0,r.jsx)(n.code,{children:"SELECT * FROM tbs TABLET(id1, id2, id3)"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"c. The query is then executed through the ADBC port of FE."}),"\n",(0,r.jsx)(n.p,{children:"d. Data is returned directly from BE, bypassing FE to eliminate the single-point bottleneck."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"writing-data-to-doris",children:"Writing Data to Doris"}),"\n",(0,r.jsx)(n.p,{children:"When using Flink Doris Connector for data writing, batch processing is performed in Flink's memory before bulk import via Stream Load. Doris Flink Connector provides two batching modes, with Flink Checkpoint-based streaming writes as the default:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{children:"Streaming Write"}),(0,r.jsx)(n.th,{children:"Batch Write"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Trigger Condition"})}),(0,r.jsx)(n.td,{children:"Relies on Flink Checkpoints and follows Flink's checkpoint cycle to write to Doris"}),(0,r.jsx)(n.td,{children:"Periodic submission based on connector-defined time or data volume thresholds"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Consistency"})}),(0,r.jsx)(n.td,{children:"Exactly-Once"}),(0,r.jsx)(n.td,{children:"At-Least-Once; Exactly-Once can be ensured with the primary key model"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Latency"})}),(0,r.jsx)(n.td,{children:"Limited by the Flink checkpoint interval, generally higher"}),(0,r.jsx)(n.td,{children:"Independent batch mechanism with flexible adjustment"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Fault Tolerance & Recovery"})}),(0,r.jsx)(n.td,{children:"Fully consistent with Flink state recovery"}),(0,r.jsx)(n.td,{children:"Relies on external deduplication logic (e.g., Doris primary key deduplication)"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.h4,{id:"preparation",children:"Preparation"}),"\n",(0,r.jsx)(n.h4,{id:"flink-cluster-deployment",children:"Flink Cluster Deployment"}),"\n",(0,r.jsx)(n.p,{children:"Taking a Standalone cluster as an example:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Download the Flink installation package, e.g., ",(0,r.jsx)(n.a,{href:"https://archive.apache.org/dist/flink/flink-1.18.1/flink-1.18.1-bin-scala_2.12.tgz",children:"Flink 1.18.1"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:["After extraction, place the Flink Doris Connector package in ",(0,r.jsx)(n.code,{children:"<FLINK_HOME>/lib"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:["Navigate to the ",(0,r.jsx)(n.code,{children:"<FLINK_HOME>"})," directory and run ",(0,r.jsx)(n.code,{children:"bin/start-cluster.sh"})," to start the Flink cluster;"]}),"\n",(0,r.jsxs)(n.li,{children:["You can verify if the Flink cluster started successfully using the ",(0,r.jsx)(n.code,{children:"jps"})," command."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"initialize-doris-tables",children:"Initialize Doris Tables"}),"\n",(0,r.jsx)(n.p,{children:"Run the following statements to create Doris tables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'CREATE DATABASE test;\n\nCREATE TABLE test.student (\n  `id` INT,\n  `name` VARCHAR(256),\n  `age` INT\n)\nUNIQUE KEY(`id`)\nDISTRIBUTED BY HASH(`id`) BUCKETS 1\nPROPERTIES (\n"replication_allocation" = "tag.location.default: 3"\n);\n\nINSERT INTO test.student values(1,"James",18);\nINSERT INTO test.student values(2,"Emily",28);\n\nCREATE TABLE test.student_trans (\n  `id` INT,\n  `name` VARCHAR(256),\n  `age` INT\n)\nUNIQUE KEY(`id`)\nDISTRIBUTED BY HASH(`id`) BUCKETS 1\nPROPERTIES (\n"replication_allocation" = "tag.location.default: 3"\n);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"run-flinksql-task",children:"Run FlinkSQL Task"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Start FlinkSQL Client"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bin/sql-client.sh\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Run FlinkSQL"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE Student (\n    id STRING,\n    name STRING,\n    age INT\n    ) \n    WITH (\n      'connector' = 'doris',\n      'fenodes' = '127.0.0.1:8030',\n      'table.identifier' = 'test.student',\n      'username' = 'root',\n      'password' = ''\n);\n\nCREATE TABLE StudentTrans (\n    id STRING,\n    name STRING,\n    age INT\n    ) \n    WITH (\n      'connector' = 'doris',\n      'fenodes' = '127.0.0.1:8030',\n      'table.identifier' = 'test.student_trans',\n      'username' = 'root',\n      'password' = '',\n      'sink.label-prefix' = 'doris_label'\n);\n\nINSERT INTO StudentTrans SELECT id, concat('prefix_',name), age+1 FROM Student;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"query-data",children:"Query Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"mysql> select * from test.student_trans;\n+------+--------------+------+\n| id   | name         | age  |\n+------+--------------+------+\n|    1 | prefix_James |   19 |\n|    2 | prefix_Emily |   29 |\n+------+--------------+------+\n2 rows in set (0.02 sec)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"scenarios-and-operations",children:"Scenarios and Operations"}),"\n",(0,r.jsx)(n.h3,{id:"reading-data-from-doris-1",children:"Reading Data from Doris"}),"\n",(0,r.jsx)(n.p,{children:"When Flink reads data from Doris, the Doris Source is currently a bounded stream and does not support continuous reading in a CDC manner. Data can be read from Doris using Thrift or ArrowFlightSQL (supported from version 24.0.0 onward). Starting from version 2.1, ArrowFlightSQL is the recommended approach."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Thrift"}),": Data is read by calling the BE's Thrift interface. For detailed steps, refer to ",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris/blob/master/samples/doris-demo/doris-source-demo/README.md",children:"Reading Data via Thrift Interface"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ArrowFlightSQL"}),": Based on Doris 2.1, this method allows high-speed reading of large volumes of data using the Arrow Flight SQL protocol. For more information, refer to ",(0,r.jsx)(n.a,{href:"https://doris.apache.org/docs/dev/db-connect/arrow-flight-sql-connect/",children:"High-speed Data Transfer via Arrow Flight SQL"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"using-flinksql-to-read-data",children:"Using FlinkSQL to Read Data"}),"\n",(0,r.jsx)(n.h5,{id:"thrift-method",children:"Thrift Method"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"CREATE TABLE student (\n    id INT,\n    name STRING,\n    age INT\n    ) \n    WITH (\n      'connector' = 'doris',\n      'fenodes' = '127.0.0.1:8030',  -- Fe\u7684host:HttpPort\n      'table.identifier' = 'test.student',\n      'username' = 'root',\n      'password' = ''\n);\n\nSELECT * FROM student;\n"})}),"\n",(0,r.jsx)(n.h5,{id:"arrowflightsql",children:"ArrowFlightSQL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"CREATE TABLE student (\n    id INT,\n    name STRING,\n    age INT\n    ) \n    WITH (\n      'connector' = 'doris',\n      'fenodes' = '{fe.conf:http_port}', \n      'table.identifier' = 'test.student',\n      'source.use-flight-sql' = 'true',\n      'source.flight-sql-port' = '{fe.conf:arrow_flight_sql_port}',\n      'username' = 'root',\n      'password' = ''\n);\n\nSELECT * FROM student;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"using-datastream-api-to-read-data",children:"Using DataStream API to Read Data"}),"\n",(0,r.jsx)(n.p,{children:'When using the DataStream API to read data, you need to include the dependencies in your program\'s POM file in advance, as described in the "Usage" section.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Java",children:'final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nDorisOptions option = DorisOptions.builder()\n        .setFenodes("127.0.0.1:8030")\n        .setTableIdentifier("test.student")\n        .setUsername("root")\n        .setPassword("")\n        .build();\n\nDorisReadOptions readOptions = DorisReadOptions.builder().build();\nDorisSource<List<?>> dorisSource = DorisSource.<List<?>>builder()\n        .setDorisOptions(option)\n        .setDorisReadOptions(readOptions)\n        .setDeserializer(new SimpleListDeserializationSchema())\n        .build();\n\nenv.fromSource(dorisSource, WatermarkStrategy.noWatermarks(), "doris source").print();\nenv.execute("Doris Source Test");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the complete code, refer to:",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/flink-doris-connector/src/test/java/org/apache/doris/flink/example/DorisSourceDataStream.java",children:"DorisSourceDataStream.java"})]}),"\n",(0,r.jsx)(n.h3,{id:"writing-data-to-doris-1",children:"Writing Data to Doris"}),"\n",(0,r.jsx)(n.p,{children:"Flink writes data to Doris using the Stream Load method, supporting both streaming and batch-insertion modes."}),"\n",(0,r.jsx)(n.admonition,{title:"Difference Between Streaming and Batch-insertion",type:"info",children:(0,r.jsx)(n.p,{children:"Starting from Connector 1.5.0, batch-insertion is supported. Batch-insertion does not rely on Checkpoints; it buffers data in memory and controls the writing timing based on batch parameters. Streaming insertion requires Checkpoints to be enabled, continuously writing upstream data to Doris during the entire Checkpoint period, without keeping data in memory continuously."})}),"\n",(0,r.jsx)(n.h4,{id:"using-flinksql-to-write-data",children:"Using FlinkSQL to Write Data"}),"\n",(0,r.jsxs)(n.p,{children:["For testing, Flink's ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/table/datagen/",children:"Datagen"})," is used to simulate the continuously generated upstream data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"-- enable checkpoint\nSET 'execution.checkpointing.interval' = '30s';\n\nCREATE TABLE student_source (\n    id INT,\n    name STRING,\n    age INT\n) WITH (\n  'connector' = 'datagen',\n  'rows-per-second' = '1',\n  'fields.name.length' = '20',\n  'fields.id.min' = '1',\n  'fields.id.max' = '100000',\n  'fields.age.min' = '3',\n  'fields.age.max' = '30'\n);\n\n-- doris sink\nCREATE TABLE student_sink (\n    id INT,\n    name STRING,\n    age INT\n    ) \n    WITH (\n      'connector' = 'doris',\n      'fenodes' = '10.16.10.6:28737',\n      'table.identifier' = 'test.student',\n      'username' = 'root',\n      'password' = 'password',\n      'sink.label-prefix' = 'doris_label'\n      --'sink.enable.batch-mode' = 'true'  Adding this configuration enables batch writing\n);\n\nINSERT INTO student_sink SELECT * FROM student_source;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"using-datastream-api-to-write-data",children:"Using DataStream API to Write Data"}),"\n",(0,r.jsx)(n.p,{children:"When using the DataStream API to write data, different serialization methods can be used to serialize the upstream data before writing it to the Doris table."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"The Connector already contains the HttpClient4.5.13 version. If you reference HttpClient separately in your project, you need to ensure that the versions are consistent."})}),"\n",(0,r.jsx)(n.h5,{id:"standard-string-format",children:"Standard String Format"}),"\n",(0,r.jsxs)(n.p,{children:["When the upstream data is in CSV or JSON format, you can directly use the ",(0,r.jsx)(n.code,{children:"SimpleStringSerializer"})," to serialize the data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Java",children:'StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nenv.enableCheckpointing(30000);\nDorisSink.Builder<String> builder = DorisSink.builder();\n\nDorisOptions dorisOptions = DorisOptions.builder()\n        .setFenodes("10.16.10.6:28737")\n        .setTableIdentifier("test.student")\n        .setUsername("root")\n        .setPassword("")\n        .build();\n\nProperties properties = new Properties();\n// When the upstream data is in json format, the following configuration needs to be enabled\nproperties.setProperty("read_json_by_line", "true");\nproperties.setProperty("format", "json");\n    \n// When writing csv data from the upstream, the following configurations need to be enabled\n//properties.setProperty("format", "csv");\n//properties.setProperty("column_separator", ",");\n    \nDorisExecutionOptions executionOptions = DorisExecutionOptions.builder()\n       .setLabelPrefix("label-doris")\n       .setDeletable(false)\n       //.setBatchMode(true)  Enable batch writing\n       .setStreamLoadProp(properties)\n       .build();\n\nbuilder.setDorisReadOptions(DorisReadOptions.builder().build())\n       .setDorisExecutionOptions(executionOptions)\n       .setSerializer(new SimpleStringSerializer())\n       .setDorisOptions(dorisOptions);\n\nList<String> data = new ArrayList<>();\ndata.add("{\\"id\\":3,\\"name\\":\\"Michael\\",\\"age\\":28}");\ndata.add("{\\"id\\":4,\\"name\\":\\"David\\",\\"age\\":38}");\n\nenv.fromCollection(data).sinkTo(builder.build());\nenv.execute("doris test");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the complete code, refer to:",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/flink-doris-connector/src/test/java/org/apache/doris/flink/example/DorisSinkExample.java",children:"DorisSinkExample.java"})]}),"\n",(0,r.jsx)(n.h5,{id:"rowdata-format",children:"RowData Format"}),"\n",(0,r.jsxs)(n.p,{children:["RowData is the internal format of Flink. If the upstream data is in RowData format, you need to use the ",(0,r.jsx)(n.code,{children:"RowDataSerializer"})," to serialize the data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Java",children:'StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nenv.enableCheckpointing(10000);\nenv.setParallelism(1);\n\nDorisSink.Builder<RowData> builder = DorisSink.builder();\n\nProperties properties = new Properties();\nproperties.setProperty("column_separator", ",");\nproperties.setProperty("line_delimiter", "\\n");\nproperties.setProperty("format", "csv");\n// When writing json data from the upstream, the following configuration needs to be enabled\n// properties.setProperty("read_json_by_line", "true");\n// properties.setProperty("format", "json");\nDorisOptions.Builder dorisBuilder = DorisOptions.builder();\ndorisBuilder\n        .setFenodes("10.16.10.6:28737")\n        .setTableIdentifier("test.student")\n        .setUsername("root")\n        .setPassword("");\nDorisExecutionOptions.Builder executionBuilder = DorisExecutionOptions.builder();\nexecutionBuilder.setLabelPrefix(UUID.randomUUID().toString()).setDeletable(false).setStreamLoadProp(properties);\n\n// flink rowdata\u2018s schema\nString[] fields = {"id","name", "age"};\nDataType[] types = {DataTypes.INT(), DataTypes.VARCHAR(256), DataTypes.INT()};\n\nbuilder.setDorisExecutionOptions(executionBuilder.build())\n        .setSerializer(\n                RowDataSerializer.builder() // serialize according to rowdata\n                        .setType(LoadConstants.CSV)\n                        .setFieldDelimiter(",")\n                        .setFieldNames(fields)\n                        .setFieldType(types)\n                        .build())\n        .setDorisOptions(dorisBuilder.build());\n\n// mock rowdata source\nDataStream<RowData> source =\n        env.fromElements("")\n                .flatMap(\n                        new FlatMapFunction<String, RowData>() {\n                            @Override\n                            public void flatMap(String s, Collector<RowData> out)\n                                    throws Exception {\n                                GenericRowData genericRowData = new GenericRowData(3);\n                                genericRowData.setField(0, 1);\n                                genericRowData.setField(1, StringData.fromString("Michael"));\n                                genericRowData.setField(2, 18);\n                                out.collect(genericRowData);\n\n                                GenericRowData genericRowData2 = new GenericRowData(3);\n                                genericRowData2.setField(0, 2);\n                                genericRowData2.setField(1, StringData.fromString("David"));\n                                genericRowData2.setField(2, 38);\n                                out.collect(genericRowData2);\n                            }\n                        });\n\nsource.sinkTo(builder.build());\nenv.execute("doris test");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the complete code, refer to:",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/flink-doris-connector/src/test/java/org/apache/doris/flink/example/DorisSinkExampleRowData.java",children:"DorisSinkExampleRowData.java"})]}),"\n",(0,r.jsx)(n.h5,{id:"debezium-format",children:"Debezium Format"}),"\n",(0,r.jsxs)(n.p,{children:["For upstream data in Debezium format, such as data from FlinkCDC or Debezium format in Kafka, you can use the ",(0,r.jsx)(n.code,{children:"JsonDebeziumSchemaSerializer"})," to serialize the data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Java",children:'// enable checkpoint\nenv.enableCheckpointing(10000);\n\nProperties props = new Properties();\nprops.setProperty("format", "json");\nprops.setProperty("read_json_by_line", "true");\nDorisOptions dorisOptions = DorisOptions.builder()\n        .setFenodes("127.0.0.1:8030")\n        .setTableIdentifier("test.student")\n        .setUsername("root")\n        .setPassword("").build();\n\nDorisExecutionOptions.Builder  executionBuilder = DorisExecutionOptions.builder();\nexecutionBuilder.setLabelPrefix("label-prefix")\n        .setStreamLoadProp(props)\n        .setDeletable(true);\n\nDorisSink.Builder<String> builder = DorisSink.builder();\nbuilder.setDorisReadOptions(DorisReadOptions.builder().build())\n        .setDorisExecutionOptions(executionBuilder.build())\n        .setDorisOptions(dorisOptions)\n        .setSerializer(JsonDebeziumSchemaSerializer.builder().setDorisOptions(dorisOptions).build());\n\nenv.fromSource(mySqlSource, WatermarkStrategy.noWatermarks(), "MySQL Source")\n        .sinkTo(builder.build());\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the complete code, refer to:",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/flink-doris-connector/src/test/java/org/apache/doris/flink/example/CDCSchemaChangeExample.java",children:"CDCSchemaChangeExample.java"})]}),"\n",(0,r.jsx)(n.h5,{id:"multi-table-write-format",children:"Multi-table Write Format"}),"\n",(0,r.jsxs)(n.p,{children:["Currently, DorisSink supports synchronizing multiple tables with a single Sink. You need to pass both the data and the database/table information to the Sink, and serialize it using the ",(0,r.jsx)(n.code,{children:"RecordWithMetaSerializer"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Java",children:'StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nenv.setParallelism(1);\nDorisSink.Builder<RecordWithMeta> builder = DorisSink.builder();\nProperties properties = new Properties();\nproperties.setProperty("column_separator", ",");\nproperties.setProperty("line_delimiter", "\\n");\nproperties.setProperty("format", "csv");\nDorisOptions.Builder dorisBuilder = DorisOptions.builder();\ndorisBuilder\n        .setFenodes("10.16.10.6:28737")\n        .setTableIdentifier("")\n        .setUsername("root")\n        .setPassword("");\n\nDorisExecutionOptions.Builder executionBuilder = DorisExecutionOptions.builder();\n\nexecutionBuilder\n        .setLabelPrefix("label-doris")\n        .setStreamLoadProp(properties)\n        .setDeletable(false)\n        .setBatchMode(true);\n\nbuilder.setDorisReadOptions(DorisReadOptions.builder().build())\n        .setDorisExecutionOptions(executionBuilder.build())\n        .setDorisOptions(dorisBuilder.build())\n        .setSerializer(new RecordWithMetaSerializer());\n\nRecordWithMeta record = new RecordWithMeta("test", "student_1", "1,David,18");\nRecordWithMeta record1 = new RecordWithMeta("test", "student_2", "1,Jack,28");\nenv.fromCollection(Arrays.asList(record, record1)).sinkTo(builder.build());\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the complete code, refer to:",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/flink-doris-connector/src/test/java/org/apache/doris/flink/example/DorisSinkMultiTableExample.java",children:"DorisSinkMultiTableExample.java"})]}),"\n",(0,r.jsx)(n.h3,{id:"lookup-join",children:"Lookup Join"}),"\n",(0,r.jsx)(n.p,{children:"Using Lookup Join can optimize dimension table joins in Flink. When using Flink JDBC Connector for dimension table joins, the following issues may arise:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Flink JDBC Connector uses a synchronous query mode, meaning that after upstream data (e.g., from Kafka) sends a record, it immediately queries the Doris dimension table. This results in high query latency under high-concurrency scenarios."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Queries executed via JDBC are typically point lookups per record, whereas Doris recommends batch queries for better efficiency."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-release-1.20/docs/dev/table/sql/queries/joins/#lookup-join",children:"Lookup Join"})," for dimension table joins in Flink Doris Connector provides the following advantages:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Batch caching of upstream data"}),", avoiding the high latency and database load caused by per-record queries."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Asynchronous execution of join queries"}),", improving data throughput and reducing the query load on Doris."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"CREATE TABLE fact_table (\n  `id` BIGINT,\n  `name` STRING,\n  `city` STRING,\n  `process_time` as proctime()\n) WITH (\n  'connector' = 'kafka',\n  ...\n);\n\ncreate table dim_city(\n  `city` STRING,\n  `level` INT ,\n  `province` STRING,\n  `country` STRING\n) WITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'jdbc-url' = 'jdbc:mysql://127.0.0.1:9030',\n  'table.identifier' = 'dim.dim_city',\n  'username' = 'root',\n  'password' = ''\n);\n\nSELECT a.id, a.name, a.city, c.province, c.country,c.level \nFROM fact_table a\nLEFT JOIN dim_city FOR SYSTEM_TIME AS OF a.process_time AS c\nON a.city = c.city\n"})}),"\n",(0,r.jsx)(n.h3,{id:"full-database-synchronization",children:"Full Database Synchronization"}),"\n",(0,r.jsxs)(n.p,{children:["The Flink Doris Connector integrates ",(0,r.jsx)(n.strong,{children:"Flink CDC"})," (",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/docs/connectors/flink-sources/overview/",children:"Flink CDC Documentation"}),"), making it easier to synchronize relational databases like MySQL to Doris. This integration also includes automatic table creation, schema changes, etc. Supported databases for synchronization include: MySQL, Oracle, PostgreSQL, SQLServer, MongoDB, and DB2."]}),"\n",(0,r.jsxs)(n.admonition,{title:"Note",type:"info",children:[(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["When using full database synchronization, you need to add the corresponding Flink CDC dependencies in the ",(0,r.jsx)(n.code,{children:"$FLINK_HOME/lib"})," directory (Fat Jar), such as ",(0,r.jsxs)(n.strong,{children:["flink-sql-connector-mysql-cdc-",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"v"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"r"}),(0,r.jsx)(n.mi,{children:"s"}),(0,r.jsx)(n.mi,{children:"i"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"n"})]}),(0,r.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,r.jsx)(n.mi,{children:"j"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"r"}),(0,r.jsx)(n.mo,{children:"\u2217"}),(0,r.jsx)(n.mo,{children:"\u2217"}),(0,r.jsx)(n.mo,{separator:"true",children:","}),(0,r.jsx)(n.mo,{children:"\u2217"}),(0,r.jsx)(n.mo,{children:"\u2217"}),(0,r.jsx)(n.mi,{children:"f"}),(0,r.jsx)(n.mi,{children:"l"}),(0,r.jsx)(n.mi,{children:"i"}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mi,{children:"k"}),(0,r.jsx)(n.mo,{children:"\u2212"}),(0,r.jsx)(n.mi,{children:"s"}),(0,r.jsx)(n.mi,{children:"q"}),(0,r.jsx)(n.mi,{children:"l"}),(0,r.jsx)(n.mo,{children:"\u2212"}),(0,r.jsx)(n.mi,{children:"c"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mi,{children:"c"}),(0,r.jsx)(n.mi,{children:"t"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"r"}),(0,r.jsx)(n.mo,{children:"\u2212"}),(0,r.jsx)(n.mi,{children:"o"}),(0,r.jsx)(n.mi,{children:"r"}),(0,r.jsx)(n.mi,{children:"a"}),(0,r.jsx)(n.mi,{children:"c"}),(0,r.jsx)(n.mi,{children:"l"}),(0,r.jsx)(n.mi,{children:"e"}),(0,r.jsx)(n.mo,{children:"\u2212"}),(0,r.jsx)(n.mi,{children:"c"}),(0,r.jsx)(n.mi,{children:"d"}),(0,r.jsx)(n.mi,{children:"c"}),(0,r.jsx)(n.mo,{children:"\u2212"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"{version}.jar**, **flink-sql-connector-oracle-cdc-"})]})})}),(0,r.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,r.jsxs)(n.span,{className:"mord",children:[(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"ers"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"i"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]}),(0,r.jsx)(n.span,{className:"mord",children:"."}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"ja"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"\u2217"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6597em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(n.span,{className:"mord",children:"\u2217"}),(0,r.jsx)(n.span,{className:"mpunct",children:","}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(n.span,{className:"mord",children:"\u2217"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"\u2217"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"ink"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"ql"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.6984em",verticalAlign:"-0.0833em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"co"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"nn"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"ec"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"or"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"or"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"c"}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"c"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"d"}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"c"}),(0,r.jsx)(n.span,{className:"mord",children:"\u2212"})]})]})]}),"{version}.jar"]}),". FlinkCDC version 3.1 and later is not compatible with previous versions. You can download the dependencies from the following links: ",(0,r.jsx)(n.a,{href:"https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-mysql-cdc/",children:"FlinkCDC 3.x"}),", ",(0,r.jsx)(n.a,{href:"https://repo.maven.apache.org/maven2/com/ververica/flink-sql-connector-mysql-cdc/",children:"FlinkCDC 2.x"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["For versions after Connector 24.0.0, the required Flink CDC version must be 3.1 or higher. You can download it ",(0,r.jsx)(n.a,{href:"https://repo.maven.apache.org/maven2/org/apache/flink/flink-sql-connector-mysql-cdc/",children:"here"}),". If Flink CDC is used to synchronize MySQL and Oracle, you must also add the relevant JDBC drivers under ",(0,r.jsx)(n.code,{children:"$FLINK_HOME/lib"}),"."]}),"\n"]}),(0,r.jsx)(n.h4,{id:"mysql-whole-database-synchronization",children:"MySQL Whole Database Synchronization"}),(0,r.jsx)(n.p,{children:"After starting the Flink cluster, you can directly run the following command:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>bin/flink run \\\n    -Dexecution.checkpointing.interval=10s \\\n    -Dparallelism.default=1 \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    lib/flink-doris-connector-1.16-24.0.1.jar \\\n    mysql-sync-database \\\n    --database test_db \\\n    --mysql-conf hostname=127.0.0.1 \\\n    --mysql-conf port=3306 \\\n    --mysql-conf username=root \\\n    --mysql-conf password=123456 \\\n    --mysql-conf database-name=mysql_db \\\n    --including-tables "tbl1|test.*" \\\n    --sink-conf fenodes=127.0.0.1:8030 \\\n    --sink-conf username=root \\\n    --sink-conf password=123456 \\\n    --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n    --sink-conf sink.label-prefix=label \\\n    --table-conf replication_num=1 \n'})}),(0,r.jsx)(n.h4,{id:"oracle-whole-database-synchronization",children:"Oracle Whole Database Synchronization"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>bin/flink run \\\n     -Dexecution.checkpointing.interval=10s \\\n     -Dparallelism.default=1 \\\n     -c org.apache.doris.flink.tools.cdc.CdcTools \\\n     ./lib/flink-doris-connector-1.16-24.0.1.jar \\\n     oracle-sync-database \\\n     --database test_db \\\n     --oracle-conf hostname=127.0.0.1 \\\n     --oracle-conf port=1521 \\\n     --oracle-conf username=admin \\\n     --oracle-conf password="password" \\\n     --oracle-conf database-name=XE \\\n     --oracle-conf schema-name=ADMIN \\\n     --including-tables "tbl1|tbl2" \\\n     --sink-conf fenodes=127.0.0.1:8030 \\\n     --sink-conf username=root \\\n     --sink-conf password=\\\n     --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n     --sink-conf sink.label-prefix=label \\\n     --table-conf replication_num=1\n'})}),(0,r.jsx)(n.h4,{id:"postgresql-whole-database-synchronization",children:"PostgreSQL Whole Database Synchronization"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>/bin/flink run \\\n     -Dexecution.checkpointing.interval=10s \\\n     -Dparallelism.default=1\\\n     -c org.apache.doris.flink.tools.cdc.CdcTools \\\n     ./lib/flink-doris-connector-1.16-24.0.1.jar \\\n     postgres-sync-database \\\n     --database db1\\\n     --postgres-conf hostname=127.0.0.1 \\\n     --postgres-conf port=5432 \\\n     --postgres-conf username=postgres \\\n     --postgres-conf password="123456" \\\n     --postgres-conf database-name=postgres \\\n     --postgres-conf schema-name=public \\\n     --postgres-conf slot.name=test \\\n     --postgres-conf decoding.plugin.name=pgoutput \\\n     --including-tables "tbl1|tbl2" \\\n     --sink-conf fenodes=127.0.0.1:8030 \\\n     --sink-conf username=root \\\n     --sink-conf password=\\\n     --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n     --sink-conf sink.label-prefix=label \\\n     --table-conf replication_num=1\n'})}),(0,r.jsx)(n.h4,{id:"sqlserver-whole-database-synchronization",children:"SQLServer Whole Database Synchronization"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>/bin/flink run \\\n     -Dexecution.checkpointing.interval=10s \\\n     -Dparallelism.default=1 \\\n     -c org.apache.doris.flink.tools.cdc.CdcTools \\\n     ./lib/flink-doris-connector-1.16-24.0.1.jar \\\n     sqlserver-sync-database \\\n     --database db1\\\n     --sqlserver-conf hostname=127.0.0.1 \\\n     --sqlserver-conf port=1433 \\\n     --sqlserver-conf username=sa \\\n     --sqlserver-conf password="123456" \\\n     --sqlserver-conf database-name=CDC_DB \\\n     --sqlserver-conf schema-name=dbo \\\n     --including-tables "tbl1|tbl2" \\\n     --sink-conf fenodes=127.0.0.1:8030 \\\n     --sink-conf username=root \\\n     --sink-conf password=\\\n     --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n     --sink-conf sink.label-prefix=label \\\n     --table-conf replication_num=1\n'})}),(0,r.jsx)(n.h4,{id:"db2-whole-database-synchronization",children:"DB2 Whole Database Synchronization"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>bin/flink run \\\n    -Dexecution.checkpointing.interval=10s \\\n    -Dparallelism.default=1 \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    lib/flink-doris-connector-1.16-24.0.1.jar \\\n    db2-sync-database \\\n    --database db2_test \\\n    --db2-conf hostname=127.0.0.1 \\\n    --db2-conf port=50000 \\\n    --db2-conf username=db2inst1 \\\n    --db2-conf password=doris123456 \\\n    --db2-conf database-name=testdb \\\n    --db2-conf schema-name=DB2INST1 \\\n    --including-tables "FULL_TYPES|CUSTOMERS" \\\n    --single-sink true \\\n    --use-new-schema-change true \\\n    --sink-conf fenodes=127.0.0.1:8030 \\\n    --sink-conf username=root \\\n    --sink-conf password=123456 \\\n    --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n    --sink-conf sink.label-prefix=label \\\n    --table-conf replication_num=1 \n'})}),(0,r.jsx)(n.h4,{id:"mongodb-whole-database-synchronization",children:"MongoDB Whole Database Synchronization"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>/bin/flink run \\\n    -Dexecution.checkpointing.interval=10s \\\n    -Dparallelism.default=1 \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    ./lib/flink-doris-connector-1.18-24.0.1.jar \\\n    mongodb-sync-database \\\n    --database doris_db \\\n    --schema-change-mode debezium_structure \\\n    --mongodb-conf hosts=127.0.0.1:27017 \\\n    --mongodb-conf username=flinkuser \\\n    --mongodb-conf password=flinkpwd \\\n    --mongodb-conf database=test \\\n    --mongodb-conf scan.startup.mode=initial \\\n    --mongodb-conf schema.sample-percent=0.2 \\\n    --including-tables "tbl1|tbl2" \\\n    --sink-conf fenodes=127.0.0.1:8030 \\\n    --sink-conf username=root \\\n    --sink-conf password= \\\n    --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n    --sink-conf sink.label-prefix=label \\\n    --sink-conf sink.enable-2pc=false \\\n    --table-conf replication_num=1\n'})}),(0,r.jsx)(n.h4,{id:"aws-aurora-mysql-whole-database-synchronization",children:"AWS Aurora MySQL Whole Database Synchronization"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>bin/flink run \\\n    -Dexecution.checkpointing.interval=10s \\\n    -Dparallelism.default=1 \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    lib/flink-doris-connector-1.18-25.0.0.jar \\\n    mysql-sync-database \\\n    --database testwd \\\n    --mysql-conf hostname=xxx.us-east-1.rds.amazonaws.com \\\n    --mysql-conf port=3306 \\\n    --mysql-conf username=admin \\\n    --mysql-conf password=123456 \\\n    --mysql-conf database-name=test \\\n    --mysql-conf server-time-zone=UTC \\\n    --including-tables "student" \\\n    --sink-conf fenodes=127.0.0.1:8030 \\\n    --sink-conf username=root \\\n    --sink-conf password= \\\n    --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n    --sink-conf sink.label-prefix=label \\\n    --table-conf replication_num=1 \n'})}),(0,r.jsx)(n.h4,{id:"aws-rds-mysql-whole-database-synchronization",children:"AWS RDS MySQL Whole Database Synchronization"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:'<FLINK_HOME>bin/flink run \\\n    -Dexecution.checkpointing.interval=10s \\\n    -Dparallelism.default=1 \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    lib/flink-doris-connector-1.18-25.0.0.jar \\\n    mysql-sync-database \\\n    --database testwd \\\n    --mysql-conf hostname=xxx.ap-southeast-1.rds.amazonaws.com \\\n    --mysql-conf port=3306 \\\n    --mysql-conf username=admin \\\n    --mysql-conf password=123456 \\\n    --mysql-conf database-name=test \\\n    --mysql-conf server-time-zone=UTC \\\n    --including-tables "student" \\\n    --sink-conf fenodes=127.0.0.1:8030 \\\n    --sink-conf username=root \\\n    --sink-conf password= \\\n    --sink-conf jdbc-url=jdbc:mysql://127.0.0.1:9030 \\\n    --sink-conf sink.label-prefix=label \\\n    --table-conf replication_num=1 \n'})}),(0,r.jsx)(n.h2,{id:"usage-instructions",children:"Usage Instructions"}),(0,r.jsx)(n.h3,{id:"parameter-configuration",children:"Parameter Configuration"}),(0,r.jsx)(n.h4,{id:"general-configuration-items",children:"General Configuration Items"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"fenodes"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"Doris FE http addresses. Multiple addresses are supported and should be separated by commas."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"benodes"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"Doris BE http addresses. Multiple addresses are supported and should be separated by commas."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"jdbc-url"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"JDBC connection information, such as jdbc:mysql://127.0.0.1:9030."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"table.identifier"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"Doris table name, such as db.tbl."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"username"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"Username for accessing Doris."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"password"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"Password for accessing Doris."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"auto-redirect"}),(0,r.jsx)(n.td,{children:"TRUE"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"Whether to redirect StreamLoad requests. After enabling, StreamLoad will write through FE and will no longer explicitly obtain BE information."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.request.retries"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The number of retries for sending requests to Doris."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.request.connect.timeout"}),(0,r.jsx)(n.td,{children:"30s"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The connection timeout for sending requests to Doris."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.request.read.timeout"}),(0,r.jsx)(n.td,{children:"30s"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The read timeout for sending requests to Doris."})]})]})]}),(0,r.jsx)(n.h4,{id:"source-configuration",children:"Source Configuration"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.request.query.timeout"}),(0,r.jsx)(n.td,{children:"21600s"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The timeout for querying Doris. The default value is 6 hours."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.request.tablet.size"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The number of Doris Tablets corresponding to one Partition. The smaller this value is set, the more Partitions will be generated, which can increase the parallelism on the Flink side. However, it will also put more pressure on Doris."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.batch.size"}),(0,r.jsx)(n.td,{children:"4064"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The maximum number of rows read from BE at one time. Increasing this value can reduce the number of connections established between Flink and Doris, thereby reducing the additional time overhead caused by network latency."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.exec.mem.limit"}),(0,r.jsx)(n.td,{children:"8192mb"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The memory limit for a single query. The default is 8GB, in bytes."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"source.use-flight-sql"}),(0,r.jsx)(n.td,{children:"FALSE"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"Whether to use Arrow Flight SQL for reading."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"source.flight-sql-port"}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The arrow_flight_sql_port of FE when using Arrow Flight SQL for reading."})]})]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"DataStream-Specific Configuration"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.read.field"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The list of column names for reading Doris tables. Multiple columns should be separated by commas."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"doris.filter.query"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The expression for filtering read data. This expression is passed to Doris. Doris uses this expression to complete source data filtering. For example, age=18."})]})]})]}),(0,r.jsx)(n.h4,{id:"sink-configuration",children:"Sink Configuration"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.label-prefix"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"The label prefix used for Stream load import. In the 2pc scenario, it is required to be globally unique to ensure the EOS semantics of Flink."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.properties.*"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsxs)(n.td,{children:["Import parameters for Stream Load. For example, 'sink.properties.column_separator' = ', ' defines the column separator, and 'sink.properties.escape_delimiters' = 'true' means that special characters as delimiters, like \\x01, will be converted to binary 0x01. For JSON format import, 'sink.properties.format' = 'json', 'sink.properties.read_json_by_line' = 'true'. For detailed parameters, refer to ",(0,r.jsx)(n.a,{href:"/docs/dev/data-operate/import/import-way/stream-load-manual#load-configuration-parameters",children:"here"}),". For Group Commit mode, for example, 'sink.properties.group_commit' = 'sync_mode' sets the group commit to synchronous mode. The Flink connector has supported import configuration group commit since version 1.6.2. For detailed usage and limitations, refer to ",(0,r.jsx)(n.a,{href:"/docs/dev/data-operate/import/group-commit-manual",children:"group commit"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.enable-delete"}),(0,r.jsx)(n.td,{children:"TRUE"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"Whether to enable deletion. This option requires the Doris table to have the batch deletion feature enabled (enabled by default in Doris 0.15+ versions), and only supports the Unique model."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.enable-2pc"}),(0,r.jsx)(n.td,{children:"TRUE"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsxs)(n.td,{children:["Whether to enable two-phase commit (2pc). The default is true, ensuring Exactly-Once semantics. For details about two-phase commit, refer to ",(0,r.jsx)(n.a,{href:"/docs/dev/data-operate/transaction#streamload-2pc",children:"here"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.buffer-size"}),(0,r.jsx)(n.td,{children:"1MB"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The size of the write data cache buffer, in bytes. It is not recommended to modify it, and the default configuration can be used."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.buffer-count"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The number of write data cache buffers. It is not recommended to modify it, and the default configuration can be used."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.max-retries"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The maximum number of retries after a Commit failure. The default is 3 times."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.enable.batch-mode"}),(0,r.jsx)(n.td,{children:"FALSE"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"Whether to use the batch mode to write to Doris. After enabling, the writing timing does not rely on Checkpoint, and it is controlled by parameters such as sink.buffer-flush.max-rows, sink.buffer-flush.max-bytes, and sink.buffer-flush.interval. Meanwhile, after enabling, Exactly-once semantics will not be guaranteed, but idempotency can be achieved with the help of the Uniq model."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.flush.queue-size"}),(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The size of the cache queue in batch mode."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.buffer-flush.max-rows"}),(0,r.jsx)(n.td,{children:"500000"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The maximum number of rows written in a single batch in batch mode."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.buffer-flush.max-bytes"}),(0,r.jsx)(n.td,{children:"100MB"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The maximum number of bytes written in a single batch in batch mode."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.buffer-flush.interval"}),(0,r.jsx)(n.td,{children:"10s"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The interval for asynchronously flushing the cache in batch mode."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sink.ignore.update-before"}),(0,r.jsx)(n.td,{children:"TRUE"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"Whether to ignore the update-before event. The default is to ignore it."})]})]})]}),(0,r.jsx)(n.h4,{id:"lookup-join-configuration",children:"Lookup Join Configuration"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lookup.cache.max-rows"}),(0,r.jsx)(n.td,{children:"-1"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The maximum number of rows in the lookup cache. The default value is -1, which means the cache is not enabled."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lookup.cache.ttl"}),(0,r.jsx)(n.td,{children:"10s"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The maximum time for the lookup cache. The default is 10 seconds."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lookup.max-retries"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The number of retries after a lookup query fails."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lookup.jdbc.async"}),(0,r.jsx)(n.td,{children:"FALSE"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"Whether to enable asynchronous lookup. The default is false."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lookup.jdbc.read.batch.size"}),(0,r.jsx)(n.td,{children:"128"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The maximum batch size for each query in asynchronous lookup."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lookup.jdbc.read.batch.queue-size"}),(0,r.jsx)(n.td,{children:"256"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The size of the intermediate buffer queue during asynchronous lookup."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lookup.jdbc.read.thread-size"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"N"}),(0,r.jsx)(n.td,{children:"The number of jdbc threads for lookup in each task."})]})]})]}),(0,r.jsx)(n.h4,{id:"full-database-synchronization-configuration",children:"Full Database Synchronization Configuration"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Shell",children:"<FLINK_HOME>bin/flink run \\\n    -c org.apache.doris.flink.tools.cdc.CdcTools \\\n    lib/flink-doris-connector-1.16-1.6.1.jar \\\n    <mysql-sync-database|oracle-sync-database|postgres-sync-database|sqlserver-sync-database|mongodb-sync-database> \\\n    --database <doris-database-name> \\\n    [--job-name <flink-job-name>] \\\n    [--table-prefix <doris-table-prefix>] \\\n    [--table-suffix <doris-table-suffix>] \\\n    [--including-tables <mysql-table-name|name-regular-expr>] \\\n    [--excluding-tables <mysql-table-name|name-regular-expr>] \\\n    --mysql-conf <mysql-cdc-source-conf> [--mysql-conf <mysql-cdc-source-conf> ...] \\\n    --oracle-conf <oracle-cdc-source-conf> [--oracle-conf <oracle-cdc-source-conf> ...] \\\n    --postgres-conf <postgres-cdc-source-conf> [--postgres-conf <postgres-cdc-source-conf> ...] \\\n    --sqlserver-conf <sqlserver-cdc-source-conf> [--sqlserver-conf <sqlserver-cdc-source-conf> ...] \\\n    --sink-conf <doris-sink-conf> [--table-conf <doris-sink-conf> ...] \\\n    [--table-conf <doris-table-conf> [--table-conf <doris-table-conf> ...]]\n"})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Comment"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--job-name"}),(0,r.jsx)(n.td,{children:"The name of the Flink task, which is optional."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--database"}),(0,r.jsx)(n.td,{children:"The name of the database synchronized to Doris."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--table-prefix"}),(0,r.jsx)(n.td,{children:"The prefix name of the Doris table, for example, --table-prefix ods_."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--table-suffix"}),(0,r.jsx)(n.td,{children:"The suffix name of the Doris table, similar to the prefix."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--including-tables"}),(0,r.jsx)(n.td,{children:"The MySQL tables that need to be synchronized. Multiple tables can be separated by |, and regular expressions are supported. For example, --including-tables table1."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--excluding-tables"}),(0,r.jsx)(n.td,{children:"The tables that do not need to be synchronized. The usage is the same as that of --including-tables."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--mysql-conf"}),(0,r.jsxs)(n.td,{children:["The configuration of the MySQL CDCSource, for example, --mysql-conf hostname=127.0.0.1. You can view all the configurations of MySQL-CDC ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/docs/connectors/flink-sources/mysql-cdc/",children:"here"}),". Among them, hostname, username, password, and database-name are required. When the synchronized database and table contain non-primary key tables, scan.incremental.snapshot.chunk.key-column must be set, and only one non-null type field can be selected. For example: scan.incremental.snapshot.chunk.key-column=database.table:column,database.table1:column..., and columns of different databases and tables are separated by commas."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--oracle-conf"}),(0,r.jsxs)(n.td,{children:["The configuration of the Oracle CDCSource, for example, --oracle-conf hostname=127.0.0.1. You can view all the configurations of Oracle-CDC ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/docs/connectors/flink-sources/oracle-cdc/",children:"here"}),". Among them, hostname, username, password, database-name, and schema-name are required."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--postgres-conf"}),(0,r.jsxs)(n.td,{children:["The configuration of the Postgres CDCSource, for example, --postgres-conf hostname=127.0.0.1. You can view all the configurations of Postgres-CDC ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/docs/connectors/flink-sources/postgres-cdc/",children:"here"}),". Among them, hostname, username, password, database-name, schema-name, and slot.name are required."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--sqlserver-conf"}),(0,r.jsxs)(n.td,{children:["The configuration of the SQLServer CDCSource, for example, --sqlserver-conf hostname=127.0.0.1. You can view all the configurations of SQLServer-CDC ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/docs/connectors/flink-sources/sqlserver-cdc/",children:"here"}),". Among them, hostname, username, password, database-name, and schema-name are required."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--db2-conf"}),(0,r.jsxs)(n.td,{children:["The configuration of the SQLServer CDCSource, for example, --db2-conf hostname=127.0.0.1. You can view all the configurations of DB2-CDC ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/docs/connectors/flink-sources/db2-cdc/",children:"here"}),". Among them, hostname, username, password, database-name, and schema-name are required."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--sink-conf"}),(0,r.jsxs)(n.td,{children:["All the configurations of the Doris Sink can be viewed ",(0,r.jsx)(n.a,{href:"/docs/dev/ecosystem/flink-doris-connector#general-configuration-items",children:"here"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--mongodb-conf"}),(0,r.jsxs)(n.td,{children:["The configuration of the MongoDB CDCSource, for example, --mongodb-conf hosts=127.0.0.1:27017. You can view all the configurations of Mongo-CDC ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/docs/connectors/flink-sources/mongodb-cdc/",children:"here"}),". Among them, hosts, username, password, and database are required. --mongodb-conf schema.sample-percent is the configuration for automatically sampling MongoDB data to create tables in Doris, and the default value is 0.2."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--table-conf"}),(0,r.jsxs)(n.td,{children:['The configuration items of the Doris table, that is, the content included in properties (except for table-buckets, which is not a properties attribute). For example, --table-conf replication_num=1, and --table-conf table-buckets="tbl1:10,tbl2:20,a.',(0,r.jsx)(n.em,{children:":30,b."}),':40,.*:50" means specifying the number of buckets for different tables in the order of regular expressions. If there is no match, the BUCKETS AUTO method will be used to create tables.']})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--schema-change-mode"}),(0,r.jsx)(n.td,{children:"The modes for parsing schema change, including debezium_structure and sql_parser. The debezium_structure mode is used by default. The debezium_structure mode parses the data structure used when the upstream CDC synchronizes data and judges DDL change operations by parsing this structure. The sql_parser mode parses the DDL statements when the upstream CDC synchronizes data to judge DDL change operations, so this parsing mode is more accurate. Usage example: --schema-change-mode debezium_structure. This function will be available in versions after 24.0.0."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--single-sink"}),(0,r.jsx)(n.td,{children:"Whether to use a single Sink to synchronize all tables. After enabling, it can also automatically identify newly created tables upstream and create tables automatically."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--multi-to-one-origin"}),(0,r.jsxs)(n.td,{children:['The configuration of the source tables when multiple upstream tables are written to the same table, for example: --multi-to-one-origin "a_.*|b_.*", refer to ',(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/pull/208",children:"#208"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--multi-to-one-target"}),(0,r.jsx)(n.td,{children:'Used in combination with multi-to-one-origin, the configuration of the target table, for example: --multi-to-one-target "a|b"'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--create-table-only"}),(0,r.jsx)(n.td,{children:"Whether to only synchronize the structure of the table."})]})]})]}),(0,r.jsx)(n.h3,{id:"type-mapping",children:"Type Mapping"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Doris Type"}),(0,r.jsx)(n.th,{children:"Flink Type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NULL_TYPE"}),(0,r.jsx)(n.td,{children:"NULL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BOOLEAN"}),(0,r.jsx)(n.td,{children:"BOOLEAN"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TINYINT"}),(0,r.jsx)(n.td,{children:"TINYINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{children:"INT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BIGINT"}),(0,r.jsx)(n.td,{children:"BIGINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{children:"FLOAT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DOUBLE"}),(0,r.jsx)(n.td,{children:"DOUBLE"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DATE"}),(0,r.jsx)(n.td,{children:"DATE"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DATETIME"}),(0,r.jsx)(n.td,{children:"TIMESTAMP"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMAL"}),(0,r.jsx)(n.td,{children:"DECIMAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CHAR"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LARGEINT"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARCHAR"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"STRING"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMALV2"}),(0,r.jsx)(n.td,{children:"DECIMAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ARRAY"}),(0,r.jsx)(n.td,{children:"ARRAY"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"MAP"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"JSON"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARIANT"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"IPV4"}),(0,r.jsx)(n.td,{children:"STRING"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"IPV6"}),(0,r.jsx)(n.td,{children:"STRING"})]})]})]}),(0,r.jsx)(n.h3,{id:"monitoring-metrics",children:"Monitoring Metrics"}),(0,r.jsxs)(n.p,{children:["Flink provides multiple ",(0,r.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-master/docs/ops/metrics/#metrics",children:"Metrics"})," for monitoring the indicators of the Flink cluster. The following are the newly added monitoring metrics for the Flink Doris Connector."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Metric Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"totalFlushLoadBytes"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The total number of bytes that have been flushed and imported."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"flushTotalNumberRows"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The total number of rows that have been imported and processed."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"totalFlushLoadedRows"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The total number of rows that have been successfully imported."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"totalFlushTimeMs"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The total time taken for successful imports to complete."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"totalFlushSucceededNumber"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The number of times that imports have been successfully completed."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"totalFlushFailedNumber"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The number of times that imports have failed."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"totalFlushFilteredRows"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The total number of rows with unqualified data quality."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"totalFlushUnselectedRows"}),(0,r.jsx)(n.td,{children:"Counter"}),(0,r.jsx)(n.td,{children:"The total number of rows filtered by the where condition."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"beginTxnTimeMs"}),(0,r.jsx)(n.td,{children:"Histogram"}),(0,r.jsx)(n.td,{children:"The time taken to request the Fe to start a transaction, in milliseconds."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"putDataTimeMs"}),(0,r.jsx)(n.td,{children:"Histogram"}),(0,r.jsx)(n.td,{children:"The time taken to request the Fe to obtain the import data execution plan."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"readDataTimeMs"}),(0,r.jsx)(n.td,{children:"Histogram"}),(0,r.jsx)(n.td,{children:"The time taken to read data."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"writeDataTimeMs"}),(0,r.jsx)(n.td,{children:"Histogram"}),(0,r.jsx)(n.td,{children:"The time taken to execute the write data operation."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"commitAndPublishTimeMs"}),(0,r.jsx)(n.td,{children:"Histogram"}),(0,r.jsx)(n.td,{children:"The time taken to request the Fe to commit and publish the transaction."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"loadTimeMs"}),(0,r.jsx)(n.td,{children:"Histogram"}),(0,r.jsx)(n.td,{children:"The time taken for the import to complete."})]})]})]}),(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),(0,r.jsx)(n.h3,{id:"flinksql-quickly-connects-to-mysql-data-via-cdc",children:"FlinkSQL Quickly Connects to MySQL Data via CDC"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"-- enable checkpoint\nSET 'execution.checkpointing.interval' = '10s';\n\nCREATE TABLE cdc_mysql_source (\n  id int\n  ,name VARCHAR\n  ,PRIMARY KEY (id) NOT ENFORCED\n) WITH (\n 'connector' = 'mysql-cdc',\n 'hostname' = '127.0.0.1',\n 'port' = '3306',\n 'username' = 'root',\n 'password' = 'password',\n 'database-name' = 'database',\n 'table-name' = 'table'\n);\n\n-- Supports synchronizing insert/update/delete events\nCREATE TABLE doris_sink (\nid INT,\nname STRING\n) \nWITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'table.identifier' = 'database.table',\n  'username' = 'root',\n  'password' = '',\n  'sink.properties.format' = 'json',\n  'sink.properties.read_json_by_line' = 'true',\n  'sink.enable-delete' = 'true',  -- Synchronize delete events\n  'sink.label-prefix' = 'doris_label'\n);\n\ninsert into doris_sink select id,name from cdc_mysql_source;\n"})}),(0,r.jsx)(n.h3,{id:"flink-performs-partial-column-updates",children:"Flink Performs Partial Column Updates"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"CREATE TABLE doris_sink (\n    id INT,\n    name STRING,\n    bank STRING,\n    age int\n) \nWITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'table.identifier' = 'database.table',\n  'username' = 'root',\n  'password' = '',\n  'sink.properties.format' = 'json',\n  'sink.properties.read_json_by_line' = 'true',\n  'sink.properties.columns' = 'id,name,bank,age', -- Columns that need to be updated\n  'sink.properties.partial_columns' = 'true' -- Enable partial column updates\n);\n"})}),(0,r.jsx)(n.h3,{id:"flink-imports-bitmap-data",children:"Flink Imports Bitmap Data"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"CREATE TABLE bitmap_sink (\ndt int,\npage string,\nuser_id int \n)\nWITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'table.identifier' = 'test.bitmap_test',\n  'username' = 'root',\n  'password' = '',\n  'sink.label-prefix' = 'doris_label',\n  'sink.properties.columns' = 'dt,page,user_id,user_id=to_bitmap(user_id)'\n)\n"})}),(0,r.jsx)(n.h3,{id:"flinkcdc-updates-key-columns",children:"FlinkCDC Updates Key Columns"}),(0,r.jsx)(n.p,{children:"Generally, in a business database, a number is often used as the primary key of a table. For example, for the Student table, the number (id) is used as the primary key. However, as the business develops, the number corresponding to the data may change. In this scenario, when using Flink CDC + Doris Connector to synchronize data, the data of the primary key column in Doris can be automatically updated."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Principle"})}),(0,r.jsx)(n.p,{children:"The underlying collection tool of Flink CDC is Debezium. Debezium internally uses the op field to identify corresponding operations. The values of the op field are c, u, d, and r, corresponding to create, update, delete, and read respectively. For the update of the primary key column, Flink CDC will send DELETE and INSERT events downstream, and the data of the primary key column in Doris will be automatically updated after the data is synchronized to Doris."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage"})}),(0,r.jsx)(n.p,{children:"The Flink program can refer to the above CDC synchronization examples. After successfully submitting the task, execute the statement to update the primary key column on the MySQL side (for example, update student set id = '1002' where id = '1001'), and then the data in Doris can be modified."}),(0,r.jsx)(n.h3,{id:"flink-deletes-data-according-to-specified-columns",children:"Flink Deletes Data According to Specified Columns"}),(0,r.jsx)(n.p,{children:'Generally, messages in Kafka use specific fields to mark the operation type, such as {"op_type":"delete",data:{...}}. For this kind of data, it is hoped to delete the data with op_type=delete.'}),(0,r.jsxs)(n.p,{children:["The DorisSink will, by default, distinguish the types of events according to RowKind. Usually, in the case of CDC, the event type can be directly obtained, and the hidden column ",(0,r.jsx)(n.code,{children:"__DORIS_DELETE_SIGN__"})," can be assigned a value to achieve the purpose of deletion. However, for Kafka, it is necessary to judge according to the business logic and explicitly pass in the value of the hidden column."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-SQL",children:"-- For example, the upstream data:{\"op_type\":\"delete\",data:{\"id\":1,\"name\":\"zhangsan\"}}\nCREATE TABLE KAFKA_SOURCE(\n  data STRING,\n  op_type STRING\n) WITH (\n  'connector' = 'kafka',\n  ...\n);\n\nCREATE TABLE DORIS_SINK(\n  id INT,\n  name STRING,\n  __DORIS_DELETE_SIGN__ INT\n) WITH (\n  'connector' = 'doris',\n  'fenodes' = '127.0.0.1:8030',\n  'table.identifier' = 'db.table',\n  'username' = 'root',\n  'password' = '',\n  'sink.enable-delete' = 'false',        -- false means not to obtain the event type from RowKind\n  'sink.properties.columns' = 'id, name, __DORIS_DELETE_SIGN__'  -- Explicitly specify the import columns of streamload\n);\n\nINSERT INTO DORIS_SINK\nSELECT json_value(data,'$.id') as id,\njson_value(data,'$.name') as name, \nif(op_type='delete',1,0) as __DORIS_DELETE_SIGN__ \nfrom KAFKA_SOURCE;\n"})}),(0,r.jsx)(n.h3,{id:"flink-cdc-synchronize-ddl-statements",children:"Flink CDC Synchronize DDL Statements"}),(0,r.jsx)(n.p,{children:"Generally, when synchronizing upstream data sources such as MySQL, when adding or deleting fields in the upstream, you need to synchronize the Schema Change operation in Doris."}),(0,r.jsxs)(n.p,{children:["For this scenario, you usually need to write a program for the DataStream API and use the JsonDebeziumSchemaSerializer serializer provided by DorisSink to automatically perform SchemaChange. For details, please refer to ",(0,r.jsx)(n.a,{href:"https://github.com/apache/doris-flink-connector/blob/master/flink-doris-connector/src/test/java/org/apache/doris/flink/example/CDCSchemaChangeExample.java",children:"CDCSchemaChangeExample.java"})]}),(0,r.jsx)(n.p,{children:"In the whole database synchronization tool provided by the Connector, no additional configuration is required, and the upstream DDL will be automatically synchronized and the SchemaChange operation will be performed in Doris."}),(0,r.jsx)(n.h2,{id:"frequently-asked-questions-faq",children:"Frequently Asked Questions (FAQ)"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"errCode = 2, detailMessage = Label [label_0_1] has already been used, relate to txn [19650]"})}),"\n",(0,r.jsx)(n.p,{children:"In the Exactly-Once scenario, the Flink Job must be restarted from the latest Checkpoint/Savepoint, otherwise the above error will be reported. When Exactly-Once is not required, this problem can also be solved by disabling 2PC submission (sink.enable-2pc=false) or changing to a different sink.label-prefix."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"errCode = 2, detailMessage = transaction [19650] not found"})}),"\n",(0,r.jsxs)(n.p,{children:["This occurs during the Commit stage. The transaction ID recorded in the checkpoint has expired on the FE side. When committing again at this time, the above error will occur. At this point, it's impossible to start from the checkpoint. Subsequently, you can extend the expiration time by modifying the ",(0,r.jsx)(n.code,{children:"streaming_label_keep_max_second"})," configuration in ",(0,r.jsx)(n.code,{children:"fe.conf"}),". The default expiration time is 12 hours. After doris version 2.0, it will also be limited by the ",(0,r.jsx)(n.code,{children:"label_num_threshold"})," configuration in ",(0,r.jsx)(n.code,{children:"fe.conf"})," (default 2000), which can be increased or changed to -1 (-1 means only limited by time)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"errCode = 2, detailMessage = current running txns on db 10006 is 100, larger than limit 100"})}),"\n",(0,r.jsxs)(n.p,{children:["This is because the concurrent imports into the same database exceed 100. It can be solved by adjusting the parameter ",(0,r.jsx)(n.code,{children:"max_running_txn_num_per_db"})," in ",(0,r.jsx)(n.code,{children:"fe.conf"}),". For specific details, please refer to ",(0,r.jsx)(n.a,{href:"../admin-manual/config/fe-config#max_running_txn_num_per_db",children:"max_running_txn_num_per_db"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Meanwhile, frequently modifying the label and restarting a task may also lead to this error. In the 2pc scenario (for Duplicate/Aggregate models), the label of each task needs to be unique. And when restarting from a checkpoint, the Flink task will actively abort the transactions that have been pre-committed successfully but not yet committed. Frequent label modifications and restarts will result in a large number of pre-committed successful transactions that cannot be aborted and thus occupy transactions. In the Unique model, 2pc can also be disabled to achieve idempotent writes."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"tablet writer write failed, tablet_id=190958, txn_id=3505530, err=-235"})}),"\n",(0,r.jsxs)(n.p,{children:["This usually occurs before Connector version 1.1.0 and is caused by too high a writing frequency, which leads to an excessive number of versions. You can reduce the frequency of Streamload by setting the ",(0,r.jsx)(n.code,{children:"sink.batch.size"})," and ",(0,r.jsx)(n.code,{children:"sink.batch.interval"})," parameters. After Connector version 1.1.0, the default writing timing is controlled by Checkpoint, and you can reduce the writing frequency by increasing the Checkpoint interval."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How to skip dirty data when Flink is importing?"})}),"\n",(0,r.jsxs)(n.p,{children:["When Flink imports data, if there is dirty data, such as issues with field formats or lengths, it will cause StreamLoad to report errors. At this time, Flink will keep retrying. If you need to skip such data, you can disable the strict mode of StreamLoad (by setting ",(0,r.jsx)(n.code,{children:"strict_mode=false"})," and ",(0,r.jsx)(n.code,{children:"max_filter_ratio=1"}),") or filter the data before the Sink operator."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How to configure when the network between Flink machines and BE machines is not connected?"})}),"\n",(0,r.jsxs)(n.p,{children:["When Flink initiates writing to Doris, Doris will redirect the write operation to BE. At this time, the returned address is the internal network IP of BE, which is the IP seen through the ",(0,r.jsx)(n.code,{children:"show backends"})," command. If Flink and Doris have no network connectivity at this time, an error will be reported. In this case, you can configure the external network IP of BE in ",(0,r.jsx)(n.code,{children:"benodes"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"stream load error: HTTP/1.1 307 Temporary Redirect"})}),"\n",(0,r.jsx)(n.p,{children:"Flink will first request FE, and after receiving 307, it will request BE after redirection. When FE is in FullGC/high pressure/network delay, HttpClient will send data without waiting for a response within a certain period of time (3 seconds) by default. Since the request body is InputStream by default, when a 307 response is received, the data cannot be replayed and an error will be reported directly. There are three ways to solve this problem: 1. Upgrade to Connector25.1.0 or above to increase the default time; 2. Modify auto-redirect=false to directly initiate a request to BE (not applicable to some cloud scenarios); 3. The unique key model can enable batch mode."}),"\n"]}),"\n"]})]})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},923422:function(e,n,s){s.d(n,{Z:function(){return i}});let i=s.p+"assets/images/FlinkConnectorPrinciples-JDBC-Doris-7726ceb2bfe36b6d1b4e0446381d0e83.png"},250065:function(e,n,s){s.d(n,{Z:function(){return o},a:function(){return a}});var i=s(667294);let r={},t=i.createContext(r);function a(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);