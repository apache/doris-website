"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["924379"],{813001:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>i,metadata:()=>t,assets:()=>c,toc:()=>o,contentTitle:()=>l});var t=JSON.parse('{"id":"sql-manual/sql-functions/table-valued-functions/s3","title":"S3","description":"Description","source":"@site/docs/sql-manual/sql-functions/table-valued-functions/s3.md","sourceDirName":"sql-manual/sql-functions/table-valued-functions","slug":"/sql-manual/sql-functions/table-valued-functions/s3","permalink":"/docs/dev/sql-manual/sql-functions/table-valued-functions/s3","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"S3","language":"en"},"sidebar":"docs","previous":{"title":"QUERY","permalink":"/docs/dev/sql-manual/sql-functions/table-valued-functions/query"},"next":{"title":"TASKS","permalink":"/docs/dev/sql-manual/sql-functions/table-valued-functions/tasks"}}'),r=s("785893"),a=s("250065");let i={title:"S3",language:"en"},l=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Required parameters",id:"required-parameters",level:2},{value:"Optional parameters",id:"optional-parameters",level:2},{value:"Notes",id:"notes",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["S3 table-valued-function (tvf) allows users to read and access file contents on S3-compatible object storage just like accessing relational table-formatted data. Currently supports ",(0,r.jsx)(n.code,{children:"csv/csv_with_names/csv_with_names_and_types/json/parquet/orc"})," file format."]}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'S3(\n    "uri" = "<uri>",\n    "s3.access_key" = "<s3_access_key>",\n    "s3.secret_key" = "<s3_secret_key>",\n    "s3.region" = "<s3_region>",\n    "s3.endpoint" = "<s3_endpoint>",\n    "format" = "<format>"\n    [, "<optional_property_key>" = "<optional_property_value>" [, ...] ]\n  )\n'})}),"\n",(0,r.jsx)(n.h2,{id:"required-parameters",children:"Required parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"uri"}),(0,r.jsxs)(n.td,{children:["The URI for accessing S3. The function will decide whether to use Path Style or Virtual-hosted Style based on the ",(0,r.jsx)(n.code,{children:"use_path_style"})," parameter."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"s3.access_key"}),(0,r.jsx)(n.td,{children:"The access key for accessing S3."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"s3.secret_key"}),(0,r.jsx)(n.td,{children:"The secret key for accessing S3."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"s3.region"}),(0,r.jsx)(n.td,{children:"The region where the S3 storage is located."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"s3.endpoint"}),(0,r.jsx)(n.td,{children:"The endpoint address of the S3 storage."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"format"}),(0,r.jsxs)(n.td,{children:["The file format, supports ",(0,r.jsx)(n.code,{children:"csv/csv_with_names/csv_with_names_and_types/json/parquet/orc"}),"."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"optional-parameters",children:"Optional parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Remarks"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"s3.session_token"}),(0,r.jsx)(n.td,{children:"S3 session token"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"use_path_style"}),(0,r.jsxs)(n.td,{children:["Default is ",(0,r.jsx)(n.code,{children:"false"}),". The S3 SDK uses Virtual-hosted Style by default. However, some object storage systems may not support Virtual-hosted Style. In such cases, the ",(0,r.jsx)(n.code,{children:"use_path_style"})," parameter can be added to force the use of Path Style. For example, MinIO only allows Path Style by default, so you need to add ",(0,r.jsx)(n.code,{children:"use_path_style=true"})," when accessing MinIO."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"force_parsing_by_standard_uri"}),(0,r.jsxs)(n.td,{children:["Default is ",(0,r.jsx)(n.code,{children:"false"}),". Forces the parsing of non-standard URIs into standard URIs."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"column_separator"}),(0,r.jsxs)(n.td,{children:["Column separator, default is ",(0,r.jsx)(n.code,{children:"\\t"}),"."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"line_delimiter"}),(0,r.jsxs)(n.td,{children:["Line separator, default is ",(0,r.jsx)(n.code,{children:"\\n"}),"."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"compress_type"}),(0,r.jsxs)(n.td,{children:["Currently UNKNOWN/PLAIN/GZ/LZO/BZ2/LZ4FRAME/DEFLATE/SNAPPYBLOCK is supported. The default value is UNKNOWN, the type will be automatically inferred based on the suffix of ",(0,r.jsx)(n.code,{children:"uri"})]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"read_json_by_line"}),(0,r.jsxs)(n.td,{children:["Default is ",(0,r.jsx)(n.code,{children:'"true"'}),", used for importing JSON format."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../data-operate/import/file-format/json",children:"JSON Load"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"strip_outer_array"}),(0,r.jsxs)(n.td,{children:["Default is ",(0,r.jsx)(n.code,{children:'"false"'}),", used for importing JSON format."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../data-operate/import/file-format/json",children:"JSON Load"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"json_root"}),(0,r.jsx)(n.td,{children:"Default is empty, used for importing JSON format."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../data-operate/import/file-format/json",children:"JSON Load"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"jsonpaths"}),(0,r.jsx)(n.td,{children:"Default is empty, used for importing JSON format."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../data-operate/import/file-format/json",children:"JSON Load"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"num_as_string"}),(0,r.jsxs)(n.td,{children:["Default is ",(0,r.jsx)(n.code,{children:"false"}),", used for importing JSON format."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"../../../data-operate/import/file-format/json",children:"JSON Load"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"fuzzy_parse"}),(0,r.jsxs)(n.td,{children:["Default is ",(0,r.jsx)(n.code,{children:"false"}),", used for importing JSON format."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"trim_double_quotes"}),(0,r.jsxs)(n.td,{children:["Default is ",(0,r.jsx)(n.code,{children:"false"}),", used for importing CSV format, trims the outer double quotes of each field."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"skip_lines"}),(0,r.jsxs)(n.td,{children:["Default is 0, indicating how many lines to skip at the beginning of the CSV file. This is invalid for ",(0,r.jsx)(n.code,{children:"csv_with_names"})," or ",(0,r.jsx)(n.code,{children:"csv_with_names_and_types"})," formats."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"path_partition_keys"}),(0,r.jsxs)(n.td,{children:["Specifies partition column names in the file path, e.g., ",(0,r.jsx)(n.code,{children:'/path/to/city=beijing/date="2023-07-09"'}),", then fill ",(0,r.jsx)(n.code,{children:'path_partition_keys="city,date"'}),", which will automatically read the corresponding column names and values from the path for import."]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"resource"}),(0,r.jsxs)(n.td,{children:["Specifies the Resource name. The S3 TVF can directly access S3 using an existing S3 Resource. To create an S3 Resource, refer to ",(0,r.jsx)(n.a,{href:"../../sql-statements/cluster-management/compute-management/CREATE-RESOURCE",children:"CREATE-RESOURCE"}),". This feature is supported starting from version 2.1.4."]}),(0,r.jsx)(n.td,{})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"For AWS S3, the standard URI styles are as follows:"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["AWS Client Style (Hadoop S3 Style): ",(0,r.jsx)(n.code,{children:"s3://my-bucket/path/to/file?versionId=abc123&partNumber=77&partNumber=88"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Virtual Host Style: ",(0,r.jsx)(n.code,{children:"https://my-bucket.s3.us-west-1.amazonaws.com/resources/doc.txt?versionId=abc123&partNumber=77&partNumber=88"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Path Style: ",(0,r.jsx)(n.code,{children:"https://s3.us-west-1.amazonaws.com/my-bucket/resources/doc.txt?versionId=abc123&partNumber=77&partNumber=88"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In addition to supporting the above three common standard URI styles, other URI styles (perhaps uncommon, but possible) are also supported:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Virtual Host AWS Client (Hadoop S3) Mixed Style:\n>> ",(0,r.jsx)(n.code,{children:"s3://my-bucket.s3.us-west-1.amazonaws.com/resources/doc.txt?versionId=abc123&partNumber=77&partNumber=88"})]}),"\n",(0,r.jsxs)(n.li,{children:["Path AWS Client (Hadoop S3) Mixed Style:\n>   > ",(0,r.jsx)(n.code,{children:"s3://s3.us-west-1.amazonaws.com/my-bucket/resources/doc.txt?versionId=abc123&partNumber=77&partNumber=88"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Detailed usage examples can be found in the following examples."}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"To directly query a TVF or create a View based on the TVF, you need to have the USAGE permission for that Resource. To query a View created based on the TVF, only the SELECT permission for that View is required."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Read and access CSV format files on S3-compatible object storage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3("uri" = "http://127.0.0.1:9312/test2/student1.csv",\n                "s3.access_key"= "minioadmin",\n                "s3.secret_key" = "minioadmin",\n                "s3.endpoint" = "http://127.0.0.1:9312",\n                "s3.region" = "us-east-1",\n                "format" = "csv",\n                "use_path_style" = "true") order by c1;\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Can be used with ",(0,r.jsx)(n.code,{children:"desc function"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'Desc function s3("uri" = "http://127.0.0.1:9312/test2/student1.csv",\n                 "s3.access_key"= "minioadmin",\n                 "s3.secret_key" = "minioadmin",\n                 "s3.endpoint" = "http://127.0.0.1:9312",\n                 "s3.region" = "us-east-1",\n                 "format" = "csv",\n                 "use_path_style" = "true");\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage of different uri schemas"})}),"\n",(0,r.jsx)(n.p,{children:"Example of http:// , https://"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Note how to write your bucket of URI and set the \'use_path_style\' parameter, as well as http://.\n-- Because of "use_path_style"="true", s3 will be accessed in \'path style\'.\nselect * from s3(\n    "URI" = "https://endpoint/bucket/file/student.csv",\n    "s3.access_key"= "ak",\n    "s3.secret_key" = "sk",\n    "s3.endpoint" = "endpoint",\n    "s3.region" = "region",\n    "format" = "csv",\n    "use_path_style"="true");\n\n-- Note how to write your bucket of URI and set the \'use_path_style\' parameter, as well as http://.\n-- Because of "use_path_style"="false", s3 will be accessed in \'virtual-hosted style\'.\nselect * from s3(\n    "URI" = "https://bucket.endpoint/file/student.csv",\n    "s3.access_key"= "ak",\n    "s3.secret_key" = "sk",\n    "s3.endpoint" = "endpoint",\n    "s3.region" = "region",\n    "format" = "csv",\n    "use_path_style"="false");    \n   \n-- The OSS on Alibaba Cloud and The COS on Tencent Cloud will use \'virtual-hosted style\' to access s3.\n-- OSS\nselect * from s3(\n    "URI" = "http://example-bucket.oss-cn-beijing.aliyuncs.com/your-folder/file.parquet",\n    "s3.access_key" = "ak",\n    "s3.secret_key" = "sk",\n    "s3.endpoint" = "oss-cn-beijing.aliyuncs.com",\n    "s3.region" = "oss-cn-beijing",\n    "format" = "parquet",\n    "use_path_style" = "false");\n-- COS\nselect * from s3(\n    "URI" = "https://example-bucket.cos.ap-hongkong.myqcloud.com/your-folder/file.parquet",\n    "s3.access_key" = "ak",\n    "s3.secret_key" = "sk",\n    "s3.endpoint" = "cos.ap-hongkong.myqcloud.com",\n    "s3.region" = "ap-hongkong",\n    "format" = "parquet",\n    "use_path_style" = "false");\n\n-- MinIO\nselect * from s3(\n    "uri" = "s3://bucket/file.csv",\n    "s3.endpoint" = "http://172.21.0.101:9000",\n    "s3.access_key"= "ak",\n    "s3.secret_key" = "sk",\n    "s3.region" = "us-east-1",\n    "format" = "csv"\n);\n\n-- The BOS on Baidu Cloud will use \'virtual-hosted style\' compatible with the S3 protocol to access s3.\n-- BOS\nselect * from s3(\n    "uri" = "https://example-bucket.s3.bj.bcebos.com/your-folder/file.parquet",\n    "s3.access_key"= "ak",\n    "s3.secret_key" = "sk",\n  "s3.region" = "bj",\n    "s3.endpoint" = "http://bj.bcebos.com",\n    "format" = "parquet",\n    "use_path_style" = "false");\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Example of s3://:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Note how to write your bucket of URI, no need to set \'use_path_style\'.\n-- s3 will be accessed in \'virtual-hosted style\'.\nselect * from s3(\n    "URI" = "s3://bucket/file/student.csv",\n    "s3.endpoint"= "endpont",\n    "s3.region" = "region",\n    "s3.access_key"= "ak",\n    "s3.secret_key" = "sk",\n    "format" = "csv");    \n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Example of other uri styles:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Virtual Host AWS Client (Hadoop S3) Mixed Style. Used by setting `use_path_style = false` and `force_parsing_by_standard_uri = true`.\nselect * from s3(\n    "URI" = "s3://my-bucket.s3.us-west-1.amazonaws.com/resources/doc.txt?versionId=abc123&partNumber=77&partNumber=88",\n    "s3.access_key"= "ak",\n    "s3.secret_key" = "sk",\n    "s3.endpoint"= "endpont",\n    "s3.region"= "region",\n    "format" = "csv",\n    "use_path_style"="false",\n    "force_parsing_by_standard_uri"="true");\n\n-- Path AWS Client (Hadoop S3) Mixed Style. Used by setting `use_path_style = true` and `force_parsing_by_standard_uri = true`.\nselect * from s3(\n    "URI" = "s3://s3.us-west-1.amazonaws.com/my-bucket/resources/doc.txt?versionId=abc123&partNumber=77&partNumber=88",\n    "s3.access_key"= "ak",\n    "s3.secret_key" = "sk",\n    "s3.endpoint"= "endpont",\n    "s3.region"= "region",\n    "format" = "csv",\n    "use_path_style"="true",\n  "force_parsing_by_standard_uri"="true");\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"csv format"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"csv"})," format: Read the file on S3 and process it as a csv file, read the first line in the file to parse out the table schema. The number of columns in the first line of the file ",(0,r.jsx)(n.code,{children:"n"})," will be used as the number of columns in the table schema, and the column names of the table schema will be automatically named ",(0,r.jsx)(n.code,{children:"c1, c2, ..., cn"}),", and the column type is set to ",(0,r.jsx)(n.code,{children:"String"})," , for example:"]}),"\n",(0,r.jsx)(n.p,{children:"The file content of student1.csv:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1,ftw,12\n2,zs,18\n3,ww,20\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"use S3 tvf"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3("uri" = "http://127.0.0.1:9312/test2/student1.csv",\n                 "s3.access_key"= "minioadmin",\n                 "s3.secret_key" = "minioadmin",\n                 "s3.endpoint" = "http://127.0.0.1:9312",\n                 "s3.region" = "us-east-1",\n                 "format" = "csv",\n                 "use_path_style" = "true") order by c1;\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"  +------+------+------+\n   | c1   | c2   | c3   |\n   +------+------+------+\n   | 1    | ftw  | 12   |\n   | 2    | zs   | 18   |\n   | 3    | ww   | 20   |\n   +------+------+------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["use ",(0,r.jsx)(n.code,{children:"desc function S3()"})," to view the table schema"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'Desc function s3("uri" = "http://127.0.0.1:9312/test2/student1.csv",\n                 "s3.access_key"= "minioadmin",\n                 "s3.secret_key" = "minioadmin",\n                 "s3.endpoint" = "http://127.0.0.1:9312",\n                 "s3.region" = "us-east-1",\n                 "format" = "csv",\n                 "use_path_style" = "true");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"  +-------+------+------+-------+---------+-------+\n   | Field | Type | Null | Key   | Default | Extra |\n   +-------+------+------+-------+---------+-------+\n   | c1    | TEXT | Yes  | false | NULL    | NONE  |\n   | c2    | TEXT | Yes  | false | NULL    | NONE  |\n   | c3    | TEXT | Yes  | false | NULL    | NONE  |\n   +-------+------+------+-------+---------+-------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"csv_with_names format"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"csv_with_names"})," format: The first line of the file is used as the number and name of the columns of the table schema, and the column type is set to ",(0,r.jsx)(n.code,{children:"String"}),", for example:"]}),"\n",(0,r.jsx)(n.p,{children:"The file content of student_with_names.csv:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"id,name,age\n1,ftw,12\n2,zs,18\n3,ww,20\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"use S3 tvf"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3("uri" = "http://127.0.0.1:9312/test2/student_with_names.csv",\n                 "s3.access_key"= "minioadmin",\n                 "s3.secret_key" = "minioadmin",\n                 "s3.endpoint" = "http://127.0.0.1:9312",\n                 "s3.region" = "us-east-1",\n                 "format" = "csv_with_names",\n                 "use_path_style" = "true") order by id;\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"  +------+------+------+\n   | id   | name | age  |\n   +------+------+------+\n   | 1    | ftw  | 12   |\n   | 2    | zs   | 18   |\n   | 3    | ww   | 20   |\n   +------+------+------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["You can also use ",(0,r.jsx)(n.code,{children:"desc function S3()"})," to view the Table Schema."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'Desc function s3("uri" = "http://127.0.0.1:9312/test2/student_with_names.csv",\n                 "s3.access_key"= "minioadmin",\n                 "s3.secret_key" = "minioadmin",\n                 "s3.endpoint" = "http://127.0.0.1:9312",\n                 "s3.region" = "us-east-1",\n                 "format" = "csv_with_names",\n                 "use_path_style" = "true");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"  +-------+------+------+-------+---------+-------+\n   | Field | Type | Null | Key   | Default | Extra |\n   +-------+------+------+-------+---------+-------+\n   | id    | TEXT | Yes  | false | NULL    | NONE  |\n   | name  | TEXT | Yes  | false | NULL    | NONE  |\n   | age   | TEXT | Yes  | false | NULL    | NONE  |\n   +-------+------+------+-------+---------+-------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"csv_with_names_and_types format"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"csv_with_names_and_types"})," format: Currently, it does not support parsing the column type from a csv file. When using this format, S3 tvf will parse the first line of the file as the number and name of the columns of the table"]}),"\n",(0,r.jsxs)(n.p,{children:["The file content of ",(0,r.jsx)(n.code,{children:"student_with_names_and_types.csv"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  id,name,age\n  INT,STRING,INT\n  1,ftw,12\n  2,zs,18\n  3,ww,20\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"use S3 tvf"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3("uri" = "http://127.0.0.1:9312/test2/student_with_names_and_types.csv",\n                 "s3.access_key"= "minioadmin",\n                 "s3.secret_key" = "minioadmin",\n                 "s3.endpoint" = "http://127.0.0.1:9312",\n                 "s3.region" = "us-east-1",\n                 "format" = "csv_with_names_and_types",\n                 "use_path_style" = "true") order by id;\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+------+\n| id   | name | age  |\n+------+------+------+\n| 1    | ftw  | 12   |\n| 2    | zs   | 18   |\n| 3    | ww   | 20   |\n+------+------+------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["You can also use ",(0,r.jsx)(n.code,{children:"desc function S3()"})," to view the Table Schema."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'Desc function s3("uri" = "http://127.0.0.1:9312/test2/student_with_names_and_types.csv",\n                 "s3.access_key"= "minioadmin",\n                 "s3.secret_key" = "minioadmin",\n                 "s3.endpoint" = "http://127.0.0.1:9312",\n                 "s3.region" = "us-east-1",\n                 "format" = "csv_with_names_and_types",\n                 "use_path_style" = "true");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"  +-------+------+------+-------+---------+-------+\n   | Field | Type | Null | Key   | Default | Extra |\n   +-------+------+------+-------+---------+-------+\n   | id    | TEXT | Yes  | false | NULL    | NONE  |\n   | name  | TEXT | Yes  | false | NULL    | NONE  |\n   | age   | TEXT | Yes  | false | NULL    | NONE  |\n   +-------+------+------+-------+---------+-------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"json format"})}),"\n",(0,r.jsxs)(n.p,{children:["The json format involves many optional parameters, and the meaning of each parameter can be referred to: ",(0,r.jsx)(n.a,{href:"../../../data-operate/import/file-format/json",children:"Json Load"}),". When S3 tvf queries the json form"]}),"\n",(0,r.jsx)(n.p,{children:"data.json \u6587\u4EF6"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[{"id":1, "name":"ftw", "age":18}]\n[{"id":2, "name":"xxx", "age":17}]\n[{"id":3, "name":"yyy", "age":19}]\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"use S3 tvf:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3(\n    "uri" = "http://127.0.0.1:9312/test2/data.json",\n    "s3.access_key"= "minioadmin",\n    "s3.secret_key" = "minioadmin",\n    "s3.endpoint" = "http://127.0.0.1:9312",\n    "s3.region" = "us-east-1",\n    "format" = "json",\n    "strip_outer_array" = "true",\n    "read_json_by_line" = "true",\n    "use_path_style"="true");\n+------+------+------+\n| id   | name | age  |\n+------+------+------+\n| 1    | ftw  | 18   |\n| 2    | xxx  | 17   |\n| 3    | yyy  | 19   |\n+------+------+------+\n\nselect * from s3(\n    "uri" = "http://127.0.0.1:9312/test2/data.json",\n    "s3.access_key"= "minioadmin",\n    "s3.secret_key" = "minioadmin",\n    "s3.endpoint" = "http://127.0.0.1:9312",\n    "s3.region" = "us-east-1",\n    "format" = "json",\n    "strip_outer_array" = "true",\n    "jsonpaths" = "[\\"$.id\\", \\"$.age\\"]",\n    "use_path_style"="true");\n+------+------+\n| id   | age  |\n+------+------+\n| 1    | 18   |\n| 2    | 17   |\n| 3    | 19   |\n+------+------+\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"parquet format"})}),"\n",(0,r.jsx)(n.p,{children:"S3 tvf supports parsing the column names and column types of the table schema from the parquet file. Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3(\n   "uri" = "http://127.0.0.1:9312/test2/test.snappy.parquet",\n   "s3.access_key"= "minioadmin",\n   "s3.secret_key" = "minioadmin",\n   "s3.endpoint" = "http://127.0.0.1:9312",\n   "s3.region" = "us-east-1",\n   "format" = "parquet",\n   "use_path_style"="true") limit 5;\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"     +-----------+------------------------------------------+----------------+----------+-------------------------+--------+-------------+---------------+---------------------+\n     | p_partkey | p_name                                   | p_mfgr         | p_brand  | p_type                  | p_size | p_container | p_retailprice | p_comment           |\n     +-----------+------------------------------------------+----------------+----------+-------------------------+--------+-------------+---------------+---------------------+\n     |         1 | goldenrod lavender spring chocolate lace | Manufacturer#1 | Brand#13 | PROMO BURNISHED COPPER  |      7 | JUMBO PKG   |           901 | ly. slyly ironi     |\n     |         2 | blush thistle blue yellow saddle         | Manufacturer#1 | Brand#13 | LARGE BRUSHED BRASS     |      1 | LG CASE     |           902 | lar accounts amo    |\n     |         3 | spring green yellow purple cornsilk      | Manufacturer#4 | Brand#42 | STANDARD POLISHED BRASS |     21 | WRAP CASE   |           903 | egular deposits hag |\n     |         4 | cornflower chocolate smoke green pink    | Manufacturer#3 | Brand#34 | SMALL PLATED BRASS      |     14 | MED DRUM    |           904 | p furiously r       |\n     |         5 | forest brown coral puff cream            | Manufacturer#3 | Brand#32 | STANDARD POLISHED TIN   |     15 | SM PKG      |           905 |  wake carefully     |\n     +-----------+------------------------------------------+----------------+----------+-------------------------+--------+-------------+---------------+---------------------+\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'MySQL [(none)]> desc function s3(\n    "uri" = "http://127.0.0.1:9312/test2/test.snappy.parquet",\n    "s3.access_key"= "minioadmin",\n    "s3.secret_key" = "minioadmin",\n    "s3.endpoint" = "http://127.0.0.1:9312",\n    "s3.region" = "us-east-1",\n    "format" = "parquet",\n    "use_path_style"="true");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"      +---------------+--------------+------+-------+---------+-------+\n      | Field         | Type         | Null | Key   | Default | Extra |\n      +---------------+--------------+------+-------+---------+-------+\n      | p_partkey     | INT          | Yes  | false | NULL    | NONE  |\n      | p_name        | TEXT         | Yes  | false | NULL    | NONE  |\n      | p_mfgr        | TEXT         | Yes  | false | NULL    | NONE  |\n      | p_brand       | TEXT         | Yes  | false | NULL    | NONE  |\n      | p_type        | TEXT         | Yes  | false | NULL    | NONE  |\n      | p_size        | INT          | Yes  | false | NULL    | NONE  |\n      | p_container   | TEXT         | Yes  | false | NULL    | NONE  |\n      | p_retailprice | DECIMAL(9,0) | Yes  | false | NULL    | NONE  |\n      | p_comment     | TEXT         | Yes  | false | NULL    | NONE  |\n      +---------------+--------------+------+-------+---------+-------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"orc format"})}),"\n",(0,r.jsxs)(n.p,{children:["Same as ",(0,r.jsx)(n.code,{children:"parquet"})," format, set ",(0,r.jsx)(n.code,{children:"format"})," parameter to orc."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3(\n    "uri" = "http://127.0.0.1:9312/test2/test.snappy.orc",\n    "s3.access_key"= "minioadmin",\n    "s3.secret_key" = "minioadmin",\n    "s3.endpoint" = "http://127.0.0.1:9312",\n    "s3.region" = "us-east-1",\n    "format" = "orc",\n    "use_path_style"="true") limit 5;\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"  +-----------+------------------------------------------+----------------+----------+-------------------------+--------+-------------+---------------+---------------------+\n| p_partkey | p_name                                   | p_mfgr         | p_brand  | p_type                  | p_size | p_container | p_retailprice | p_comment           |\n+-----------+------------------------------------------+----------------+----------+-------------------------+--------+-------------+---------------+---------------------+\n|         1 | goldenrod lavender spring chocolate lace | Manufacturer#1 | Brand#13 | PROMO BURNISHED COPPER  |      7 | JUMBO PKG   |           901 | ly. slyly ironi     |\n|         2 | blush thistle blue yellow saddle         | Manufacturer#1 | Brand#13 | LARGE BRUSHED BRASS     |      1 | LG CASE     |           902 | lar accounts amo    |\n|         3 | spring green yellow purple cornsilk      | Manufacturer#4 | Brand#42 | STANDARD POLISHED BRASS |     21 | WRAP CASE   |           903 | egular deposits hag |\n|         4 | cornflower chocolate smoke green pink    | Manufacturer#3 | Brand#34 | SMALL PLATED BRASS      |     14 | MED DRUM    |           904 | p furiously r       |\n|         5 | forest brown coral puff cream            | Manufacturer#3 | Brand#32 | STANDARD POLISHED TIN   |     15 | SM PKG      |           905 |  wake carefully     |\n+-----------+------------------------------------------+----------------+----------+-------------------------+--------+-------------+---------------+---------------------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"avro format"})}),"\n",(0,r.jsx)(n.p,{children:"S3 tvf supports parsing the column names and column types of the table schema from the avro file. Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3(\n         "uri" = "http://127.0.0.1:9312/test2/person.avro",\n         "ACCESS_KEY" = "ak",\n         "SECRET_KEY" = "sk",\n         "s3.endpoint" = "http://127.0.0.1:9312",\n         "s3.region" = "us-east-1",\n         "FORMAT" = "avro");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+--------+--------------+-------------+-----------------+\n| name   | boolean_type | double_type | long_type       |\n+--------+--------------+-------------+-----------------+\n| Alyssa |            1 |     10.0012 | 100000000221133 |\n| Ben    |            0 |    5555.999 |      4009990000 |\n| lisi   |            0 | 5992225.999 |      9099933330 |\n+--------+--------------+-------------+-----------------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"uri contains wildcards"})}),"\n",(0,r.jsx)(n.p,{children:"uri can use wildcards to read multiple files. Note: If wildcards are used, the format of each file must be consistent (especially csv/csv_with_names/csv_with_names_and_types count as different formats), S3 tvf uses the first file to parse out the table schema. For example:"}),"\n",(0,r.jsx)(n.p,{children:"The following two csv files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// file1.csv\n1,aaa,18\n2,qqq,20\n3,qwe,19\n\n// file2.csv\n5,cyx,19\n6,ftw,21\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You can use wildcards on the uri to query."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select * from s3(\n        "uri" = "http://127.0.0.1:9312/test2/file*.csv",\n        "s3.access_key"= "minioadmin",\n        "s3.secret_key" = "minioadmin",\n        "s3.endpoint" = "http://127.0.0.1:9312",\n        "s3.region" = "us-east-1",\n        "format" = "csv",\n        "use_path_style"="true");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:" +------+------+------+\n| c1   | c2   | c3   |\n+------+------+------+\n| 1    | aaa  | 18   |\n| 2    | qqq  | 20   |\n| 3    | qwe  | 19   |\n| 5    | cyx  | 19   |\n| 6    | ftw  | 21   |\n+------+------+------+\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Using ",(0,r.jsx)(n.code,{children:"S3"})," tvf with ",(0,r.jsx)(n.code,{children:"insert into"})," and ",(0,r.jsx)(n.code,{children:"cast"})]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Create doris internal table\nCREATE TABLE IF NOT EXISTS ${testTable}\n    (\n        id int,\n        name varchar(50),\n        age int\n    )\n    COMMENT "my first table"\n    DISTRIBUTED BY HASH(id) BUCKETS 32\n    PROPERTIES("replication_num" = "1");\n\n-- Insert data using S3\ninsert into ${testTable} (id,name,age)\nselect cast (id as INT) as id, name, cast (age as INT) as age\nfrom s3(\n    "uri" = "${uri}",\n    "s3.access_key"= "${ak}",\n    "s3.secret_key" = "${sk}",\n    "s3.endpoint" = "http://127.0.0.1:9312",\n    "s3.region" = "us-east-1",\n    "format" = "${format}",\n    "strip_outer_array" = "true",\n    "read_json_by_line" = "true",\n    "use_path_style" = "true");\n'})}),"\n"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return i}});var t=s(667294);let r={},a=t.createContext(r);function i(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);