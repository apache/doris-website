"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["798382"],{52555:function(e,n,t){t.r(n),t.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>r,assets:()=>l,toc:()=>c,contentTitle:()=>d});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/date-time-functions/str-to-date","title":"STR_TO_DATE","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/date-time-functions/str-to-date.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/date-time-functions","slug":"/sql-manual/sql-functions/scalar-functions/date-time-functions/str-to-date","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/str-to-date","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"STR_TO_DATE","language":"en"},"sidebar":"docs","previous":{"title":"SECONDS_SUB","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/seconds-sub"},"next":{"title":"TIMESTAMP","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/timestamp"}}'),s=t("785893"),i=t("250065");let a={title:"STR_TO_DATE",language:"en"},d=void 0,l={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function o(e){let n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"The function converts the input datetime string into a DATETIME type value based on the specified format."}),"\n",(0,s.jsxs)(n.p,{children:["This function behaves consistently with the ",(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_str-to-date",children:"str_to_date function"})," in MySQL."]}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"STR_TO_DATE(<datetime_str>, <format>)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<datetime_str>"})}),(0,s.jsxs)(n.td,{children:["Required. The input datetime string representing the date or time to be converted. For supported input formats, see ",(0,s.jsx)(n.a,{href:"../../../../../docs/sql-manual/basic-element/sql-data-types/conversion/datetime-conversion",children:"datetime conversion"})," and ",(0,s.jsx)(n.a,{href:"../../../../../docs/sql-manual/basic-element/sql-data-types/conversion/date-conversion",children:"date conversion"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<format>"})}),(0,s.jsxs)(n.td,{children:["Required. The specified datetime format string, such as ",(0,s.jsx)(n.code,{children:"%Y-%m-%d %H:%i:%s"}),", etc. For specific format parameters, see the ",(0,s.jsx)(n.a,{href:"./date-format#parameters",children:"DATE_FORMAT"})," documentation"]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["In addition, ",(0,s.jsx)(n.code,{children:"<format>"})," supports the following alternative formats and interprets them according to the regular format:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Alternative Input"}),(0,s.jsx)(n.th,{children:"Interpreted as"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"yyyyMMdd"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"%Y%m%d"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"yyyy-MM-dd"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"%Y-%m-%d"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"yyyy-MM-dd HH:mm:ss"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"%Y-%m-%d %H:%i:%s"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(n.p,{children:"Returns a DATETIME value representing the converted date and time."}),"\n",(0,s.jsx)(n.p,{children:"Date and time matching method uses two pointers to point to the start of both strings:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"When the format string encounters a % symbol, the next letter after % is used to match the corresponding part of the date/time string. If it does not match (e.g., %Y tries to match a time part like 10:10:10, or % is followed by an unsupported character like %*), an error is returned. If matched successfully, move to the next character for parsing."}),"\n",(0,s.jsx)(n.li,{children:"At any time, if either string encounters a space character, skip it and parse the next character."}),"\n",(0,s.jsx)(n.li,{children:"When matching ordinary letters, check if the characters pointed to by both pointers are equal. If not, return an error; if equal, parse the next character."}),"\n",(0,s.jsx)(n.li,{children:"When the date pointer reaches the end of the string, if the date/time only contains the date part, the format string will check whether it contains time part characters (e.g., %H). If so, the time part will be set to 00:00:00."}),"\n",(0,s.jsx)(n.li,{children:"When the format string pointer reaches the end, matching ends."}),"\n",(0,s.jsx)(n.li,{children:"Finally, check whether the matched time parts are valid (e.g., month must be in [1,12]). If invalid, return an error; if valid, return the parsed date and time."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If any parameter is NULL, returns NULL;"}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"<format>"})," is an empty string, returns an error;"]}),"\n",(0,s.jsx)(n.li,{children:"If matching fails, returns an error."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Parse using standard format specifiers\nSELECT STR_TO_DATE('2025-01-23 12:34:56', '%Y-%m-%d %H:%i:%s') AS result;\n+---------------------+\n| result              |\n+---------------------+\n| 2025-01-23 12:34:56 |\n+---------------------+\n\n-- Parse using alternative format\nSELECT STR_TO_DATE('2025-01-23 12:34:56', 'yyyy-MM-dd HH:mm:ss') AS result;\n+---------------------+\n| result              |\n+---------------------+\n| 2025-01-23 12:34:56 |\n+---------------------+\n\n-- Date string only (time defaults to 00:00:00)\nSELECT STR_TO_DATE('20230713', 'yyyyMMdd') AS result;\n+---------------------+\n| result              |\n+---------------------+\n| 2023-07-13 00:00:00 |\n+---------------------+\n\n-- Parse string with week number and weekday\nSELECT STR_TO_DATE('200442 Monday', '%X%V %W') AS result;\n+------------+\n| result     |\n+------------+\n| 2004-10-18 |\n+------------+\n\n-- Parse abbreviated month name and 12-hour time\nSELECT STR_TO_DATE('Oct 5 2023 3:45:00 PM', '%b %d %Y %h:%i:%s %p') AS result;\n+---------------------+\n| result              |\n+---------------------+\n| 2023-10-05 15:45:00 |\n+---------------------+\n\n-- Format does not match string (returns error)\nSELECT STR_TO_DATE('2023/01/01', '%Y-%m-%d') AS result;\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.3)[INVALID_ARGUMENT]Operation str_to_date of 2023/01/01 is invalid\n\n-- String contains extra characters (automatically ignored)\nSELECT STR_TO_DATE('2023-01-01 10:00:00 (GMT)', '%Y-%m-%d %H:%i:%s') AS result;\n+---------------------+\n| result              |\n+---------------------+\n| 2023-01-01 10:00:00 |\n+---------------------+\n\n-- Parse microseconds (precision preserved)\nSELECT STR_TO_DATE('2023-07-13 12:34:56.789', '%Y-%m-%d %H:%i:%s.%f') AS result;\n+----------------------------+\n| result                     |\n+----------------------------+\n| 2023-07-13 12:34:56.789000 |\n+----------------------------+\n\n-- Any parameter is NULL (returns NULL)\nSELECT STR_TO_DATE(NULL, '%Y-%m-%d'), STR_TO_DATE('2023-01-01', NULL) AS result;\n+--------------------------------+--------+\n| str_to_date(NULL, '%Y-%m-%d')  | result |\n+--------------------------------+--------+\n| NULL                           | NULL   |\n+--------------------------------+--------+\n\n-- Format is an empty string (returns error)\nSELECT STR_TO_DATE('2023-01-01', '') AS result;\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.3)[INVALID_ARGUMENT]Operation str_to_date of 2023-01-01 is invalid\n"})})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return d},a:function(){return a}});var r=t(667294);let s={},i=r.createContext(s);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);