"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["987372"],{178321:function(e,n,t){t.r(n),t.d(n,{default:()=>h,frontMatter:()=>r,metadata:()=>i,assets:()=>o,toc:()=>c,contentTitle:()=>l});var i=JSON.parse('{"id":"admin-manual/maint-monitor/tablet-repair-and-balance","title":"Data Replica Management","description":"Beginning with version 0.9.0, Doris introduced an optimized replica management strategy and supported a richer replica status viewing tool. This document focuses on Doris data replica balancing, repair scheduling strategies, and replica management operations and maintenance methods. Help users to more easily master and manage the replica status in the cluster.","source":"@site/docs/admin-manual/maint-monitor/tablet-repair-and-balance.md","sourceDirName":"admin-manual/maint-monitor","slug":"/admin-manual/maint-monitor/tablet-repair-and-balance","permalink":"/docs/dev/admin-manual/maint-monitor/tablet-repair-and-balance","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Data Replica Management","language":"en"},"sidebar":"docs","previous":{"title":"Disk Capacity Management","permalink":"/docs/dev/admin-manual/maint-monitor/disk-capacity"},"next":{"title":"Automated Service Startup","permalink":"/docs/dev/admin-manual/maint-monitor/automatic-service-start"}}'),s=t("785893"),a=t("250065");let r={title:"Data Replica Management",language:"en"},l=void 0,o={},c=[{value:"Noun Interpretation",id:"noun-interpretation",level:2},{value:"Duplicate status",id:"duplicate-status",level:2},{value:"Replica Repair",id:"replica-repair",level:2},{value:"Scheduling priority",id:"scheduling-priority",level:3},{value:"Manual priority",id:"manual-priority",level:3},{value:"Priority scheduling",id:"priority-scheduling",level:3},{value:"Replicas Balance",id:"replicas-balance",level:2},{value:"BeLoad",id:"beload",level:3},{value:"BE Node Load",id:"be-node-load",level:3},{value:"Partition",id:"partition",level:3},{value:"Skew Info",id:"skew-info",level:4},{value:"Equilibrium strategy",id:"equilibrium-strategy",level:3},{value:"Resource control",id:"resource-control",level:2},{value:"Tablet State View",id:"tablet-state-view",level:2},{value:"Tablet state",id:"tablet-state",level:3},{value:"Duplicate Scheduling Task",id:"duplicate-scheduling-task",level:3},{value:"Viewing Cluster Load and Scheduling Resources",id:"viewing-cluster-load-and-scheduling-resources",level:2},{value:"Scheduler Statistical Status View",id:"scheduler-statistical-status-view",level:3},{value:"Relevant configuration instructions",id:"relevant-configuration-instructions",level:2},{value:"Adjustable parameters",id:"adjustable-parameters",level:3},{value:"Unadjustable parameters",id:"unadjustable-parameters",level:3},{value:"Relevant issues",id:"relevant-issues",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Control and manage the progress of replica repair and balancing of clusters",id:"control-and-manage-the-progress-of-replica-repair-and-balancing-of-clusters",level:3}];function d(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Beginning with version 0.9.0, Doris introduced an optimized replica management strategy and supported a richer replica status viewing tool. This document focuses on Doris data replica balancing, repair scheduling strategies, and replica management operations and maintenance methods. Help users to more easily master and manage the replica status in the cluster."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Repairing and balancing copies of tables with Colocation attributes can be referred to ",(0,s.jsx)(n.a,{href:"../../query-data/join#colocate-join",children:"HERE"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"noun-interpretation",children:"Noun Interpretation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Tablet: The logical fragmentation of a Doris table, where a table has multiple fragments."}),"\n",(0,s.jsx)(n.li,{children:"Replica: A sliced copy, defaulting to three copies of a slice."}),"\n",(0,s.jsx)(n.li,{children:"Healthy Replica: A healthy copy that survives at Backend and has a complete version."}),"\n",(0,s.jsx)(n.li,{children:"Tablet Checker (TC): A resident background thread that scans all Tablets regularly, checks the status of these Tablets, and decides whether to send them to Tablet Scheduler based on the results."}),"\n",(0,s.jsx)(n.li,{children:"Tablet Scheduler (TS): A resident background thread that handles Tablets sent by Tablet Checker that need to be repaired. At the same time, cluster replica balancing will be carried out."}),"\n",(0,s.jsx)(n.li,{children:"Tablet SchedCtx (TSC): is a tablet encapsulation. When TC chooses a tablet, it encapsulates it as a TSC and sends it to TS."}),"\n",(0,s.jsx)(n.li,{children:"Storage Medium: Storage medium. Doris supports specifying different storage media for partition granularity, including SSD and HDD. The replica scheduling strategy is also scheduled for different storage media."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n              +--------+              +-----------+\n              |  Meta  |              |  Backends |\n              +---^----+              +------^----+\n                  | |                        | 3. Send clone tasks\n 1. Check tablets | |                        |\n           +--------v------+        +-----------------+\n           | TabletChecker +--------\x3e TabletScheduler |\n           +---------------+        +-----------------+\n                   2. Waiting to be scheduled\n\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"The figure above is a simplified workflow."}),"\n",(0,s.jsx)(n.h2,{id:"duplicate-status",children:"Duplicate status"}),"\n",(0,s.jsx)(n.p,{children:"Multiple copies of a Tablet may cause state inconsistencies due to certain circumstances. Doris will attempt to automatically fix the inconsistent copies of these states so that the cluster can recover from the wrong state as soon as possible."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"The health status of a Replica is as follows:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"BAD"}),"\n",(0,s.jsx)(n.p,{children:"That is, the copy is damaged. Includes, but is not limited to, the irrecoverable damaged status of copies caused by disk failures, BUGs, etc."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"VERSION_MISSING"}),"\n",(0,s.jsx)(n.p,{children:"Version missing. Each batch of imports in Doris corresponds to a data version. A copy of the data consists of several consecutive versions. However, due to import errors, delays and other reasons, the data version of some copies may be incomplete."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"HEALTHY"}),"\n",(0,s.jsx)(n.p,{children:"Health copy. That is, a copy of the normal data, and the BE node where the copy is located is in a normal state (heartbeat is normal and not in the offline process)."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"The health status of a Tablet is determined by the status of all its copies. There are the following categories:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"REPLICA_MISSING"}),"\n",(0,s.jsx)(n.p,{children:"The copy is missing. That is, the number of surviving copies is less than the expected number of copies."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"VERSION_INCOMPLETE"}),"\n",(0,s.jsx)(n.p,{children:"The number of surviving copies is greater than or equal to the number of expected copies, but the number of healthy copies is less than the number of expected copies."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"REPLICA_RELOCATING"}),"\n",(0,s.jsx)(n.p,{children:"Have a full number of live copies of the replication num version, but the BE nodes where some copies are located are in unavailable state (such as decommission)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"REPLICA_MISSING_IN_CLUSTER"}),"\n",(0,s.jsx)(n.p,{children:"When using multi-cluster, the number of healthy replicas is greater than or equal to the expected number of replicas, but the number of replicas in the corresponding cluster is less than the expected number of replicas."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"REDUNDANT"}),"\n",(0,s.jsx)(n.p,{children:"Duplicate redundancy. Healthy replicas are in the corresponding cluster, but the number of replicas is larger than the expected number. Or there's a spare copy of unavailable."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"FORCE_REDUNDANT"}),"\n",(0,s.jsx)(n.p,{children:"This is a special state. It only occurs when the number of existed replicas is greater than or equal to the number of available nodes, and the number of available nodes is greater than or equal to the number of expected replicas, and when the number of alive replicas is less than the number of expected replicas. In this case, you need to delete a copy first to ensure that there are available nodes for creating a new copy."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"COLOCATE_MISMATCH"}),"\n",(0,s.jsx)(n.p,{children:"Fragmentation status of tables for Collocation attributes. Represents that the distribution of fragmented copies is inconsistent with the specified distribution of Colocation Group."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"COLOCATE_REDUNDANT"}),"\n",(0,s.jsx)(n.p,{children:"Fragmentation status of tables for Collocation attributes. Represents the fragmented copy redundancy of the Colocation table."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"HEALTHY"}),"\n",(0,s.jsx)(n.p,{children:"Healthy fragmentation, that is, conditions [1-5] are not satisfied."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"replica-repair",children:"Replica Repair"}),"\n",(0,s.jsx)(n.p,{children:"As a resident background process, Tablet Checker regularly checks the status of all fragments. For unhealthy fragmentation, it will be sent to Tablet Scheduler for scheduling and repair. The actual operation of repair is accomplished by clone task on BE. FE is only responsible for generating these clone tasks."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Note 1: The main idea of replica repair is to make the number of fragmented replicas reach the desired value by creating or completing them first. Then delete the redundant copy."}),"\n",(0,s.jsx)(n.p,{children:"Note 2: A clone task is to complete the process of copying specified data from a specified remote end to a specified destination."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For different states, we adopt different repair methods:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"REPLICA_MISSING/REPLICA_RELOCATING"}),"\n",(0,s.jsx)(n.p,{children:"Select a low-load, available BE node as the destination. Choose a healthy copy as the source. Clone tasks copy a complete copy from the source to the destination. For replica completion, we will directly select an available BE node, regardless of the storage medium."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"VERSION_INCOMPLETE"}),"\n",(0,s.jsx)(n.p,{children:"Select a relatively complete copy as the destination. Choose a healthy copy as the source. The clone task attempts to copy the missing version from the source to the destination."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"REPLICA_MISSING_IN_CLUSTER"}),"\n",(0,s.jsx)(n.p,{children:"This state processing method is the same as REPLICA_MISSING."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"REDUNDANT"}),"\n",(0,s.jsx)(n.p,{children:"Usually, after repair, there will be redundant copies in fragmentation. We select a redundant copy to delete it. The selection of redundant copies follows the following priorities:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The BE where the copy is located has been offline."}),"\n",(0,s.jsx)(n.li,{children:"The copy is damaged"}),"\n",(0,s.jsx)(n.li,{children:"The copy is lost in BE or offline"}),"\n",(0,s.jsx)(n.li,{children:"The replica is in the CLONE state (which is an intermediate state during clone task execution)"}),"\n",(0,s.jsx)(n.li,{children:"The copy has version missing"}),"\n",(0,s.jsx)(n.li,{children:"The cluster where the copy is located is incorrect"}),"\n",(0,s.jsx)(n.li,{children:"The BE node where the replica is located has a high load"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"FORCE_REDUNDANT"}),"\n",(0,s.jsx)(n.p,{children:"Unlike REDUNDANT, because at this point Tablet has a copy missing, because there are no additional available nodes for creating new copies. So at this point, a copy must be deleted to free up a available node for creating a new copy.\nThe order of deleting copies is the same as REDUNDANT."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"COLOCATE_MISMATCH"}),"\n",(0,s.jsx)(n.p,{children:"Select one of the replica distribution BE nodes specified in Colocation Group as the destination node for replica completion."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"COLOCATE_REDUNDANT"}),"\n",(0,s.jsx)(n.p,{children:"Delete a copy on a BE node that is distributed by a copy specified in a non-Colocation Group."}),"\n",(0,s.jsx)(n.p,{children:"Doris does not deploy a copy of the same Tablet on a different BE of the same host when selecting a replica node. It ensures that even if all BEs on the same host are deactivated, all copies will not be lost."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"scheduling-priority",children:"Scheduling priority"}),"\n",(0,s.jsx)(n.p,{children:"Waiting for the scheduled fragments in Tablet Scheduler gives different priorities depending on the status. High priority fragments will be scheduled first. There are currently several priorities."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"VERY_HIGH"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"REDUNDANT. For slices with duplicate redundancy, we give priority to them. Logically, duplicate redundancy is the least urgent, but because it is the fastest to handle and can quickly release resources (such as disk space, etc.), we give priority to it."}),"\n",(0,s.jsx)(n.li,{children:"FORCE_REDUNDANT. Ditto."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"HIGH"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"REPLICA_MISSING and most copies are missing (for example, 2 copies are missing in 3 copies)"}),"\n",(0,s.jsx)(n.li,{children:"VERSION_INCOMPLETE and most copies are missing"}),"\n",(0,s.jsx)(n.li,{children:"COLOCATE_MISMATCH We hope that the fragmentation related to the Collocation table can be repaired as soon as possible."}),"\n",(0,s.jsx)(n.li,{children:"COLOCATE_REDUNDANT"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"NORMAL"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"REPLICA_MISSING, but most survive (for example, three copies lost one)"}),"\n",(0,s.jsx)(n.li,{children:"VERSION_INCOMPLETE, but most copies are complete"}),"\n",(0,s.jsx)(n.li,{children:"REPLICA_RELOCATING and relocate is required for most replicas (e.g. 3 replicas with 2 replicas)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"LOW"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"REPLICA_MISSING_IN_CLUSTER"}),"\n",(0,s.jsx)(n.li,{children:"REPLICA_RELOCATING most copies stable"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"manual-priority",children:"Manual priority"}),"\n",(0,s.jsx)(n.p,{children:"The system will automatically determine the scheduling priority. Sometimes, however, users want the fragmentation of some tables or partitions to be repaired faster. So we provide a command that the user can specify that a slice of a table or partition is repaired first:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ADMIN REPAIR TABLE tbl [PARTITION (p1, p2, ...)];"})}),"\n",(0,s.jsx)(n.p,{children:"This command tells TC to give VERY HIGH priority to the problematic tables or partitions that need to be repaired first when scanning Tablets."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Note: This command is only a hint, which does not guarantee that the repair will be successful, and the priority will change with the scheduling of TS. And when Master FE switches or restarts, this information will be lost."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Priority can be cancelled by the following commands:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"ADMIN CANCEL REPAIR TABLE tbl [PARTITION (p1, p2, ...)];"})}),"\n",(0,s.jsx)(n.h3,{id:"priority-scheduling",children:"Priority scheduling"}),"\n",(0,s.jsx)(n.p,{children:"Priority ensures that severely damaged fragments can be repaired first, and improves system availability. But if the high priority repair task fails all the time, the low priority task will never be scheduled. Therefore, we will dynamically adjust the priority of tasks according to the running status of tasks, so as to ensure that all tasks have the opportunity to be scheduled."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If the scheduling fails for five consecutive times (e.g., no resources can be obtained, no suitable source or destination can be found, etc.), the priority will be lowered."}),"\n",(0,s.jsx)(n.li,{children:"If not scheduled for 30 minutes, priority will be raised."}),"\n",(0,s.jsx)(n.li,{children:"The priority of the same tablet task is adjusted at least five minutes apart."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"At the same time, in order to ensure the weight of the initial priority, we stipulate that the initial priority is VERY HIGH, and the lowest is lowered to NORMAL. When the initial priority is LOW, it is raised to HIGH at most. The priority adjustment here also adjusts the priority set manually by the user."}),"\n",(0,s.jsx)(n.h2,{id:"replicas-balance",children:"Replicas Balance"}),"\n",(0,s.jsx)(n.p,{children:"Doris automatically balances replicas within the cluster. Currently supports two rebalance strategies, BeLoad and Partition. BeLoad rebalance will consider about the disk usage and replica count for each BE. Partition rebalance just aim at replica count for each partition, this helps to avoid hot spots. If you want high read/write performance, you may need this. Note that Partition rebalance do not consider about the disk usage, pay more attention to it when you are using Partition rebalance. The strategy selection config is not mutable at runtime."}),"\n",(0,s.jsx)(n.h3,{id:"beload",children:"BeLoad"}),"\n",(0,s.jsx)(n.p,{children:"The main idea of balancing is to create a replica of some fragments on low-load nodes, and then delete the replicas of these fragments on high-load nodes. At the same time, because of the existence of different storage media, there may or may not exist one or two storage media on different BE nodes in the same cluster. We require that fragments of storage medium A be stored in storage medium A as far as possible after equalization. So we divide the BE nodes of the cluster according to the storage medium. Then load balancing scheduling is carried out for different BE node sets of storage media."}),"\n",(0,s.jsx)(n.p,{children:"Similarly, replica balancing ensures that a copy of the same table will not be deployed on the BE of the same host."}),"\n",(0,s.jsx)(n.h3,{id:"be-node-load",children:"BE Node Load"}),"\n",(0,s.jsxs)(n.p,{children:["We use Cluster LoadStatistics (CLS) to represent the load balancing of each backend in a cluster. Tablet Scheduler triggers cluster equilibrium based on this statistic. We currently calculate a load Score for each BE as the BE load score by using ",(0,s.jsx)(n.strong,{children:"disk usage"})," and ",(0,s.jsx)(n.strong,{children:"number of copies"}),". The higher the score, the heavier the load on the BE."]}),"\n",(0,s.jsxs)(n.p,{children:["Disk usage and number of copies have a weight factor, which is ",(0,s.jsx)(n.strong,{children:"capacityCoefficient"})," and ",(0,s.jsx)(n.strong,{children:"replicaNumCoefficient"}),", respectively. The sum of them is ",(0,s.jsx)(n.strong,{children:"constant to 1"}),". Among them, capacityCoefficient will dynamically adjust according to actual disk utilization. When the overall disk utilization of a BE is below 50%, the capacityCoefficient value is 0.5, and if the disk utilization is above 75% (configurable through the FE configuration item ",(0,s.jsx)(n.code,{children:"capacity_used_percent_high_water"}),"), the value is 1. If the utilization rate is between 50% and 75%, the weight coefficient increases smoothly. The formula is as follows:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"capacityCoefficient = 2 * Disk Utilization - 0.5"})}),"\n",(0,s.jsx)(n.p,{children:"The weight coefficient ensures that when disk utilization is too high, the backend load score will be higher to ensure that the BE load is reduced as soon as possible."}),"\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler updates CLS every 20 seconds."}),"\n",(0,s.jsx)(n.h3,{id:"partition",children:"Partition"}),"\n",(0,s.jsxs)(n.p,{children:["The main idea of ",(0,s.jsx)(n.code,{children:"partition rebalancing"})," is to decrease the skew of partitions. The skew of the partition is defined as the difference between the maximum replica count of the partition over all bes and the minimum replica count over all bes."]}),"\n",(0,s.jsx)(n.p,{children:"So we only consider about the replica count, do not consider replica size(disk usage).\nTo fewer moves, we use TwoDimensionalGreedyAlgo which two dims are cluster & partition. It prefers a move that reduce the skew of the cluster when we want to rebalance a max skew partition."}),"\n",(0,s.jsx)(n.h4,{id:"skew-info",children:"Skew Info"}),"\n",(0,s.jsxs)(n.p,{children:["The skew info is represented by ",(0,s.jsx)(n.code,{children:"ClusterBalanceInfo"}),". ",(0,s.jsx)(n.code,{children:"partitionInfoBySkew"})," is a multimap which key is the partition's skew, so we can get max skew partitions simply. ",(0,s.jsx)(n.code,{children:"beByTotalReplicaCount"})," is a multimap which key is the total replica count of the backend."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ClusterBalanceInfo"})," is in CLS, updated every 20 seconds."]}),"\n",(0,s.jsx)(n.p,{children:"When get more than one max skew partitions, we random select one partition to calculate the move."}),"\n",(0,s.jsx)(n.h3,{id:"equilibrium-strategy",children:"Equilibrium strategy"}),"\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler uses Load Balancer to select a certain number of healthy fragments as candidate fragments for balance in each round of scheduling. In the next scheduling, balanced scheduling will be attempted based on these candidate fragments."}),"\n",(0,s.jsx)(n.h2,{id:"resource-control",children:"Resource control"}),"\n",(0,s.jsxs)(n.p,{children:["Both replica repair and balancing are accomplished by replica copies between BEs. If the same BE performs too many tasks at the same time, it will bring a lot of IO pressure. Therefore, Doris controls the number of tasks that can be performed on each node during scheduling. The smallest resource control unit is the disk (that is, a data path specified in be.conf). By default, we configure two slots per disk for replica repair. A clone task occupies one slot at the source and one slot at the destination. If the number of slots is zero, no more tasks will be assigned to this disk. The number of slots can be configured by FE's ",(0,s.jsx)(n.code,{children:"schedule_slot_num_per_hdd_path"})," or ",(0,s.jsx)(n.code,{children:"schedule_slot_num_per_ssd_path"})," parameter."]}),"\n",(0,s.jsx)(n.p,{children:"In addition, by default, we provide two separate slots per disk for balancing tasks. The purpose is to prevent high-load nodes from losing space by balancing because slots are occupied by repair tasks."}),"\n",(0,s.jsx)(n.h2,{id:"tablet-state-view",children:"Tablet State View"}),"\n",(0,s.jsxs)(n.p,{children:["Tablet state view mainly looks at the state of the tablet, as well as the state of the tablet repair and balancing tasks. Most of these states ",(0,s.jsx)(n.strong,{children:"exist only in"})," Master FE nodes. Therefore, the following commands need to be executed directly to Master FE."]}),"\n",(0,s.jsx)(n.h3,{id:"tablet-state",children:"Tablet state"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Global state checking"}),"\n",(0,s.jsxs)(n.p,{children:["Through ",(0,s.jsx)(n.code,{children:"SHOW PROC'/cluster_health/tablet_health'; "}),"commands can view the replica status of the entire cluster."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+-------+--------------------------------+-----------+------------+-------------------+----------------------+----------------------+--------------+----------------------------+-------------------------+-------------------+---------------------+----------------------+----------------------+------------------+-----------------------------+-----------------+-------------+------------+\n| DbId  | DbName                         | TabletNum | HealthyNum | ReplicaMissingNum | VersionIncompleteNum | ReplicaRelocatingNum | RedundantNum | ReplicaMissingInClusterNum | ReplicaMissingForTagNum | ForceRedundantNum | ColocateMismatchNum | ColocateRedundantNum | NeedFurtherRepairNum | UnrecoverableNum | ReplicaCompactionTooSlowNum | InconsistentNum | OversizeNum | CloningNum |\n+-------+--------------------------------+-----------+------------+-------------------+----------------------+----------------------+--------------+----------------------------+-------------------------+-------------------+---------------------+----------------------+----------------------+------------------+-----------------------------+-----------------+-------------+------------+\n| 10005 | default_cluster:doris_audit_db | 84        | 84         | 0                 | 0                    | 0                    | 0            | 0                          | 0                       | 0                 | 0                   | 0                    | 0                    | 0                | 0                           | 0               | 0           | 0          |\n| 13402 | default_cluster:ssb1           | 709       | 708        | 1                 | 0                    | 0                    | 0            | 0                          | 0                       | 0                 | 0                   | 0                    | 0                    | 0                | 0                           | 0               | 0           | 0          |\n| 10108 | default_cluster:tpch1          | 278       | 278        | 0                 | 0                    | 0                    | 0            | 0                          | 0                       | 0                 | 0                   | 0                    | 0                    | 0                | 0                           | 0               | 0           | 0          |\n| Total | 3                              | 1071      | 1070       | 1                 | 0                    | 0                    | 0            | 0                          | 0                       | 0                 | 0                   | 0                    | 0                    | 0                | 0                           | 0               | 0           | 0          |\n+-------+--------------------------------+-----------+------------+-------------------+----------------------+----------------------+--------------+----------------------------+-------------------------+-------------------+---------------------+----------------------+----------------------+------------------+-----------------------------+-----------------+-------------+------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"HealthyNum"})," column shows how many Tablets are in a healthy state in the corresponding database. ",(0,s.jsx)(n.code,{children:"ReplicaCompactionTooSlowNum"})," column shows how many Tablets are in a too many versions state in the corresponding database, ",(0,s.jsx)(n.code,{children:"InconsistentNum"})," column shows how many Tablets are in an inconsistent replica state in the corresponding database. The last ",(0,s.jsx)(n.code,{children:"Total"})," line counts the entire cluster. Normally ",(0,s.jsx)(n.code,{children:"TabletNum"})," and ",(0,s.jsx)(n.code,{children:"HealthyNum"})," should be equal. If it's not equal, you can further see which Tablets are there. As shown in the figure above, one table in the ssb1 database is not healthy, you can use the following command to see which one is."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_health/tablet_health/13402';"})}),"\n",(0,s.jsxs)(n.p,{children:["Among them ",(0,s.jsx)(n.code,{children:"13402"})," is the corresponding DbId."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+-----------------------+--------------------------+--------------------------+------------------+--------------------------------+-----------------------------+-----------------------+-------------------------+--------------------------+--------------------------+----------------------+---------------------------------+---------------------+-----------------+\n| ReplicaMissingTablets | VersionIncompleteTablets | ReplicaRelocatingTablets | RedundantTablets | ReplicaMissingInClusterTablets | ReplicaMissingForTagTablets | ForceRedundantTablets | ColocateMismatchTablets | ColocateRedundantTablets | NeedFurtherRepairTablets | UnrecoverableTablets | ReplicaCompactionTooSlowTablets | InconsistentTablets | OversizeTablets |\n+-----------------------+--------------------------+--------------------------+------------------+--------------------------------+-----------------------------+-----------------------+-------------------------+--------------------------+--------------------------+----------------------+---------------------------------+---------------------+-----------------+\n| 14679                 |                          |                          |                  |                                |                             |                       |                         |                          |                          |                      |                                 |                     |                 |\n+-----------------------+--------------------------+--------------------------+------------------+--------------------------------+-----------------------------+-----------------------+-------------------------+--------------------------+--------------------------+----------------------+---------------------------------+---------------------+-----------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"The figure above shows the specific unhealthy Tablet ID (14679). Later we'll show you how to view the status of each copy of a specific Tablet."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Table (partition) level status checking"}),"\n",(0,s.jsx)(n.p,{children:"Users can view the status of a copy of a specified table or partition through the following commands and filter the status through a WHERE statement. If you look at table tbl1, the state on partitions P1 and P2 is a copy of OK:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'SHOW REPLICA STATUS FROM tbl1 PARTITION (p1, p2) WHERE STATUS = "OK";'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+----------+-----------+-----------+---------+-------------------+--------------------+------------------+------------+------------+-------+--------+--------+\n| TabletId | ReplicaId | BackendId | Version | LastFailedVersion | LastSuccessVersion | CommittedVersion | SchemaHash | VersionNum | IsBad | State  | Status |\n+----------+-----------+-----------+---------+-------------------+--------------------+------------------+------------+------------+-------+--------+--------+\n| 29502429 | 29502432  | 10006     | 2       | -1                | 2                  | 1                | -1         | 2          | false | NORMAL | OK     |\n| 29502429 | 36885996  | 10002     | 2       | -1                | -1                 | 1                | -1         | 2          | false | NORMAL | OK     |\n| 29502429 | 48100551  | 10007     | 2       | -1                | -1                 | 1                | -1         | 2          | false | NORMAL | OK     |\n| 29502433 | 29502434  | 10001     | 2       | -1                | 2                  | 1                | -1         | 2          | false | NORMAL | OK     |\n| 29502433 | 44900737  | 10004     | 2       | -1                | -1                 | 1                | -1         | 2          | false | NORMAL | OK     |\n| 29502433 | 48369135  | 10006     | 2       | -1                | -1                 | 1                | -1         | 2          | false | NORMAL | OK     |\n+----------+-----------+-----------+---------+-------------------+--------------------+------------------+------------+------------+-------+--------+--------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The status of all copies is shown here. Where ",(0,s.jsx)(n.code,{children:"IsBad"})," is listed as ",(0,s.jsx)(n.code,{children:"true"}),", the copy is damaged. The ",(0,s.jsx)(n.code,{children:"Status"})," column displays other states. Specific status description, you can see help through ",(0,s.jsx)(n.code,{children:"HELP SHOW REPLICA STATUS"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"The SHOW REPLICA STATUS"}),"command is mainly used to view the health status of copies. Users can also view additional information about copies of a specified table by using the following commands:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW TABLETS FROM tbl1;"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+----------+-----------+-----------+------------+---------+-------------+-------------------+-----------------------+------------------+----------------------+---------------+----------+----------+--------+-------------------------+--------------+----------------------+--------------+----------------------+----------------------+----------------------+\n| TabletId | ReplicaId | BackendId | SchemaHash | Version | VersionHash | LstSuccessVersion | LstSuccessVersionHash | LstFailedVersion | LstFailedVersionHash | LstFailedTime | DataSize | RowCount | State  | LstConsistencyCheckTime | CheckVersion | 	CheckVersionHash | VersionCount | PathHash             | MetaUrl              | CompactionStatus     |\n+----------+-----------+-----------+------------+---------+-------------+-------------------+-----------------------+------------------+----------------------+---------------+----------+----------+--------+-------------------------+--------------+----------------------+--------------+----------------------+----------------------+----------------------+\n| 29502429 | 29502432  | 10006     | 1421156361 | 2       | 0           | 2                 | 0                     | -1               | 0                    | N/A           | 784      | 0        | NORMAL | N/A                     | -1           | 	-1               | 2            | -5822326203532286804 | url                  | url                  |\n| 29502429 | 36885996  | 10002     | 1421156361 | 2       | 0           | -1                | 0                     | -1               | 0                    | N/A           | 784      | 0        | NORMAL | N/A                     | -1           | 	-1               | 2            | -1441285706148429853 | url                  | url                  |\n| 29502429 | 48100551  | 10007     | 1421156361 | 2       | 0           | -1                | 0                     | -1               | 0                    | N/A           | 784      | 0        | NORMAL | N/A                     | -1           | 	-1               | 2            | -4784691547051455525 | url                  | url                  |\n+----------+-----------+-----------+------------+---------+-------------+-------------------+-----------------------+------------------+----------------------+---------------+----------+----------+--------+-------------------------+--------------+----------------------+--------------+----------------------+----------------------+----------------------+  \n"})}),"\n",(0,s.jsx)(n.p,{children:"The figure above shows some additional information, including copy size, number of rows, number of versions, where the data path is located."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note: The contents of the ",(0,s.jsx)(n.code,{children:"State"})," column shown here do not represent the health status of the replica, but the status of the replica under certain tasks, such as CLONE, SCHEMA CHANGE, ROLLUP, etc."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In addition, users can check the distribution of replicas in a specified table or partition by following commands."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW REPLICA DISTRIBUTION FROM tbl1;"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+-----------+------------+-------+---------+\n| BackendId | ReplicaNum | Graph | Percent |\n+-----------+------------+-------+---------+\n| 10000     | 7          |       | 7.29 %  |\n| 10001     | 9          |       | 9.38 %  |\n| 10002     | 7          |       | 7.29 %  |\n| 10003     | 7          |       | 7.29 %  |\n| 10004     | 9          |       | 9.38 %  |\n| 10005     | 11         | >     | 11.46 % |\n| 10006     | 18         | >     | 18.75 % |\n| 10007     | 15         | >     | 15.62 % |\n| 10008     | 13         | >     | 13.54 % |\n+-----------+------------+-------+---------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here we show the number and percentage of replicas of table tbl1 on each BE node, as well as a simple graphical display."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Tablet level status checking"}),"\n",(0,s.jsx)(n.p,{children:"When we want to locate a specific Tablet, we can use the following command to view the status of a specific Tablet. For example, check the tablet with ID 2950253:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW TABLET 29502553;"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+------------------------+-----------+---------------+-----------+----------+----------+-------------+----------+--------+---------------------------------------------------------------------------+\n| DbName                 | TableName | PartitionName | IndexName | DbId     | TableId  | PartitionId | IndexId  | IsSync | DetailCmd                                                                 |\n+------------------------+-----------+---------------+-----------+----------+----------+-------------+----------+--------+---------------------------------------------------------------------------+\n| default_cluster:test   | test      | test          | test      | 29502391 | 29502428 | 29502427    | 29502428 | true   | SHOW PROC '/dbs/29502391/29502428/partitions/29502427/29502428/29502553'; |\n+------------------------+-----------+---------------+-----------+----------+----------+-------------+----------+--------+---------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The figure above shows the database, tables, partitions, roll-up tables and other information corresponding to this tablet. The user can copy the command in the ",(0,s.jsx)(n.code,{children:"DetailCmd"})," command to continue executing:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Show Proc'/DBS/29502391/29502428/Partitions/29502427/29502428/29502553;"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+-----------+-----------+---------+-------------+-------------------+-----------------------+------------------+----------------------+---------------+------------+----------+----------+--------+-------+--------------+----------------------+\n| ReplicaId | BackendId | Version | VersionHash | LstSuccessVersion | LstSuccessVersionHash | LstFailedVersion | LstFailedVersionHash | LstFailedTime | SchemaHash | DataSize | RowCount | State  | IsBad | VersionCount | PathHash             |\n+-----------+-----------+---------+-------------+-------------------+-----------------------+------------------+----------------------+---------------+------------+----------+----------+--------+-------+--------------+----------------------+\n| 43734060  | 10004     | 2       | 0           | -1                | 0                     | -1               | 0                    | N/A           | -1         | 784      | 0        | NORMAL | false | 2            | -8566523878520798656 |\n| 29502555  | 10002     | 2       | 0           | 2                 | 0                     | -1               | 0                    | N/A           | -1         | 784      | 0        | NORMAL | false | 2            | 1885826196444191611  |\n| 39279319  | 10007     | 2       | 0           | -1                | 0                     | -1               | 0                    | N/A           | -1         | 784      | 0        | NORMAL | false | 2            | 1656508631294397870  |\n+-----------+-----------+---------+-------------+-------------------+-----------------------+------------------+----------------------+---------------+------------+----------+----------+--------+-------+--------------+----------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The figure above shows all replicas of the corresponding Tablet. The content shown here is the same as ",(0,s.jsx)(n.code,{children:"SHOW TABLETS FROM tbl1;"}),". But here you can clearly see the status of all copies of a specific Tablet."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"duplicate-scheduling-task",children:"Duplicate Scheduling Task"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"View tasks waiting to be scheduled"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/pending_tablets';"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+----------+--------+-----------------+---------+----------+----------+-------+---------+--------+----------+---------+---------------------+---------------------+---------------------+----------+------+-------------+---------------+---------------------+------------+---------------------+--------+---------------------+-------------------------------+\n| TabletId | Type   | Status          | State   | OrigPrio | DynmPrio | SrcBe | SrcPath | DestBe | DestPath | Timeout | Create              | LstSched            | LstVisit            | Finished | Rate | FailedSched | FailedRunning | LstAdjPrio          | VisibleVer | VisibleVerHash      | CmtVer | CmtVerHash          | ErrMsg                        |\n+----------+--------+-----------------+---------+----------+----------+-------+---------+--------+----------+---------+---------------------+---------------------+---------------------+----------+------+-------------+---------------+---------------------+------------+---------------------+--------+---------------------+-------------------------------+\n| 4203036  | REPAIR | REPLICA_MISSING | PENDING | HIGH     | LOW      | -1    | -1      | -1     | -1       | 0       | 2019-02-21 15:00:20 | 2019-02-24 11:18:41 | 2019-02-24 11:18:41 | N/A      | N/A  | 2           | 0             | 2019-02-21 15:00:43 | 1          | 0                   | 2      | 0                   | unable to find source replica |\n+----------+--------+-----------------+---------+----------+----------+-------+---------+--------+----------+---------+---------------------+---------------------+---------------------+----------+------+-------------+---------------+---------------------+------------+---------------------+--------+---------------------+-------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"The specific meanings of each column are as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"TabletId: The ID of the Tablet waiting to be scheduled. A scheduling task is for only one Tablet"}),"\n",(0,s.jsx)(n.li,{children:"Type: Task type, which can be REPAIR (repair) or BALANCE (balance)"}),"\n",(0,s.jsx)(n.li,{children:"Status: The current status of the Tablet, such as REPLICA_MISSING (copy missing)"}),"\n",(0,s.jsx)(n.li,{children:"State: The status of the scheduling task may be PENDING/RUNNING/FINISHED/CANCELLED/TIMEOUT/UNEXPECTED"}),"\n",(0,s.jsx)(n.li,{children:"OrigPrio: Initial Priority"}),"\n",(0,s.jsx)(n.li,{children:"DynmPrio: Current dynamically adjusted priority"}),"\n",(0,s.jsx)(n.li,{children:"SrcBe: ID of the BE node at the source end"}),"\n",(0,s.jsx)(n.li,{children:"SrcPath: hash value of the path of the BE node at the source end"}),"\n",(0,s.jsx)(n.li,{children:"DestBe: ID of destination BE node"}),"\n",(0,s.jsx)(n.li,{children:"DestPath: hash value of the path of the destination BE node"}),"\n",(0,s.jsx)(n.li,{children:"Timeout: When the task is scheduled successfully, the timeout time of the task is displayed here in units of seconds."}),"\n",(0,s.jsx)(n.li,{children:"Create: The time when the task was created"}),"\n",(0,s.jsx)(n.li,{children:"LstSched: The last time a task was scheduled"}),"\n",(0,s.jsx)(n.li,{children:'LstVisit: The last time a task was accessed. Here "accessed" refers to the processing time points associated with the task, including scheduling, task execution reporting, and so on.'}),"\n",(0,s.jsx)(n.li,{children:"Finished: Task End Time"}),"\n",(0,s.jsx)(n.li,{children:"Rate: Clone Task Data Copy Rate"}),"\n",(0,s.jsx)(n.li,{children:"Failed Sched: Number of Task Scheduling Failures"}),"\n",(0,s.jsx)(n.li,{children:"Failed Running: Number of task execution failures"}),"\n",(0,s.jsx)(n.li,{children:"LstAdjPrio: Time of last priority adjustment"}),"\n",(0,s.jsx)(n.li,{children:"CmtVer/CmtVerHash/VisibleVer/VisibleVerHash: version information for clone tasks"}),"\n",(0,s.jsx)(n.li,{children:"ErrMsg: Error messages that occur when tasks are scheduled and run"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"View running tasks"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/running_tablets';"})}),"\n",(0,s.jsxs)(n.p,{children:["The columns in the result have the same meaning as ",(0,s.jsx)(n.code,{children:"pending_tablets"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"View completed tasks"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/history_tablets';"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, we reserve only the last 1,000 completed tasks. The columns in the result have the same meaning as ",(0,s.jsx)(n.code,{children:"pending_tablets"}),". If ",(0,s.jsx)(n.code,{children:"State"})," is listed as ",(0,s.jsx)(n.code,{children:"FINISHED"}),", the task is normally completed. For others, you can see the specific reason based on the error information in the ",(0,s.jsx)(n.code,{children:"ErrMsg"})," column."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"viewing-cluster-load-and-scheduling-resources",children:"Viewing Cluster Load and Scheduling Resources"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Cluster load"}),"\n",(0,s.jsx)(n.p,{children:"You can view the current load of the cluster by following commands:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/cluster_load_stat/location_default';"})}),"\n",(0,s.jsx)(n.p,{children:"First of all, we can see the division of different storage media:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+---------------+\n| StorageMedium |\n+---------------+\n| HDD           |\n| SSD           |\n+---------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Click on a storage medium to see the equilibrium state of the BE node that contains the storage medium:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/cluster_load_stat/location_default/HDD';"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+----------+-----------------+-----------+---------------+----------------+-------------+------------+----------+-----------+--------------------+-------+\n| BeId     | Cluster         | Available | UsedCapacity  | Capacity       | UsedPercent | ReplicaNum | CapCoeff | ReplCoeff | Score              | Class |\n+----------+-----------------+-----------+---------------+----------------+-------------+------------+----------+-----------+--------------------+-------+\n| 10003    | default_cluster | true      | 3477875259079 | 19377459077121 | 17.948      | 493477     | 0.5      | 0.5       | 0.9284678149967587 | MID   |\n| 10002    | default_cluster | true      | 3607326225443 | 19377459077121 | 18.616      | 496928     | 0.5      | 0.5       | 0.948660871419998  | MID   |\n| 10005    | default_cluster | true      | 3523518578241 | 19377459077121 | 18.184      | 545331     | 0.5      | 0.5       | 0.9843539990641831 | MID   |\n| 10001    | default_cluster | true      | 3535547090016 | 19377459077121 | 18.246      | 558067     | 0.5      | 0.5       | 0.9981869446537612 | MID   |\n| 10006    | default_cluster | true      | 3636050364835 | 19377459077121 | 18.764      | 547543     | 0.5      | 0.5       | 1.0011489897614072 | MID   |\n| 10004    | default_cluster | true      | 3506558163744 | 15501967261697 | 22.620      | 468957     | 0.5      | 0.5       | 1.0228319835582569 | MID   |\n| 10007    | default_cluster | true      | 4036460478905 | 19377459077121 | 20.831      | 551645     | 0.5      | 0.5       | 1.057279369420761  | MID   |\n| 10000    | default_cluster | true      | 4369719923760 | 19377459077121 | 22.551      | 547175     | 0.5      | 0.5       | 1.0964036415787461 | MID   |\n+----------+-----------------+-----------+---------------+----------------+-------------+------------+----------+-----------+--------------------+-------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Some of these columns have the following meanings:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Available: True means that BE heartbeat is normal and not offline."}),"\n",(0,s.jsx)(n.li,{children:"UsedCapacity: Bytes, the size of disk space used on BE"}),"\n",(0,s.jsx)(n.li,{children:"Capacity: Bytes, the total disk space size on BE"}),"\n",(0,s.jsx)(n.li,{children:"UsedPercent: Percentage, disk space utilization on BE"}),"\n",(0,s.jsx)(n.li,{children:"ReplicaNum: Number of copies on BE"}),"\n",(0,s.jsx)(n.li,{children:"CapCoeff/ReplCoeff: Weight Coefficient of Disk Space and Copy Number"}),"\n",(0,s.jsx)(n.li,{children:"Score: Load score. The higher the score, the heavier the load."}),"\n",(0,s.jsx)(n.li,{children:"Class: Classified by load, LOW/MID/HIGH. Balanced scheduling moves copies from high-load nodes to low-load nodes"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Users can further view the utilization of each path on a BE, such as the BE with ID 10001:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/cluster_load_stat/location_default/HDD/10001';"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+------------------+------------------+---------------+---------------+---------+--------+----------------------+\n| RootPath         | DataUsedCapacity | AvailCapacity | TotalCapacity | UsedPct | State  | PathHash             |\n+------------------+------------------+---------------+---------------+---------+--------+----------------------+\n| /home/disk4/palo | 498.757 GB       | 3.033 TB      | 3.525 TB      | 13.94 % | ONLINE | 4883406271918338267  |\n| /home/disk3/palo | 704.200 GB       | 2.832 TB      | 3.525 TB      | 19.65 % | ONLINE | -5467083960906519443 |\n| /home/disk1/palo | 512.833 GB       | 3.007 TB      | 3.525 TB      | 14.69 % | ONLINE | -7733211489989964053 |\n| /home/disk2/palo | 881.955 GB       | 2.656 TB      | 3.525 TB      | 24.65 % | ONLINE | 4870995507205544622  |\n| /home/disk5/palo | 694.992 GB       | 2.842 TB      | 3.525 TB      | 19.36 % | ONLINE | 1916696897889786739  |\n+------------------+------------------+---------------+---------------+---------+--------+----------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"The disk usage of each data path on the specified BE is shown here."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Scheduling resources"}),"\n",(0,s.jsx)(n.p,{children:"Users can view the current slot usage of each node through the following commands:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/working_slots';"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+----------+----------------------+------------+------------+-------------+----------------------+\n| BeId     | PathHash             | AvailSlots | TotalSlots | BalanceSlot | AvgRate              |\n+----------+----------------------+------------+------------+-------------+----------------------+\n| 10000    | 8110346074333016794  | 2          | 2          | 2           | 2.459007474009069E7  |\n| 10000    | -5617618290584731137 | 2          | 2          | 2           | 2.4730105014001578E7 |\n| 10001    | 4883406271918338267  | 2          | 2          | 2           | 1.6711402709780257E7 |\n| 10001    | -5467083960906519443 | 2          | 2          | 2           | 2.7540126380326536E7 |\n| 10002    | 9137404661108133814  | 2          | 2          | 2           | 2.417217089806745E7  |\n| 10002    | 1885826196444191611  | 2          | 2          | 2           | 1.6327378456676323E7 |\n+----------+----------------------+------------+------------+-------------+----------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this paper, data path is used as granularity to show the current use of slot. Among them, `AvgRate'is the copy rate of clone task in bytes/seconds on the path of historical statistics."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Priority repair view"}),"\n",(0,s.jsx)(n.p,{children:"The following command allows you to view the priority repaired tables or partitions set by the `ADMIN REPAIR TABLE'command."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/priority_repair';"})}),"\n",(0,s.jsx)(n.p,{children:"Among them, `Remaining TimeMs'indicates that these priority fixes will be automatically removed from the priority fix queue after this time. In order to prevent resources from being occupied due to the failure of priority repair."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"scheduler-statistical-status-view",children:"Scheduler Statistical Status View"}),"\n",(0,s.jsx)(n.p,{children:"We have collected some statistics of Tablet Checker and Tablet Scheduler during their operation, which can be viewed through the following commands:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SHOW PROC '/cluster_balance/sched_stat';"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+---------------------------------------------------+-------------+\n| Item                                              | Value       |\n+---------------------------------------------------+-------------+\n| num of tablet check round                         | 12041       |\n| cost of tablet check(ms)                          | 7162342     |\n| num of tablet checked in tablet checker           | 18793506362 |\n| num of unhealthy tablet checked in tablet checker | 7043900     |\n| num of tablet being added to tablet scheduler     | 1153        |\n| num of tablet schedule round                      | 49538       |\n| cost of tablet schedule(ms)                       | 49822       |\n| num of tablet being scheduled                     | 4356200     |\n| num of tablet being scheduled succeeded           | 320         |\n| num of tablet being scheduled failed              | 4355594     |\n| num of tablet being scheduled discard             | 286         |\n| num of tablet priority upgraded                   | 0           |\n| num of tablet priority downgraded                 | 1096        |\n| num of clone task                                 | 230         |\n| num of clone task succeeded                       | 228         |\n| num of clone task failed                          | 2           |\n| num of clone task timeout                         | 2           |\n| num of replica missing error                      | 4354857     |\n| num of replica version missing error              | 967         |\n| num of replica relocating                         | 0           |\n| num of replica redundant error                    | 90          |\n| num of replica missing in cluster error           | 0           |\n| num of balance scheduled                          | 0           |\n+---------------------------------------------------+-------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"The meanings of each line are as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet check round: Number of Tablet Checker inspections"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"cost of tablet check(ms): Total time consumed by Tablet Checker inspections (milliseconds)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet checked in tablet checker: Number of tablets checked by the Tablet Checker"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of unhealthy tablet checked in tablet checker: Number of unhealthy tablets checked by the Tablet Checker"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet being added to tablet scheduler: Number of tablets submitted to the Tablet Scheduler"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet schedule round: Number of Tablet Scheduler runs"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"cost of tablet schedule(ms): Total time consumed by Tablet Scheduler runs (milliseconds)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet being scheduled: Total number of tablets scheduled"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet being scheduled succeeded: Total number of tablets successfully scheduled"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet being scheduled failed: Total number of tablets that failed scheduling"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet being scheduled discard: Total number of tablets discarded due to scheduling failures"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet priority upgraded: Number of tablet priority upgrades"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of tablet priority downgraded: Number of tablet priority downgrades"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of clone task: Number of clone tasks generated"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of clone task succeeded: Number of successful clone tasks"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of clone task failed: Number of failed clone tasks"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of clone task timeout: Number of clone tasks that timed out"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of replica missing error: Number of tablets whose status is checked as missing replicas"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of replica version missing error: Number of tablets checked with missing version status (this statistic includes num of replica relocating and num of replica missing in cluster error)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of replica relocation: Number of replica relocations"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of replica redundant error: Number of tablets whose checked status is replica redundant"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of replica missing in cluster error: Number of tablets checked with a status indicating they are missing from the corresponding cluster"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"num of balance scheduled: Number of balanced scheduling attempts"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Note",type:"info",children:(0,s.jsx)(n.p,{children:"The above states are only historical accumulative values. We also print these statistics regularly in the FE logs, where the values in parentheses represent the number of changes in each statistical value since the last printing dependence of the statistical information."})}),"\n",(0,s.jsx)(n.h2,{id:"relevant-configuration-instructions",children:"Relevant configuration instructions"}),"\n",(0,s.jsx)(n.h3,{id:"adjustable-parameters",children:"Adjustable parameters"}),"\n",(0,s.jsx)(n.p,{children:"The following adjustable parameters are all configurable parameters in fe.conf."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"use_new_tablet_scheduler"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Description: Whether to enable the new replica scheduling mode. The new replica scheduling method is the replica scheduling method introduced in this document. If turned on, ",(0,s.jsx)(n.code,{children:"disable_colocate_join"})," must be ",(0,s.jsx)(n.code,{children:"true"}),". Because the new scheduling strategy does not support data fragmentation scheduling of co-location tables for the time being."]}),"\n",(0,s.jsx)(n.li,{children:"Default value:true"}),"\n",(0,s.jsx)(n.li,{children:"Importance: High"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"tablet_repair_delay_factor_second"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Note: For different scheduling priorities, we will delay different time to start repairing. In order to prevent a large number of unnecessary replica repair tasks from occurring in the process of routine restart and upgrade. This parameter is a reference coefficient. For HIGH priority, the delay is the reference coefficient * 1; for NORMAL priority, the delay is the reference coefficient * 2; for LOW priority, the delay is the reference coefficient * 3. That is, the lower the priority, the longer the delay waiting time. If the user wants to repair the copy as soon as possible, this parameter can be reduced appropriately."}),"\n",(0,s.jsx)(n.li,{children:"Default value: 60 seconds"}),"\n",(0,s.jsx)(n.li,{children:"Importance: High"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"schedule_slot_num_per_path"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Note: The default number of slots allocated to each disk for replica repair. This number represents the number of replica repair tasks that a disk can run simultaneously. If you want to repair the copy faster, you can adjust this parameter appropriately. The higher the single value, the greater the impact on IO."}),"\n",(0,s.jsx)(n.li,{children:"Default value: 2"}),"\n",(0,s.jsx)(n.li,{children:"Importance: High"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"balance_load_score_threshold"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Description: Threshold of Cluster Equilibrium. The default is 0.1, or 10%. When the load core of a BE node is not higher than or less than 10% of the average load core, we think that the node is balanced. If you want to make the cluster load more even, you can adjust this parameter appropriately."}),"\n",(0,s.jsx)(n.li,{children:"Default value: 0.1"}),"\n",(0,s.jsx)(n.li,{children:"Importance:"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"storage_high_watermark_usage_percent \u548C storage_min_left_capacity_bytes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Description: These two parameters represent the upper limit of the maximum space utilization of a disk and the lower limit of the minimum space remaining, respectively. When the space utilization of a disk is greater than the upper limit or the remaining space is less than the lower limit, the disk will no longer be used as the destination address for balanced scheduling."}),"\n",(0,s.jsx)(n.li,{children:"Default values: 0.85 and 2097152000 (2GB)"}),"\n",(0,s.jsx)(n.li,{children:"Importance:"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"disable_balance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Description: Control whether to turn off the balancing function. When replicas are in equilibrium, some functions, such as ALTER TABLE, will be banned. Equilibrium can last for a long time. Therefore, if the user wants to do the prohibited operation as soon as possible. This parameter can be set to true to turn off balanced scheduling."}),"\n",(0,s.jsx)(n.li,{children:"Default value: false"}),"\n",(0,s.jsx)(n.li,{children:"Importance:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The following adjustable parameters are all configurable parameters in be.conf."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"clone_worker_count"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Description: Affects the speed of copy equalization. In the case of low disk pressure, you can speed up replica balancing by adjusting this parameter."}),"\n",(0,s.jsx)(n.li,{children:"Default: 3"}),"\n",(0,s.jsx)(n.li,{children:"Importance: Medium"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"unadjustable-parameters",children:"Unadjustable parameters"}),"\n",(0,s.jsx)(n.p,{children:"The following parameters do not support modification for the time being, just for illustration."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Tablet Checker scheduling interval"}),"\n",(0,s.jsx)(n.p,{children:"Tablet Checker schedules checks every 20 seconds."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler scheduling interval"}),"\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler schedules every five seconds"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Number of Tablet Scheduler Schedules per Batch"}),"\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler schedules up to 50 tablets at a time."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler Maximum Waiting Schedule and Number of Tasks in Operation"}),"\n",(0,s.jsx)(n.p,{children:"The maximum number of waiting tasks and running tasks is 2000. When over 2000, Tablet Checker will no longer generate new scheduling tasks to Tablet Scheduler."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler Maximum Balanced Task Number"}),"\n",(0,s.jsx)(n.p,{children:"The maximum number of balanced tasks is 500. When more than 500, there will be no new balancing tasks."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Number of slots per disk for balancing tasks"}),"\n",(0,s.jsx)(n.p,{children:"The number of slots per disk for balancing tasks is 2. This slot is independent of the slot used for replica repair."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Update interval of cluster equilibrium"}),"\n",(0,s.jsx)(n.p,{children:"Tablet Scheduler recalculates the load score of the cluster every 20 seconds."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Minimum and Maximum Timeout for Clone Tasks"}),"\n",(0,s.jsx)(n.p,{children:"A clone task timeout time range is 3 minutes to 2 hours. The specific timeout is calculated by the size of the tablet. The formula is (tablet size)/ (5MB/s). When a clone task fails three times, the task terminates."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Dynamic Priority Adjustment Strategy"}),"\n",(0,s.jsx)(n.p,{children:"The minimum priority adjustment interval is 5 minutes. When a tablet schedule fails five times, priority is lowered. When a tablet is not scheduled for 30 minutes, priority is raised."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"relevant-issues",children:"Relevant issues"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In some cases, the default replica repair and balancing strategy may cause the network to be full (mostly in the case of gigabit network cards and a large number of disks per BE). At this point, some parameters need to be adjusted to reduce the number of simultaneous balancing and repair tasks."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Current balancing strategies for copies of Colocate Table do not guarantee that copies of the same Tablet will not be distributed on the BE of the same host. However, the repair strategy of the copy of Colocate Table detects this distribution error and corrects it. However, it may occur that after correction, the balancing strategy regards the replicas as unbalanced and rebalances them. As a result, the Colocate Group cannot achieve stability because of the continuous alternation between the two states. In view of this situation, we suggest that when using Colocate attribute, we try to ensure that the cluster is isomorphic, so as to reduce the probability that replicas are distributed on the same host."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"control-and-manage-the-progress-of-replica-repair-and-balancing-of-clusters",children:"Control and manage the progress of replica repair and balancing of clusters"}),"\n",(0,s.jsx)(n.p,{children:"In most cases, Doris can automatically perform replica repair and cluster balancing by default parameter configuration. However, in some cases, we need to manually intervene to adjust the parameters to achieve some special purposes. Such as prioritizing the repair of a table or partition, disabling cluster balancing to reduce cluster load, prioritizing the repair of non-colocation table data, and so on."}),"\n",(0,s.jsx)(n.p,{children:"This section describes how to control and manage the progress of replica repair and balancing of the cluster by modifying the parameters."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Deleting Corrupt Replicas"}),"\n",(0,s.jsx)(n.p,{children:"In some cases, Doris may not be able to automatically detect some corrupt replicas, resulting in frequent query or import errors on the corrupt replicas. In this case, we need to delete the corrupted copies manually. This method can be used to: delete a copy with a high version number resulting in a -235 error, delete a corrupted copy of a file, etc."}),"\n",(0,s.jsxs)(n.p,{children:["First, find the tablet id of the corresponding copy, let's say 10001, and use ",(0,s.jsx)(n.code,{children:"show tablet 10001;"})," and execute the ",(0,s.jsx)(n.code,{children:"show proc"})," statement to see the details of each copy of the corresponding tablet."]}),"\n",(0,s.jsxs)(n.p,{children:["Assuming that the backend id of the copy to be deleted is 20001, the following statement is executed to mark the copy as ",(0,s.jsx)(n.code,{children:"bad"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ADMIN SET REPLICA STATUS PROPERTIES("tablet_id" = "10001", "backend_id" = "20001", "status" = "bad");\n'})}),"\n",(0,s.jsxs)(n.p,{children:["At this point, the ",(0,s.jsx)(n.code,{children:"show proc"})," statement again shows that the ",(0,s.jsx)(n.code,{children:"IsBad"})," column of the corresponding copy has a value of ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The replica marked as ",(0,s.jsx)(n.code,{children:"bad"})," will no longer participate in imports and queries. The replica repair logic will automatically replenish a new replica at the same time. 2."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"prioritize repairing a table or partition"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"help admin repair table;"})," View help. This command attempts to repair the tablet of the specified table or partition as a priority."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Stop the balancing task"}),"\n",(0,s.jsx)(n.p,{children:"The balancing task will take up some network bandwidth and IO resources. If you wish to stop the generation of new balancing tasks, you can do so with the following command."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ADMIN SET FRONTEND CONFIG ("disable_balance" = "true");\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Stop all replica scheduling tasks"}),"\n",(0,s.jsx)(n.p,{children:"Copy scheduling tasks include balancing and repair tasks. These tasks take up some network bandwidth and IO resources. All replica scheduling tasks (excluding those already running, including colocation tables and common tables) can be stopped with the following command."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ADMIN SET FRONTEND CONFIG ("disable_tablet_scheduler" = "true");\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Stop the copy scheduling task for all colocation tables."}),"\n",(0,s.jsx)(n.p,{children:"The colocation table copy scheduling is run separately and independently from the regular table. In some cases, users may wish to stop the balancing and repair of colocation tables first and use the cluster resources for normal table repair with the following command."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ADMIN SET FRONTEND CONFIG ("disable_colocate_balance" = "true");\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Repair replicas using a more conservative strategy"}),"\n",(0,s.jsx)(n.p,{children:"Doris automatically repairs replicas when it detects missing replicas, BE downtime, etc. However, in order to reduce some errors caused by jitter (e.g., BE being down briefly), Doris delays triggering these tasks."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"tablet_repair_delay_factor_second"})," parameter. Default 60 seconds. Depending on the priority of the repair task, it will delay triggering the repair task for 60 seconds, 120 seconds, or 180 seconds. This time can be extended so that longer exceptions can be tolerated to avoid triggering unnecessary repair tasks by using the following command."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ADMIN SET FRONTEND CONFIG ("tablet_repair_delay_factor_second" = "120");\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"use a more conservative strategy to trigger redistribution of colocation groups"}),"\n",(0,s.jsxs)(n.p,{children:["Redistribution of colocation groups may be accompanied by a large number of tablet migrations. ",(0,s.jsx)(n.code,{children:"colocate_group_relocate_delay_second"})," is used to control the redistribution trigger delay. The default is 1800 seconds. If a BE node is likely to be offline for a long time, you can try to increase this parameter to avoid unnecessary redistribution by."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ADMIN SET FRONTEND CONFIG ("colocate_group_relocate_delay_second" = "3600");\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Faster Replica Balancing"}),"\n",(0,s.jsx)(n.p,{children:"Doris' replica balancing logic adds a normal replica first and then deletes the old one for the purpose of replica migration. When deleting the old replica, Doris waits for the completion of the import task that has already started on this replica to avoid the balancing task from affecting the import task. However, this will slow down the execution speed of the balancing logic. In this case, you can make Doris ignore this wait and delete the old replica directly by modifying the following parameters."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ADMIN SET FRONTEND CONFIG ("enable_force_drop_redundant_replica" = "true");\n'})}),"\n",(0,s.jsx)(n.p,{children:"This operation may cause some import tasks to fail during balancing (requiring a retry), but it will speed up balancing significantly."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Overall, when we need to bring the cluster back to a normal state quickly, consider handling it along the following lines."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"find the tablet that is causing the highly optimal task to report an error and set the problematic copy to bad."}),"\n",(0,s.jsxs)(n.li,{children:["repair some tables with the ",(0,s.jsx)(n.code,{children:"admin repair"})," statement."]}),"\n",(0,s.jsx)(n.li,{children:"Stop the replica balancing logic to avoid taking up cluster resources, and then turn it on again after the cluster is restored."}),"\n",(0,s.jsx)(n.li,{children:"Use a more conservative strategy to trigger repair tasks to deal with the avalanche effect caused by frequent BE downtime."}),"\n",(0,s.jsx)(n.li,{children:"Turn off scheduling tasks for colocation tables on-demand and focus cluster resources on repairing other high-optimality data."}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return r}});var i=t(667294);let s={},a=i.createContext(s);function r(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);