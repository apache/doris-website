"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["162403"],{403486:function(e,n,t){t.r(n),t.d(n,{default:()=>d,frontMatter:()=>l,metadata:()=>r,assets:()=>i,toc:()=>o,contentTitle:()=>c});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/string-functions/regexp-extract-all","title":"REGEXP_EXTRACT_ALL","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/string-functions/regexp-extract-all.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/string-functions","slug":"/sql-manual/sql-functions/scalar-functions/string-functions/regexp-extract-all","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp-extract-all","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"REGEXP_EXTRACT_ALL","language":"en"},"sidebar":"docs","previous":{"title":"REGEXP_EXTRACT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp-extract"},"next":{"title":"REGEXP_EXTRACT_OR_NULL","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp-extract-or-null"}}'),a=t("785893"),s=t("250065");let l={title:"REGEXP_EXTRACT_ALL",language:"en"},c=void 0,i={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function h(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",str:"str",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"REGEXP_EXTRACT_ALL"})," function is used to perform a regular expression match on a given string ",(0,a.jsx)(n.code,{children:"str"})," and extract all the parts that match the first sub - pattern of the specified ",(0,a.jsx)(n.code,{children:"pattern"}),". For the function to return an array of strings representing the matched parts of the pattern, the pattern must exactly match a portion of the input string ",(0,a.jsx)(n.code,{children:"str"}),". If there is no match, or if the pattern does not contain any sub - patterns, an empty string is returned."]}),"\n",(0,a.jsx)(n.p,{children:"It should be noted that when handling character set matching, Utf-8 standard character classes should be used.  This ensures that functions can correctly identify and process various characters from different languages."}),"\n",(0,a.jsx)(n.p,{children:"If the 'pattern' is not allowed regexp regular, throw error;"}),"\n",(0,a.jsxs)(n.p,{children:["Support character match classes : ",(0,a.jsx)(n.a,{href:"https://github.com/google/re2/wiki/Syntax",children:"https://github.com/google/re2/wiki/Syntax"})]}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"REGEXP_EXTRACT_ALL(<str>, <pattern>)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"<str>"})}),(0,a.jsx)(n.td,{children:"This parameter is of type String. It represents the input string on which the regular expression matching will be performed. This can be a literal string value or a reference to a column in a table that contains string data."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"<pattern>"})}),(0,a.jsxs)(n.td,{children:["This parameter is also of type String. It specifies the regular expression pattern that will be used to match against the input string ",(0,a.jsx)(n.str,{children:". The pattern can include various regular expression constructs such as character classes, quantifiers, and sub - patterns."})]})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"return-value",children:"Return value"}),"\n",(0,a.jsx)(n.p,{children:"The function returns an array of strings that represent the parts of the input string that match the first sub - pattern of the specified regular expression. The return type is an array of String values. If no matches are found, or if the pattern has no sub - patterns, an empty array is returned."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"Basic matching of lowercase letters around 'C'.In this example, the pattern ([[:lower:]]+)C([[:lower:]]+) matches the part of the string where one or more lowercase letters are followed by 'C' and then one or more lowercase letters. The first sub - pattern ([[:lower:]]+) before 'C' matches 'b', so the result is ['b']."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT regexp_extract_all('AbCdE', '([[:lower:]]+)C([[:lower:]]+)');\n+--------------------------------------------------------------+\n| regexp_extract_all('AbCdE', '([[:lower:]]+)C([[:lower:]]+)') |\n+--------------------------------------------------------------+\n| ['b']                                                        |\n+--------------------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Multiple matches in a string. Here, the pattern matches two parts in the string. The first match has the first sub - pattern matching 'b', and the second match has the first sub - pattern matching 'f'. So the result is ['b', 'f']."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT regexp_extract_all('AbCdEfCg', '([[:lower:]]+)C([[:lower:]]+)');\n+-----------------------------------------------------------------+\n| regexp_extract_all('AbCdEfCg', '([[:lower:]]+)C([[:lower:]]+)') |\n+-----------------------------------------------------------------+\n| ['b','f']                                                       |\n+-----------------------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Extracting keys from key - value pairs.The pattern matches key - value pairs in the string. The first sub - pattern captures the keys, so the result is an array of the keys ['abc', 'def', 'ghi']."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT regexp_extract_all('abc=111, def=222, ghi=333','(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');\n+--------------------------------------------------------------------------------+\n| regexp_extract_all('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\w+)=(\"[^\"]+\"|\\w+)') |\n+--------------------------------------------------------------------------------+\n| ['abc','def','ghi']                                                            |\n+--------------------------------------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Matching Chinese characters.The pattern (\\p{Han}+)(.+) first matches one or more Chinese characters with the first sub - pattern (\\p{Han}+), so the result is ['\u8FD9\u662F\u4E00\u6BB5\u4E2D\u6587']."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"mysql> select regexp_extract_all('\u8FD9\u662F\u4E00\u6BB5\u4E2D\u6587 This is a passage in English 1234567', '(\\\\p{Han}+)(.+)');\n+------------------------------------------------------------------------------------------------+\n| regexp_extract_all('\u8FD9\u662F\u4E00\u6BB5\u4E2D\u6587 This is a passage in English 1234567', '(\\p{Han}+)(.+)')       |\n+------------------------------------------------------------------------------------------------+\n| ['\u8FD9\u662F\u4E00\u6BB5\u4E2D\u6587']                                                                               |\n+------------------------------------------------------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Inserting data and using REGEXP_EXTRACT_ALL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"\nCREATE TABLE test_regexp_extract_all (\n    id INT,\n    text_content VARCHAR(255),\n    pattern VARCHAR(255)\n) PROPERTIES (\"replication_num\"=\"1\");\n\n\nINSERT INTO test_regexp_extract_all VALUES\n(1, 'apple1, banana2, cherry3', '([a-zA-Z]+)\\\\d'),\n(2, 'red#123, blue#456, green#789', '([a-zA-Z]+)#\\\\d+'),\n(3, 'hello@example.com, world@test.net', '([a-zA-Z]+)@');\n\n\nSELECT id, regexp_extract_all(text_content, pattern) AS extracted_data\nFROM test_regexp_extract_all;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+------+----------------------+\n| id   | extracted_data       |\n+------+----------------------+\n|    1 | ['apple', 'banana', 'cherry'] |\n|    2 | ['red', 'blue', 'green']     |\n|    3 | ['hello', 'world']           |\n+------+----------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"No matched,return empty string"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT REGEXP_EXTRACT_ALL('ABC', '(\\\\d+)');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+-------------------------------------+\n| REGEXP_EXTRACT_ALL('ABC', '(\\\\d+)') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"emoji match"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT REGEXP_EXTRACT_ALL('\uD83D\uDC69\u200D\uD83D\uDCBB,\uD83D\uDC68\u200D\uD83D\uDE80', '(\uD83D\uDCBB|\uD83D\uDE80)');\n+--------------------------------------------------------------+\n| REGEXP_EXTRACT_ALL('\uD83D\uDC69\u200D\uD83D\uDCBB,\uD83D\uDC68\u200D\uD83D\uDE80', '(\uD83D\uDCBB|\uD83D\uDE80)')                      |\n+--------------------------------------------------------------+\n| ['\uD83D\uDCBB','\uD83D\uDE80']                                                 |\n+--------------------------------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"'Str' is NULL,return NULL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_extract_all(NULL, '([a-z]+)');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+--------------------------------------+\n| regexp_extract_all(NULL, '([a-z]+)') |\n+--------------------------------------+\n| NULL                                 |\n+--------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"'pattern' is NULL, return NULL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_extract_all('Hello World', NULL);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+-----------------------------------------+\n| regexp_extract_all('Hello World', NULL) |\n+-----------------------------------------+\n| NULL                                    |\n+-----------------------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"All parameters are NULL,return NULL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_extract_all(NULL,NULL);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+-------------------------------+\n| regexp_extract_all(NULL,NULL) |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"pattern"})," is not allowed regexp regular,throw error;"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT regexp_extract_all('hello (world) 123', '([[:alpha:]+');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"ERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.2)[INVALID_ARGUMENT]Could not compile regexp pattern: ([[:alpha:]+\nError: missing ]: [[:alpha:]+\n"})})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return l}});var r=t(667294);let a={},s=r.createContext(a);function l(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);