"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["364286"],{921898:function(e,t,l){l.r(t),l.d(t,{default:()=>h,frontMatter:()=>i,metadata:()=>n,assets:()=>d,toc:()=>o,contentTitle:()=>r});var n=JSON.parse('{"id":"sql-manual/sql-statements/table-and-view/table/ALTER-TABLE-REPLACE","title":"ALTER TABLE REPLACE","description":"Description","source":"@site/docs/sql-manual/sql-statements/table-and-view/table/ALTER-TABLE-REPLACE.md","sourceDirName":"sql-manual/sql-statements/table-and-view/table","slug":"/sql-manual/sql-statements/table-and-view/table/ALTER-TABLE-REPLACE","permalink":"/docs/dev/sql-manual/sql-statements/table-and-view/table/ALTER-TABLE-REPLACE","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ALTER TABLE REPLACE","language":"en"},"sidebar":"docs","previous":{"title":"ALTER TABLE RENAME","permalink":"/docs/dev/sql-manual/sql-statements/table-and-view/table/ALTER-TABLE-RENAME"},"next":{"title":"ALTER TABLE PROPERTY","permalink":"/docs/dev/sql-manual/sql-statements/table-and-view/table/ALTER-TABLE-PROPERTY"}}'),a=l("785893"),s=l("250065");let i={title:"ALTER TABLE REPLACE",language:"en"},r=void 0,d={},o=[{value:"Description",id:"description",level:2},{value:"Theory",id:"theory",level:4},{value:"Notice",id:"notice",level:4},{value:"Example",id:"example",level:2},{value:"Keywords",id:"keywords",level:2},{value:"Best Practice",id:"best-practice",level:2}];function c(e){let t={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(t.p,{children:"Atomic substitution of two tables. This operation applies only to OLAP tables."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"ALTER TABLE [db.]tbl1 REPLACE WITH TABLE tbl2\n[PROPERTIES('swap' = 'true')];\n"})}),"\n",(0,a.jsx)(t.p,{children:"Replace table tbl1 with table tbl2."}),"\n",(0,a.jsxs)(t.p,{children:["If the ",(0,a.jsx)(t.code,{children:"swap"})," parameter is ",(0,a.jsx)(t.code,{children:"true"}),", the data in the table named ",(0,a.jsx)(t.code,{children:"tbl1"})," will be the data in the original table named ",(0,a.jsx)(t.code,{children:"tbl2"})," after the replacement. The data in the table named ",(0,a.jsx)(t.code,{children:"tbl2"})," is the data in the original ",(0,a.jsx)(t.code,{children:"tbl1"})," table. That is, two tables of data have been swapped."]}),"\n",(0,a.jsxs)(t.p,{children:["If the ",(0,a.jsx)(t.code,{children:"swap"})," parameter is ",(0,a.jsx)(t.code,{children:"false"}),", the data in the ",(0,a.jsx)(t.code,{children:"tbl1"})," table will be the data in the ",(0,a.jsx)(t.code,{children:"tbl2"})," table after the replacement. The table named ",(0,a.jsx)(t.code,{children:"tbl2"})," is deleted."]}),"\n",(0,a.jsx)(t.h4,{id:"theory",children:"Theory"}),"\n",(0,a.jsx)(t.p,{children:"The replace table function actually turns the following set of operations into an atomic operation."}),"\n",(0,a.jsxs)(t.p,{children:["If you want to replace table A with table B and ",(0,a.jsx)(t.code,{children:"swap"})," is ",(0,a.jsx)(t.code,{children:"true"}),", do the following:"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Rename table B as table A."}),"\n",(0,a.jsx)(t.li,{children:"Rename table A as table B."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.code,{children:"swap"})," is ",(0,a.jsx)(t.code,{children:"false"}),", do as follows:"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Delete table A."}),"\n",(0,a.jsx)(t.li,{children:"Rename table B as table A."}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"notice",children:"Notice"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["The default ",(0,a.jsx)(t.code,{children:"swap"})," parameter is ",(0,a.jsx)(t.code,{children:"true"}),". That is, a table replacement operation is equivalent to an exchange of data between two tables."]}),"\n",(0,a.jsxs)(t.li,{children:["If the ",(0,a.jsx)(t.code,{children:"swap"})," parameter is set to false, the replaced table (table A) will be deleted and cannot be restored."]}),"\n",(0,a.jsx)(t.li,{children:"The replacement operation can only occur between two OLAP tables and does not check whether the table structure of the two tables is consistent."}),"\n",(0,a.jsx)(t.li,{children:"The original permission Settings are not changed. Because the permission check is based on the table name."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["Atomic swap ",(0,a.jsx)(t.code,{children:"tbl1"})," with ",(0,a.jsx)(t.code,{children:"tbl2"})," without dropping any tables(Note: if you delete it, you actually delete tbl1 and rename tbl2 to tbl1.)"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"ALTER TABLE tbl1 REPLACE WITH TABLE tbl2;\n"})}),"\n",(0,a.jsx)(t.p,{children:"or"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"ALTER TABLE tbl1 REPLACE WITH TABLE tbl2 PROPERTIES('swap' = 'true');\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsxs)(t.li,{children:["Atomic swap ",(0,a.jsx)(t.code,{children:"tbl1"})," with ",(0,a.jsx)(t.code,{children:"tbl2"})," and deleting the ",(0,a.jsx)(t.code,{children:"tbl2"})," table(Keep ",(0,a.jsx)(t.code,{children:"tbl1"})," and the data of the original ",(0,a.jsx)(t.code,{children:"tbl2"}),")"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"ALTER TABLE tbl1 REPLACE WITH TABLE tbl2 PROPERTIES('swap' = 'false');\n"})}),"\n",(0,a.jsx)(t.h2,{id:"keywords",children:"Keywords"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"ALTER, TABLE, REPLACE, ALTER TABLE\n"})}),"\n",(0,a.jsx)(t.h2,{id:"best-practice",children:"Best Practice"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Atomic overlay write operations"}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["In some cases, the user wants to be able to rewrite the data of a certain table, but if the data is deleted first and then imported, the data cannot be viewed for a period of time in between. At this time, the user can first use the ",(0,a.jsx)(t.code,{children:"CREATE TABLE LIKE"})," statement to create a new table with the same structure, import the new data into the new table, and use the replacement operation to atomically replace the old table to achieve the goal. Atomic overwrite write operations at the partition level, see ",(0,a.jsx)(t.a,{href:"../../../../data-operate/delete/table-temp-partition",children:"temp partition documentation"}),"."]})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},250065:function(e,t,l){l.d(t,{Z:function(){return r},a:function(){return i}});var n=l(667294);let a={},s=n.createContext(a);function i(e){let t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);