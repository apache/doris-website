"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["851021"],{810339:function(e,n,s){s.r(n),s.d(n,{default:()=>a,frontMatter:()=>c,metadata:()=>r,assets:()=>l,toc:()=>o,contentTitle:()=>d});var r=JSON.parse('{"id":"lakehouse/sql-convertor/sql-convertor-overview","title":"SQL Dialect Conversion","description":"Starting from version 2.1, Doris can support multiple SQL dialects, such as Presto, Trino, Hive, PostgreSQL, Spark, Clickhouse, etc. With this feature, users can directly use the corresponding SQL dialect to query data in Doris, making it convenient for users to smoothly migrate their existing business to Doris.","source":"@site/docs/lakehouse/sql-convertor/sql-convertor-overview.md","sourceDirName":"lakehouse/sql-convertor","slug":"/lakehouse/sql-convertor/sql-convertor-overview","permalink":"/docs/dev/lakehouse/sql-convertor/sql-convertor-overview","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SQL Dialect Conversion","language":"en"},"sidebar":"docs","previous":{"title":"Statistics","permalink":"/docs/dev/lakehouse/statistics"},"next":{"title":"Presto/Trino SQL Convertor Guide","permalink":"/docs/dev/lakehouse/sql-convertor/presto-trino-guide"}}'),i=s("785893"),t=s("250065");let c={title:"SQL Dialect Conversion",language:"en"},d=void 0,l={},o=[{value:"Deploy Service",id:"deploy-service",level:2},{value:"Use SQL Dialects",id:"use-sql-dialects",level:2},{value:"Presto",id:"presto",level:3},{value:"Clickhouse",id:"clickhouse",level:3},{value:"Serde Dialect",id:"serde-dialect",level:2},{value:"Serde Comparison Table",id:"serde-comparison-table",level:3},{value:"Configurations",id:"configurations",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Release Notes",id:"release-notes",level:2}];function h(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",div:"div",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Starting from version 2.1, Doris can support multiple SQL dialects, such as Presto, Trino, Hive, PostgreSQL, Spark, Clickhouse, etc. With this feature, users can directly use the corresponding SQL dialect to query data in Doris, making it convenient for users to smoothly migrate their existing business to Doris."}),"\n",(0,i.jsx)(n.div,{children:(0,i.jsxs)(n.p,{children:["This feature is currently experimental. If you encounter any issues during use, feel free to provide feedback via mailing lists, ",(0,i.jsx)(n.a,{href:"https://github.com/apache/doris/issues",children:"GitHub Issue"}),", etc."]})}),"\n",(0,i.jsx)(n.h2,{id:"deploy-service",children:"Deploy Service"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Download the latest version of ",(0,i.jsx)(n.a,{href:"https://www.selectdb.com/tools/doris-sql-convertor",children:"SQL Convertor"})]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["The SQL dialect conversion tool is based on the open-source ",(0,i.jsx)(n.a,{href:"https://github.com/tobymao/sqlglot",children:"SQLGlot"}),", and is further developed by SelectDB. For more information about SQLGlot, please refer to the ",(0,i.jsx)(n.a,{href:"https://sqlglot.com/sqlglot.html",children:"SQLGlot official website"}),"."]}),(0,i.jsx)(n.p,{children:"SQL Convertor is not maintained or endorsed by Apache Doris. These works are supervised by Committers and Doris PMC. Using these resources and services is entirely at your own discretion, and the community is not responsible for verifying the licensing or validity of these tools."})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"On any FE node, start the service with the following commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"# Configure service port\nvim apiserver/conf/config.conf\n\n# Start SQL Converter for Apache Doris conversion service\nsh apiserver/bin/start.sh\n\n# If a frontend interface is needed, configure the corresponding port in the webserver and start it. If no frontend is needed, you can ignore the following operations\nvim webserver/conf/config.conf\n\n# Start the frontend interface\nsh webserver/bin/start.sh\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"This service is stateless and can be started or stopped at any time."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Configure the port in ",(0,i.jsx)(n.code,{children:"apiserver/conf/config.conf"})," to specify any available port, and configure workers to specify the number of threads to start. In concurrent scenarios, you can adjust as needed, with a default of 1."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"It is recommended to start a separate service on each FE node."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If you need to start the frontend interface, you can configure the SQL Converter for Apache Doris conversion service address in ",(0,i.jsx)(n.code,{children:"webserver/conf/config.conf"}),", with the default being ",(0,i.jsx)(n.code,{children:"API_HOST=http://127.0.0.1:5001"})]}),"\n"]}),"\n"]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Start the Doris cluster (version 2.1 or higher)"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Set the URL of the SQL dialect conversion service in Doris with the following command:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'MySQL> set global sql_converter_service_url = "http://127.0.0.1:5001/api/v1/convert"'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"127.0.0.1:5001"})," is the IP and port of the SQL dialect conversion service deployment node."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Starting from version 3.0.7, you can set multiple URL addresses to provide high availability for SQL dialect conversion services. See the ",(0,i.jsx)(n.strong,{children:"Related Parameters"})," section for details."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"use-sql-dialects",children:"Use SQL Dialects"}),"\n",(0,i.jsx)(n.p,{children:"Currently supported dialect types include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"presto"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"trino"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"clickhouse"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"hive"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"spark"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"postgres"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.h3,{id:"presto",children:"Presto"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE  test_sqlconvert (\n    id INT,\n    start_time DATETIME,\n    value STRING,\n    arr_int ARRAY<INT>,\n    arr_str ARRAY<STRING>\n) ENGINE=OLAP\nDUPLICATE KEY(`id`)\nCOMMENT 'OLAP'\nDISTRIBUTED BY HASH(`id`) BUCKETS 1\nPROPERTIES (\n  \"replication_allocation\" = \"tag.location.default: 1\"\n);\n\nINSERT INTO test_sqlconvert VALUES(1, '2024-05-20 13:14:52', '2024-01-14',[1, 2, 3, 3], ['Hello', 'World']);\n\nSET sql_dialect = presto;\n\nSELECT CAST(start_time AS varchar(20)) AS col1,\n      array_distinct(arr_int) AS col2,\n      FILTER(arr_str, x -> x LIKE '%World%') AS col3,\n      to_date(value,'%Y-%m-%d') AS col4,\n      YEAR(start_time) AS col5,\n      date_add('month', 1, start_time) AS col6,\n      REGEXP_EXTRACT_ALL(value, '-.') AS col7,\n      JSON_EXTRACT('{\"id\": \"33\"}', '$.id')AS col8,\n      element_at(arr_int, 1) AS col9,\n      date_trunc('day',start_time) AS col10\n    FROM test_sqlconvert\n    WHERE date_trunc('day',start_time) = DATE '2024-05-20'     \nORDER BY id;\n+---------------------+-----------+-----------+------------+------+---------------------+-------------+------+------+---------------------+\n| col1                | col2      | col3      | col4       | col5 | col6                | col7        | col8 | col9 | col10               |\n+---------------------+-----------+-----------+------------+------+---------------------+-------------+------+------+---------------------+\n| 2024-05-20 13:14:52 | [1, 2, 3] | [\"World\"] | 2024-01-14 | 2024 | 2024-06-20 13:14:52 | ['-0','-1'] | \"33\" |    1 | 2024-05-20 00:00:00 |\n+---------------------+-----------+-----------+------------+------+---------------------+-------------+------+------+---------------------+\n"})}),"\n",(0,i.jsx)(n.h3,{id:"clickhouse",children:"Clickhouse"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SET sql_dialect = clickhouse;\n\nSELECT toString(start_time) AS col1,\n       arrayCompact(arr_int) AS col2,\n       arrayFilter(x -> x LIKE '%World%',arr_str) AS col3,\n       toDate(value) AS col4,\n       toYear(start_time) AS col5,\n       addMonths(start_time, 1) AS col6,\n       extractAll(value, '-.') AS col7,\n       JSONExtractString('{\"id\": \"33\"}' , 'id') AS col8,\n       arrayElement(arr_int, 1) AS col9,\n       date_trunc('day',start_time) AS col10\n    FROM test_sqlconvert\n    WHERE date_trunc('day',start_time)= '2024-05-20 00:00:00'     \nORDER BY id;\n+---------------------+-----------+-----------+------------+------+---------------------+-------------+------+------+---------------------+\n| col1                | col2      | col3      | col4       | col5 | col6                | col7        | col8 | col9 | col10               |\n+---------------------+-----------+-----------+------------+------+---------------------+-------------+------+------+---------------------+\n| 2024-05-20 13:14:52 | [1, 2, 3] | [\"World\"] | 2024-01-14 | 2024 | 2024-06-20 13:14:52 | ['-0','-1'] | \"33\" |    1 | 2024-05-20 00:00:00 |\n+---------------------+-----------+-----------+------------+------+---------------------+-------------+------+------+---------------------+\n"})}),"\n",(0,i.jsx)(n.h2,{id:"serde-dialect",children:"Serde Dialect"}),"\n",(0,i.jsx)(n.p,{children:"Different systems may have different display methods for different column types."}),"\n",(0,i.jsxs)(n.p,{children:["For example, for NULL values, Doris and Hive display as ",(0,i.jsx)(n.code,{children:"null"}),", while Trino/Presto displays as ",(0,i.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For Map types, Hive displays as ",(0,i.jsx)(n.code,{children:"{1:null,2:null}"}),", while Trino/Presto displays as {1=NULL, 2=NULL}."]}),"\n",(0,i.jsx)(n.p,{children:"In order to ensure the consistency of user migration behavior to the greatest extent, Doris provides a dialect serialization mode option, which can return different display formats according to different modes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SET serde_diactor=<dialect>;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Currently supported serialization mode types include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"doris (default)"}),"\n",(0,i.jsx)(n.li,{children:"hive"}),"\n",(0,i.jsx)(n.li,{children:"presto/trino"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note: This feature has been supported since version 3.0.6."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"serde-comparison-table",children:"Serde Comparison Table"}),"\n",(0,i.jsx)(n.p,{children:"The following table shows how various data types are displayed in different serialization modes. Types not listed have the same display method."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Doris"}),(0,i.jsx)(n.th,{children:"Hive"}),(0,i.jsx)(n.th,{children:"Presto/Trino"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Bool"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"0"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"0"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"0"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Integer"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"1000"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"1000"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"1000"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Float/Decimal"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1.2"}),", ",(0,i.jsx)(n.code,{children:"3.00"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1.2"}),", ",(0,i.jsx)(n.code,{children:"3.00"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1.2"}),", ",(0,i.jsx)(n.code,{children:"3.00"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Date/Datetime"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"2025-01-01"}),"\uFF0C ",(0,i.jsx)(n.code,{children:"2025-01-01 10:11:11"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"2025-01-01"}),"\uFF0C ",(0,i.jsx)(n.code,{children:"2025-01-01 10:11:11"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"2025-01-01"}),"\uFF0C ",(0,i.jsx)(n.code,{children:"2025-01-01 10:11:11"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"abc"}),", ",(0,i.jsx)(n.code,{children:"\u4E2D\u56FD"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"abc"}),", ",(0,i.jsx)(n.code,{children:"\u4E2D\u56FD"})]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"abc"}),", ",(0,i.jsx)(n.code,{children:"\u4E2D\u56FD"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Null"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"null"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"null"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"NULL"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Array<bool>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1, 0]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[true,false]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1, 0]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Array<int>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1, 1000]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1,1000]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1, 1000]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Array<string>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'["abc", "\u4E2D\u56FD"]'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'["abc","\u4E2D\u56FD"]'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'["abc", "\u4E2D\u56FD"]'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Array<date/datetime>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'["2025-01-01", "2025-01-01 10:11:11"]'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'["2025-01-01","2025-01-01 10:11:11"]'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'["2025-01-01", "2025-01-01 10:11:11"]'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Array<null>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[null]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[null]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[NULL]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Map<int, string>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'{1:"abc", 2:"\u4E2D\u56FD"}'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'{1:"abc",2:"\u4E2D\u56FD"}'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{1=abc, 2=\u4E2D\u56FD}"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Map<string, date/datetime>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'{"k1":"2022-10-01", "k2":"2022-10-01 10:10:10"}'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'{"k1":"2022-10-01","k2":"2022-10-01 10:10:10"}'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{k1=2022-10-01, k2=2022-10-01 10:10:10}"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Map<int, null>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{1:null, 2:null}"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{1:null,2:null}"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{1=NULL, 2=NULL}"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Struct<>"})}),(0,i.jsx)(n.td,{children:"Same as map"}),(0,i.jsx)(n.td,{children:"Same as map"}),(0,i.jsx)(n.td,{children:"Same as map"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"configurations",children:"Configurations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Variables"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Variable name"}),(0,i.jsx)(n.th,{children:"Example"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sql_converter_service_url"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'set global sql_converter_service_url = "http://127.0.0.1:5001/api/v1/convert"'})}),(0,i.jsx)(n.td,{children:"Global variable, used to specify the sql converter service address"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sql_dialect"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"set sql_dialect=presto"})}),(0,i.jsx)(n.td,{children:"Session variable, used to specify the dialect of the current session"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"serde_dialect"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"set serde_dialect=hive"})}),(0,i.jsx)(n.td,{children:"Session variable, used to specify the serialization dialect format of the current session"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"enable_sql_convertor_features"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'set enable_sql_convertor_features="ctas"'})}),(0,i.jsxs)(n.td,{children:["Session variable, user-specified to enable certain special features of sql converter. ",(0,i.jsx)(n.code,{children:"ctas"}),": Allows conversion of the ",(0,i.jsx)(n.code,{children:"SELECT"})," part of a ",(0,i.jsx)(n.code,{children:"CTAS"})," statement. (This variable is supported since Doris 3.0.6 and SQL Convertor 1.0.8.10)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sql_convertor_config"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'set sql_convertor_config = \'{"ignore_udf": ["func1", "func2", "fucn3"]}\''})}),(0,i.jsx)(n.td,{children:'Session variable used to specify that SQL Convertor ignore some UDFs. SQL Convertor will not convert the functions in the list, otherwise it may report an error "Unknown Function". (This variable is supported since Doris 3.0.6 and SQL Convertor 1.0.8.10)'})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Starting from version 3.0.7, you can set multiple URL addresses separated by commas:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'set global sql_converter_service_url = "http://127.0.0.1:5001/api/v1/convert,http://127.0.0.2:5001/api/v1/convert"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Doris will prioritize the local service address ",(0,i.jsx)(n.code,{children:"127.0.0.1"}),". When the preferred address is unavailable, it will automatically switch to other available addresses to ensure service availability."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Specify functions that do not need to be converted"}),"\n",(0,i.jsxs)(n.p,{children:["In some cases, you may not be able to find a function in Doris that is completely consistent with the original system, or some functions after conversion may not behave exactly the same as the original function under some special parameters. In this case, the user can first use UDF to implement a function that is completely consistent with the original system and register it in Doris. Then, add this UDF in ",(0,i.jsx)(n.code,{children:"ignore_udf"})," of ",(0,i.jsx)(n.code,{children:"sql_convertor_config"}),". In this way, SQL Convertor will not convert this function, so that users can use UDF to control the function behavior."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"release-notes",children:"Release Notes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://docs.selectdb.com/docs/ecosystem/sql-converter/sql-converter-release-node",children:"SQL Convertor Release Notes"})})]})}function a(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return d},a:function(){return c}});var r=s(667294);let i={},t=r.createContext(i);function c(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);