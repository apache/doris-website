"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["247333"],{779134:function(e,n,s){s.r(n),s.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>a,assets:()=>d,toc:()=>o,contentTitle:()=>l});var a=JSON.parse('{"id":"query-data/multi-dimensional-analytics","title":"Multi-Dimensional Analytics","description":"In a database, ROLLUP, CUBE, and GROUPING SETS are advanced SQL statements used for multidimensional data aggregation. These features significantly enhance the capabilities of the GROUP BY clause, enabling users to obtain multiple levels of summary results in a single query, which is semantically equivalent to using UNION ALL to connect multiple aggregation statements.","source":"@site/docs/query-data/multi-dimensional-analytics.md","sourceDirName":"query-data","slug":"/query-data/multi-dimensional-analytics","permalink":"/docs/dev/query-data/multi-dimensional-analytics","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Multi-Dimensional Analytics","language":"en"},"sidebar":"docs","previous":{"title":"Subquery","permalink":"/docs/dev/query-data/subquery"},"next":{"title":"Window Function","permalink":"/docs/dev/query-data/window-function"}}'),t=s("785893"),i=s("250065");let r={title:"Multi-Dimensional Analytics",language:"en"},l=void 0,d={},o=[{value:"ROLLUP",id:"rollup",level:2},{value:"Use Case",id:"use-case",level:3},{value:"Syntax and Example",id:"syntax-and-example",level:3},{value:"CUBE",id:"cube",level:2},{value:"Use Case",id:"use-case-1",level:3},{value:"Syntax and Example",id:"syntax-and-example-1",level:3},{value:"GROUPING FUNCTION",id:"grouping-function",level:2},{value:"GROUPING",id:"grouping",level:3},{value:"GROUPING_ID",id:"grouping_id",level:3},{value:"GROUPING SETS",id:"grouping-sets",level:3},{value:"APPENDIX",id:"appendix",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"In a database, ROLLUP, CUBE, and GROUPING SETS are advanced SQL statements used for multidimensional data aggregation. These features significantly enhance the capabilities of the GROUP BY clause, enabling users to obtain multiple levels of summary results in a single query, which is semantically equivalent to using UNION ALL to connect multiple aggregation statements."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ROLLUP"}),": ROLLUP is an operation used to generate hierarchical summaries. It aggregates data according to the specified column order, gradually summarizing from the finest granularity to the highest level. For example, in sales data, ROLLUP can be used to summarize by region and time, providing sales for each region per month, total sales for each region, and overall total sales. ROLLUP is suitable for scenarios requiring step-by-step summaries."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"CUBE"}),": CUBE is a more powerful aggregation operation that generates all possible summary combinations. Unlike ROLLUP, CUBE calculates subsets for all dimensions. For instance, for sales data aggregated by product and region, CUBE will compute sales for each product in each region, total sales for each product, total sales for each region, and overall total sales. CUBE is applicable to scenarios requiring comprehensive multidimensional analysis, such as business analysis and market research."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"GROUPING SETS"}),": GROUPING SETS offer flexibility in aggregating specific grouping sets. It allows users to specify a set of column combinations for independent aggregation, rather than generating all possible combinations as in ROLLUP and CUBE. For example, one can define summaries for specific combinations of region and time without needing all combinations of each dimension. GROUPING SETS are suitable for scenarios requiring customized summaries, providing flexible aggregation control."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"ROLLUP, CUBE, and GROUPING SETS provide powerful multidimensional data summary functions, catering to various data analysis and reporting needs, and making complex aggregation calculations simpler and more efficient. The following sections will detail the usage scenarios, syntax, and examples of these features."}),"\n",(0,t.jsx)(n.h2,{id:"rollup",children:"ROLLUP"}),"\n",(0,t.jsx)(n.h3,{id:"use-case",children:"Use Case"}),"\n",(0,t.jsxs)(n.p,{children:["ROLLUP is particularly useful for summarizing data along hierarchical dimensions such as time, geography, and category. For instance, queries can specify ",(0,t.jsx)(n.code,{children:"ROLLUP(year, month, day)"})," or ",(0,t.jsx)(n.code,{children:"(country, Province, city)"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-and-example",children:"Syntax and Example"}),"\n",(0,t.jsx)(n.p,{children:"The syntax for ROLLUP is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT \u2026 GROUP BY ROLLUP(grouping_column_reference_list)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here's an example query that analyzes sales sums by year and month:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT  \n        YEAR(d_date),  \n        MONTH(d_date),  \n        SUM(ss_net_paid) AS total_sum  \nFROM  \n        store_sales,  \n        date_dim d1  \nWHERE  \n        d1.d_date_sk = ss_sold_date_sk  \n        AND YEAR(d_date) IN (2001, 2002)  \n        AND MONTH(d_date) IN (1, 2, 3)  \nGROUP BY  \n        ROLLUP(YEAR(d_date), MONTH(d_date))  \nORDER BY  \n        YEAR(d_date), MONTH(d_date);\n"})}),"\n",(0,t.jsx)(n.p,{children:"This query summarizes data by time, calculating subtotals for sales by year, sales by month within each year, and the grand total of sales. The query result is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"+--------------+---------------+-------------+  \n| YEAR(d_date) | MONTH(d_date) | total_sum   |  \n+--------------+---------------+-------------+  \n|         NULL |          NULL | 54262669.17 |  \n|         2001 |          NULL | 26640320.46 |  \n|         2001 |             1 |  9982165.83 |  \n|         2001 |             2 |  8454915.34 |  \n|         2001 |             3 |  8203239.29 |  \n|         2002 |          NULL | 27622348.71 |  \n|         2002 |             1 | 11260654.35 |  \n|         2002 |             2 |  7722750.61 |  \n|         2002 |             3 |  8638943.75 |  \n+--------------+---------------+-------------+  \n9 rows in set (0.08 sec)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"cube",children:"CUBE"}),"\n",(0,t.jsx)(n.h3,{id:"use-case-1",children:"Use Case"}),"\n",(0,t.jsx)(n.p,{children:'CUBE is best suited for queries involving columns from multiple independent dimensions, rather than columns representing different levels of a single dimension. For example, a common usage scenario is summarizing all combinations of month, region, and product. These are three independent dimensions, and it is common to analyze all possible subtotal combinations. By contrast, cross-tabulating all possible combinations of year, month, and day would include several unnecessary values due to the natural hierarchy in the time dimension. In most analyses, subtotals like profits calculated by month and day are unnecessary. Relatively few users need to ask, "What is the total sales for the 16th of each month throughout the year?"'}),"\n",(0,t.jsx)(n.h3,{id:"syntax-and-example-1",children:"Syntax and Example"}),"\n",(0,t.jsx)(n.p,{children:"The syntax for CUBE is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT \u2026 GROUP BY CUBE(grouping_column_reference_list)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT  \n        YEAR(d_date),  \n        i_category,  \n        ca_state,  \n        SUM(ss_net_paid) AS total_sum  \nFROM  \n        store_sales,  \n        date_dim d1,  \n        item,  \n        customer_address ca   \nWHERE  \n        d1.d_date_sk = ss_sold_date_sk  \n        AND i_item_sk = ss_item_sk  \n        AND ss_addr_sk = ca_address_sk  \n        AND i_category IN ("Books", "Electronics")  \n        AND YEAR(d_date) IN (1998, 1999)  \n        AND ca_state IN ("LA", "AK")  \nGROUP BY CUBE(YEAR(d_date), i_category, ca_state)  \nORDER BY YEAR(d_date), i_category, ca_state;\n'})}),"\n",(0,t.jsx)(n.p,{children:"The query result is as follows, calculating:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The total sales sum;"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Subtotals for sales by year, by product category, and by state;"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Subtotals for sales by product category within each year, by state for each product, by state within each year, and by product category within each state and year."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"+--------------+-------------+----------+------------+  \n| YEAR(d_date) | i_category  | ca_state | total_sum  |  \n+--------------+-------------+----------+------------+  \n|         NULL | NULL        | NULL     | 8690374.60 |  \n|         NULL | NULL        | AK       | 2675198.33 |  \n|         NULL | NULL        | LA       | 6015176.27 |  \n|         NULL | Books       | NULL     | 4238177.69 |  \n|         NULL | Books       | AK       | 1310791.36 |  \n|         NULL | Books       | LA       | 2927386.33 |  \n|         NULL | Electronics | NULL     | 4452196.91 |  \n|         NULL | Electronics | AK       | 1364406.97 |  \n|         NULL | Electronics | LA       | 3087789.94 |  \n|         1998 | NULL        | NULL     | 4369656.14 |  \n|         1998 | NULL        | AK       | 1402539.19 |  \n|         1998 | NULL        | LA       | 2967116.95 |  \n|         1998 | Books       | NULL     | 2213703.82 |  \n|         1998 | Books       | AK       |  719911.29 |  \n|         1998 | Books       | LA       | 1493792.53 |  \n|         1998 | Electronics | NULL     | 2155952.32 |  \n|         1998 | Electronics | AK       |  682627.90 |  \n|         1998 | Electronics | LA       | 1473324.42 |  \n|         1999 | NULL        | NULL     | 4320718.46 |  \n|         1999 | NULL        | AK       | 1272659.14 |  \n|         1999 | NULL        | LA       | 3048059.32 |  \n|         1999 | Books       | NULL     | 2024473.87 |  \n|         1999 | Books       | AK       |  590880.07 |  \n|         1999 | Books       | LA       | 1433593.80 |  \n|         1999 | Electronics | NULL     | 2296244.59 |  \n|         1999 | Electronics | AK       |  681779.07 |  \n|         1999 | Electronics | LA       | 1614465.52 |  \n+--------------+-------------+----------+------------+  \n27 rows in set (0.21 sec)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"grouping-function",children:"GROUPING FUNCTION"}),"\n",(0,t.jsx)(n.p,{children:"This section introduces how to address two challenges when using ROLLUP and CUBE:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How to programmatically identify which rows in the result set represent subtotals and accurately determine the aggregation level corresponding to a given subtotal. Since subtotals are often needed for calculations such as percentage of totals, we require a convenient method to identify these subtotal rows."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'When the query results contain both actual stored NULL values and "NULL" values generated by ROLLUP or CUBE operations, another problem arises: how to distinguish between these two types of NULL values?'}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"GROUPING, GROUPING_ID, and GROUPING SETS can effectively solve the aforementioned challenges."}),"\n",(0,t.jsx)(n.h3,{id:"grouping",children:"GROUPING"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Principles"})}),"\n",(0,t.jsx)(n.p,{children:"GROUPING uses a single column as a parameter and returns 1 when encountering a NULL value created by ROLLUP or CUBE operations, indicating that the row is a subtotal. Any other type of value (including NULLs inherently present in the table data) returns 0."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select  \n        year(d_date),  \n        month(d_date),  \n        sum(ss_net_paid) as total_sum,  \n        grouping(year(d_date)),  \n        grouping(month(d_date))  \nfrom  \n        store_sales,  \n        date_dim d1  \nwhere  \n        d1.d_date_sk = ss_sold_date_sk  \n        and year(d_date) in (2001, 2002)  \n        and month(d_date) in (1, 2, 3)  \ngroup by  \n        rollup(year(d_date), month(d_date))  \norder by  \n        year(d_date), month(d_date);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The GROUPING function result for the (YEAR(d_date), MONTH(d_date)) group is (0,0) for aggregation by year and month."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The GROUPING function result for the (YEAR(d_date)) group is (0,1) for aggregation by year."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The GROUPING function result for the () group is (1,1) for the total aggregation."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Query result:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Plain",children:"+--------------+---------------+-------------+------------------------+-------------------------+  \n| year(d_date) | month(d_date) | total_sum   | Grouping(year(d_date)) | Grouping(month(d_date)) |  \n+--------------+---------------+-------------+------------------------+-------------------------+  \n|         NULL |          NULL | 54262669.17 |                      1 |                       1 |  \n|         2001 |          NULL | 26640320.46 |                      0 |                       1 |  \n|         2001 |             1 |  9982165.83 |                      0 |                       0 |  \n|         2001 |             2 |  8454915.34 |                      0 |                       0 |  \n|         2001 |             3 |  8203239.29 |                      0 |                       0 |  \n|         2002 |          NULL | 27622348.71 |                      0 |                       1 |  \n|         2002 |             1 | 11260654.35 |                      0 |                       0 |  \n|         2002 |             2 |  7722750.61 |                      0 |                       0 |  \n|         2002 |             3 |  8638943.75 |                      0 |                       0 |  \n+--------------+---------------+-------------+------------------------+-------------------------+  \n9 rows in set (0.06 sec)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Usage Scenarios, Syntax, and Examples"})}),"\n",(0,t.jsx)(n.p,{children:"The GROUPING function can be used to filter results. Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'select\n        year(d_date),\n        i_category,\n        ca_state,\n        sum(ss_net_paid) as total_sum\nfrom\n        store_sales,\n        date_dim d1,\n        item,\n        customer_address ca \nwhere\n        d1.d_date_sk = ss_sold_date_sk\n        and i_item_sk = ss_item_sk\n        and ss_addr_sk=ca_address_sk\n        and i_category in ("Books", "Electronics")\n        and year(d_date) in(1998, 1999)\n        and ca_state in ("LA", "AK")\ngroup by cube(year(d_date), i_category, ca_state)\nhaving grouping(year(d_date))=1 and grouping(i_category)=1 and grouping(ca_state)=1\nor grouping(year(d_date))=0 and grouping(i_category)=1 and grouping(ca_state)=1\nor grouping(year(d_date))=1 and grouping(i_category)=1 and grouping(ca_state)=0\norder by year(d_date), i_category, ca_state;   \n'})}),"\n",(0,t.jsx)(n.p,{children:"Using the GROUPING function in the HAVING clause retains only the total sales, sales summarized by year, and sales summarized by region. Query result:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Plain",children:"+---------------------+------------+----------+------------+  \n| year(`d1`.`d_date`) | i_category | ca_state | total_sum  |  \n+---------------------+------------+----------+------------+  \n|                NULL | NULL       | NULL     | 8690374.60 |  \n|                NULL | NULL       | AK       | 2675198.33 |  \n|                NULL | NULL       | LA       | 6015176.27 |  \n|                1998 | NULL       | NULL     | 4369656.14 |  \n|                1999 | NULL       | NULL     | 4320718.46 |  \n+---------------------+------------+----------+------------+  \n5 rows in set (0.13 sec)\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also use the GROUPING function with the IF function to enhance query readability. Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'select  \n        if(grouping(year(d_date)) = 1, "Multi-year sum", year(d_date)) as year,  \n        if(grouping(i_category) = 1, "Multi-category sum", i_category) as category,  \n        sum(ss_net_paid) as total_sum  \nfrom  \n        store_sales,  \n        date_dim d1,  \n        item,  \n        customer_address ca  \nwhere  \n        d1.d_date_sk = ss_sold_date_sk  \n        and i_item_sk = ss_item_sk  \n        and ss_addr_sk = ca_address_sk  \n        and i_category in ("Books", "Electronics")  \n        and year(d_date) in (1998, 1999)  \n        and ca_state in ("LA", "AK")  \ngroup by cube(year(d_date), i_category)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Query result:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"+----------------+--------------------+------------+  \n| year           | category           | total_sum  |  \n+----------------+--------------------+------------+  \n| 1998           | Books              | 2213703.82 |  \n| 1998           | Electronics        | 2155952.32 |  \n| 1999           | Electronics        | 2296244.59 |  \n| 1999           | Books              | 2024473.87 |  \n| 1998           | Multi-category sum | 4369656.14 |  \n| 1999           | Multi-category sum | 4320718.46 |  \n| Multi-year sum | Books              | 4238177.69 |  \n| Multi-year sum | Electronics        | 4452196.91 |  \n| Multi-year sum | Multi-category sum | 8690374.60 |  \n+----------------+--------------------+------------+  \n9 rows in set (0.09 sec)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"grouping_id",children:"GROUPING_ID"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Usage Scenarios"})}),"\n",(0,t.jsx)(n.p,{children:"In a database, both GROUPING_ID and GROUPING functions serve as auxiliary functions for handling multidimensional data aggregation queries, such as ROLLUP and CUBE, aiding users in distinguishing between different levels of aggregation results. If you wish to determine the aggregation level of a particular row, you need to use the GROUPING function to compute all GROUP BY columns, as the computation result of a single column alone is insufficient."}),"\n",(0,t.jsx)(n.p,{children:"The GROUPING_ID function is more powerful than GROUPING because it can detect multiple columns simultaneously. The GROUPING_ID function accepts multiple columns as parameters and returns an integer that represents the aggregation status of these columns through binary bits. When using tables or materialized views to store computation results, using GROUPING to represent different levels of aggregation can consume considerable storage space. In such scenarios, GROUPING_ID is more appropriate."}),"\n",(0,t.jsx)(n.p,{children:"Taking CUBE(a, b) as an example, its GROUPING_ID can be represented as follows:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Aggregation Level"}),(0,t.jsx)(n.th,{children:"Bit Vector"}),(0,t.jsx)(n.th,{children:"GROUPING_ID"}),(0,t.jsx)(n.th,{children:"GROUPING(a)"}),(0,t.jsx)(n.th,{children:"GROUPING(b)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"a,b"}),(0,t.jsx)(n.td,{children:"0 0"}),(0,t.jsx)(n.td,{children:"0"}),(0,t.jsx)(n.td,{children:"0"}),(0,t.jsx)(n.td,{children:"0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"a"}),(0,t.jsx)(n.td,{children:"0 1"}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"0"}),(0,t.jsx)(n.td,{children:"1"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"b"}),(0,t.jsx)(n.td,{children:"1 0"}),(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Grand Total"}),(0,t.jsx)(n.td,{children:"1 1"}),(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"1"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Syntax and Example"})}),"\n",(0,t.jsx)(n.p,{children:"Here is an example SQL query:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT    \n    year(d_date),    \n    i_category,    \n    SUM(ss_net_paid) AS total_sum,    \n    GROUPING(year(d_date)),    \n    GROUPING(i_category),    \n    GROUPING_ID(year(d_date), i_category)    \nFROM    \n    store_sales,    \n    date_dim d1,    \n    item,    \n    customer_address ca     \nWHERE    \n    d1.d_date_sk = ss_sold_date_sk    \n    AND i_item_sk = ss_item_sk    \n    AND ss_addr_sk = ca_address_sk    \n    AND i_category IN ('Books', 'Electronics')    \n    AND year(d_date) IN (1998, 1999)    \n    AND ca_state IN ('LA', 'AK')    \nGROUP BY CUBE(year(d_date), i_category);\n"})}),"\n",(0,t.jsx)(n.p,{children:"The query results are as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"+--------------+-------------+------------+------------------------+----------------------+---------------------------------------+    \n| year(d_date) | i_category  | total_sum  | GROUPING(year(d_date)) | GROUPING(i_category) | GROUPING_ID(year(d_date), i_category) |    \n+--------------+-------------+------------+------------------------+----------------------+---------------------------------------+    \n| 1998         | Electronics | 2155952.32 | 0                      | 0                    | 0                                     |    \n| 1998         | Books       | 2213703.82 | 0                      | 0                    | 0                                     |    \n| 1999         | Electronics | 2296244.59 | 0                      | 0                    | 0                                     |    \n| 1999         | Books       | 2024473.87 | 0                      | 0                    | 0                                     |    \n| 1998         | NULL        | 4369656.14 | 0                      | 1                    | 1                                     |    \n| 1999         | NULL        | 4320718.46 | 0                      | 1                    | 1                                     |    \n| NULL         | Electronics | 4452196.91 | 1                      | 0                    | 2                                     |    \n| NULL         | Books       | 4238177.69 | 1                      | 0                    | 2                                     |    \n| NULL         | NULL        | 8690374.60 | 1                      | 1                    | 3                                     |    \n+--------------+-------------+------------+------------------------+----------------------+---------------------------------------+    \n9 rows in set (0.12 sec)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"grouping-sets",children:"GROUPING SETS"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Usage Scenarios"})}),"\n",(0,t.jsxs)(n.p,{children:["When there is a need to selectively specify the group sets to create, the ",(0,t.jsx)(n.code,{children:"GROUPING SETS"})," expression can be used in the ",(0,t.jsx)(n.code,{children:"GROUP BY"})," clause. This method allows users to precisely specify across multiple dimensions without computing the entire CUBE."]}),"\n",(0,t.jsxs)(n.p,{children:["Since CUBE queries typically consume significant resources, using ",(0,t.jsx)(n.code,{children:"GROUPING SETS"})," can enhance query execution efficiency when only a few dimensions are of interest."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Syntax and Examples"})}),"\n",(0,t.jsxs)(n.p,{children:["The syntax for ",(0,t.jsx)(n.code,{children:"GROUPING SETS"})," is as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT \u2026 GROUP BY GROUPING SETS(grouping_column_reference_list)\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you need:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Subtotals of sales for each product category per year"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Subtotals of sales for each state per year"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Subtotals of sales for each product in each state per year"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.code,{children:"GROUPING SETS"})," to specify these dimensions and perform the aggregation. Here is an example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT  \n    YEAR(d_date),  \n    i_category,  \n    ca_state,  \n    SUM(ss_net_paid) AS total_sum  \nFROM  \n    store_sales,  \n    date_dim d1,  \n    item,  \n    customer_address ca   \nWHERE  \n    d1.d_date_sk = ss_sold_date_sk  \n    AND i_item_sk = ss_item_sk  \n    AND ss_addr_sk = ca_address_sk  \n    AND i_category IN ('Books', 'Electronics')  \n    AND YEAR(d_date) IN (1998, 1999)  \n    AND ca_state IN ('LA', 'AK')  \nGROUP BY GROUPING SETS(  \n    (YEAR(d_date), i_category),   \n    (YEAR(d_date), ca_state),   \n    (YEAR(d_date), ca_state, i_category)  \n)  \nORDER BY YEAR(d_date), i_category, ca_state;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Query Result:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"+--------------+-------------+----------+------------+  \n| YEAR(d_date) | i_category  | ca_state | total_sum  |  \n+--------------+-------------+----------+------------+  \n| 1998         | NULL        | AK       | 1402539.19 |  \n| 1998         | NULL        | LA       | 2967116.95 |  \n| 1998         | Books       | NULL     | 2213703.82 |  \n| 1998         | Books       | AK       |  719911.29 |  \n| 1998         | Books       | LA       | 1493792.53 |  \n| 1998         | Electronics | NULL     | 2155952.32 |  \n| 1998         | Electronics | AK       |  682627.90 |  \n| 1998         | Electronics | LA       | 1473324.42 |  \n| 1999         | NULL        | AK       | 1272659.14 |  \n| 1999         | NULL        | LA       | 3048059.32 |  \n| 1999         | Books       | NULL     | 2024473.87 |  \n| 1999         | Books       | AK       |  590880.07 |  \n| 1999         | Books       | LA       | 1433593.80 |  \n| 1999         | Electronics | NULL     | 2296244.59 |  \n| 1999         | Electronics | AK       |  681779.07 |  \n| 1999         | Electronics | LA       | 1614465.52 |  \n+--------------+-------------+----------+------------+  \n16 rows in set (0.11 sec)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The above approach is equivalent to using CUBE but specifies concrete ",(0,t.jsx)(n.code,{children:"grouping_id"}),", thereby reducing unnecessary calculations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT  \n    SUM(ss_net_paid) AS total_sum,  \n    YEAR(d_date),  \n    i_category,  \n    ca_state  \nFROM  \n    store_sales,  \n    date_dim d1,  \n    item,  \n    customer_address ca   \nWHERE  \n    d1.d_date_sk = ss_sold_date_sk  \n    AND i_item_sk = ss_item_sk  \n    AND ss_addr_sk = ca_address_sk  \n    AND i_category IN ('Books', 'Electronics')  \n    AND YEAR(d_date) IN (1998, 1999)  \n    AND ca_state IN ('LA', 'AK')  \nGROUP BY CUBE(YEAR(d_date), ca_state, i_category)  \nHAVING grouping_id(YEAR(d_date), ca_state, i_category) = 0  \n    OR grouping_id(YEAR(d_date), ca_state, i_category) = 2   \n    OR grouping_id(YEAR(d_date), ca_state, i_category) = 1;\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Note",type:"info",children:(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"CUBE"})," computes all possible aggregation levels (eight in this case), but in practice, you may only be interested in a few of them."]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Semantic Equivalents"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"GROUPING SETS vs. GROUP BY UNION ALL"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"GROUPING SETS"})," statement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT k1, k2, SUM(k3) FROM t GROUP BY GROUPING SETS ((k1, k2), (k1), (k2), ());\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Is equivalent in query results to multiple ",(0,t.jsx)(n.code,{children:"GROUP BY"})," queries connected with ",(0,t.jsx)(n.code,{children:"UNION ALL"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT k1, k2, SUM(k3) FROM t GROUP BY k1, k2  \nUNION ALL  \nSELECT k1, NULL, SUM(k3) FROM t GROUP BY k1  \nUNION ALL  \nSELECT NULL, k2, SUM(k3) FROM t GROUP BY k2  \nUNION ALL  \nSELECT NULL, NULL, SUM(k3) FROM t;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"UNION ALL"})," results in a longer query and requires multiple scans of the base table, making it less efficient in both writing and execution."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"GROUPING SETS vs. ROLLUP"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ROLLUP"})," is an extension of ",(0,t.jsx)(n.code,{children:"GROUPING SETS"}),". For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT a, b, c, SUM(d) FROM tab1 GROUP BY ROLLUP(a, b, c);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This ",(0,t.jsx)(n.code,{children:"ROLLUP"})," is equivalent to the following ",(0,t.jsx)(n.code,{children:"GROUPING SETS"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"GROUPING SETS (  \n    (a, b, c),  \n    (a, b),  \n    (a),  \n    ()  \n);\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"GROUPING SETS vs. CUBE"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"CUBE(a, b, c)"})," is equivalent to the following ",(0,t.jsx)(n.code,{children:"GROUPING SETS"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"GROUPING SETS (  \n    (a, b, c),  \n    (a, b),  \n    (a, c),  \n    (a),  \n    (b, c),  \n    (b),  \n    (c),  \n    ()  \n);\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"appendix",children:"APPENDIX"}),"\n",(0,t.jsxs)(n.p,{children:["For table creation statements and data files, see the ",(0,t.jsx)(n.a,{href:"/docs/dev/query-data/window-function",children:"Window Function"})," appendix."]})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return r}});var a=s(667294);let t={},i=a.createContext(t);function r(e){let n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);