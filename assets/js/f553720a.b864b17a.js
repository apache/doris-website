"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["832706"],{277816:function(n,e,r){r.r(e),r.d(e,{default:()=>h,frontMatter:()=>t,metadata:()=>a,assets:()=>c,toc:()=>o,contentTitle:()=>l});var a=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-contains","title":"ARRAY_CONTAINS","description":"array_contains","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-contains.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-contains","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-contains","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_CONTAINS","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_CONCAT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-concat"},"next":{"title":"ARRAY_CONTAINS_ALL","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-contains_all"}}'),s=r("785893"),i=r("250065");let t={title:"ARRAY_CONTAINS",language:"en"},l=void 0,c={},o=[{value:"array_contains",id:"array_contains",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Examples",id:"examples",level:3},{value:"Notes",id:"notes",level:3},{value:"Keywords",id:"keywords",level:3}];function d(n){let e={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",t:"t",ul:"ul",version:"version",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"array_contains",children:"array_contains"}),"\n",(0,s.jsx)(e.version,{since:"1.2.0",children:"\n"}),"\n",(0,s.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(e.p,{children:"Checks whether an array contains a specified value. Returns true if found, false otherwise. If the array is NULL, returns NULL."}),"\n",(0,s.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"array_contains(ARRAY<T> arr, T value)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"arr"}),"\uFF1AARRAY",(0,s.jsx)(e.t,{children:" type, the array to check. Supports column names or constant values."})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"value"}),"\uFF1AT type, the value to search for. Type must be compatible with array element type."]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"T supported types:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,s.jsx)(e.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,s.jsx)(e.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,s.jsx)(e.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,s.jsx)(e.li,{children:"IP types: IPV4, IPV6"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(e.p,{children:"Return type: BOOLEAN"}),"\n",(0,s.jsx)(e.p,{children:"Return value meaning:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"true: if the array contains the specified value"}),"\n",(0,s.jsx)(e.li,{children:"false: if the array does not contain the specified value"}),"\n",(0,s.jsx)(e.li,{children:"NULL: if the input array is NULL"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Return value behavior description:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Boundary condition behavior:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Returns false when the input array is empty"}),"\n",(0,s.jsx)(e.li,{children:"Returns NULL when the input array is NULL"}),"\n",(0,s.jsx)(e.li,{children:"Returns false when array element type does not match the search value type"}),"\n",(0,s.jsx)(e.li,{children:"For null values in array elements: null elements are processed normally, can search for null elements in arrays"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Exception value behavior:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Returns unsupported error when array elements are of unsupported types"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Cases that return NULL:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"When the input array is NULL"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Type compatibility rules:"})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Numeric type compatibility"}),":\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Integer types can be compared with each other (TINYINT, SMALLINT, INT, BIGINT, LARGEINT)"}),"\n",(0,s.jsx)(e.li,{children:"Floating-point types can be compared with each other (FLOAT, DOUBLE)"}),"\n",(0,s.jsx)(e.li,{children:"Decimal types can be compared with each other (DECIMAL32, DECIMAL64, DECIMAL128I, DECIMALV2, DECIMAL256)"}),"\n",(0,s.jsx)(e.li,{children:"Integers and floating-point numbers can be compared with each other"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"String type compatibility"}),":\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"CHAR, VARCHAR, STRING types can be compared with each other"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Date and time type compatibility"}),":\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"DATE and DATEV2 can be compared with each other"}),"\n",(0,s.jsx)(e.li,{children:"DATETIME and DATETIMEV2 can be compared with each other"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Table creation example"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE array_contains_test (\n    id INT,\n    int_array ARRAY<INT>,\n    string_array ARRAY<STRING>\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 3\nPROPERTIES (\n    \"replication_num\" = \"1\"\n);\n\n-- Insert test data\nINSERT INTO array_contains_test VALUES\n(1, [1000, 2000, 3000], ['apple', 'banana', 'cherry']),\n(2, [], []),\n(3, NULL, NULL),\n(4, [1000, null, 3000], ['apple', null, 'cherry']);\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Query examples:"})}),"\n",(0,s.jsx)(e.p,{children:"Check if an array contains a specific integer value: This example returns false because 5 is not in int_array."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains(int_array, 5) FROM array_contains_test WHERE id = 1;\n+-------------------------------+\n| array_contains(int_array, 5)  |\n+-------------------------------+\n| 0                             |\n+-------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"Check if a string array contains a specific string: This example returns true because 'banana' is in string_array."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains(string_array, 'banana') FROM array_contains_test WHERE id = 1;\n+------------------------------------------+\n| array_contains(string_array, 'banana')   |\n+------------------------------------------+\n| 1                                        |\n+------------------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"Currently it is an empty array. This example returns false because there are no values in the empty array."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains(int_array, 1000) FROM array_contains_test WHERE id = 2;\n+----------------------------------+\n| array_contains(int_array, 1000)  |\n+----------------------------------+\n| 0                                |\n+----------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"Currently it is a NULL array, this example returns NULL."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains(int_array, 1000) FROM array_contains_test WHERE id = 3;\n+----------------------------------+\n| array_contains(int_array, 1000)  |\n+----------------------------------+\n| NULL                             |\n+----------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"Check if an array contains null\nIn this example, the value_expr parameter is null, and there are no null elements in the array, so it returns false."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains([1, 2, 3], null);\n+---------------------------------+\n| array_contains([1, 2, 3], null) |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"Check if an array contains null\nIn this example, the value_expr parameter is null, and the array contains SQL null values, so it returns true."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains([null, 1, 2], null);\n+------------------------------------+\n| array_contains([null, 1, 2], null) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"When the search value type is incompatible with array element type, returns false."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains([1, 2, 3], 'string');\n+-------------------------------------+\n| array_contains([1, 2, 3], 'string') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"When the search value type cannot be type-converted with array elements, an error is returned"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains([1, 2, 3], [4, 5, 6]);\nERROR 1105 (HY000): errCode = 2, detailMessage = can not cast from origin type ARRAY<TINYINT> to target type=TINYINT\n"})}),"\n",(0,s.jsx)(e.p,{children:"Unsupported complex types will throw an error. In this example, the array is a nested array type, returning an unsupported error."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT array_contains([[1,2],[2,3]], [1,2]);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.6)[RUNTIME_ERROR]execute failed or unsupported types for function array_contains(Array(Nullable(Array(Nullable(TINYINT)))), Array(Nullable(TINYINT)))\n"})}),"\n",(0,s.jsx)(e.h3,{id:"notes",children:"Notes"}),"\n",(0,s.jsx)(e.p,{children:"Performance considerations: When dealing with large arrays, if performance is a major concern, you can use inverted indexes for accelerated queries, but there are some usage restrictions to note:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"The property for creating an array inverted index can only be a non-tokenized index"}),"\n",(0,s.jsx)(e.li,{children:"The element type T of the array must be a data type that supports creating inverted indexes"}),"\n",(0,s.jsx)(e.li,{children:"If the query condition parameter T is NULL, the index cannot be used for acceleration"}),"\n",(0,s.jsx)(e.li,{children:"Index acceleration only occurs when the function is used as a predicate filter condition"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:'-- Table creation example\nCREATE TABLE `test_array_index` (\n    `apply_date` date NULL COMMENT \'\',\n    `id` varchar(60) NOT NULL COMMENT \'\',\n    `inventors` array<text> NULL COMMENT \'\' -- Add non-tokenized inverted index to array column when creating table\n  ) ENGINE=OLAP\n  DUPLICATE KEY(`apply_date`, `id`)\n  COMMENT \'OLAP\'\n  DISTRIBUTED BY HASH(`id`) BUCKETS 1\n  PROPERTIES (\n  "replication_allocation" = "tag.location.default: 1",\n  "is_being_synced" = "false",\n  "storage_format" = "V2",\n  "light_schema_change" = "true",\n  "disable_auto_compaction" = "false",\n  "enable_single_replica_compaction" = "false"\n  );\n-- Query example\nSELECT id, inventors FROM test_array_index WHERE array_contains(inventors, \'x\') ORDER BY id;\n'})}),"\n",(0,s.jsx)(e.h3,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsx)(e.p,{children:"ARRAY, CONTAIN, CONTAINS, ARRAY_CONTAINS"})]})}function h(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},250065:function(n,e,r){r.d(e,{Z:function(){return l},a:function(){return t}});var a=r(667294);let s={},i=a.createContext(s);function t(n){let e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);