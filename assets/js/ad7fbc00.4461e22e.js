"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["780498"],{722532:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>r,metadata:()=>l,assets:()=>c,toc:()=>o,contentTitle:()=>a});var l=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/json-functions/json-type","title":"JSON_TYPE","description":"Description","source":"@site/versioned_docs/version-3.x/sql-manual/sql-functions/scalar-functions/json-functions/json-type.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/json-functions","slug":"/sql-manual/sql-functions/scalar-functions/json-functions/json-type","permalink":"/docs/3.x/sql-manual/sql-functions/scalar-functions/json-functions/json-type","draft":false,"unlisted":false,"tags":[],"version":"3.x","frontMatter":{"title":"JSON_TYPE","language":"en"},"sidebar":"docs","previous":{"title":"JSON_SET","permalink":"/docs/3.x/sql-manual/sql-functions/scalar-functions/json-functions/json-set"},"next":{"title":"JSON_UNQUOTE","permalink":"/docs/3.x/sql-manual/sql-functions/scalar-functions/json-functions/json-unquote"}}'),i=s("785893"),t=s("250065");let r={title:"JSON_TYPE",language:"en"},a=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Alias",id:"alias",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Notes",id:"usage-notes",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["Used to determine the type of the field specified by ",(0,i.jsx)(n.code,{children:"json_path"})," in the JSONB data. If the field does not exist, it returns NULL. If the field exists, it returns one of the following types:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"object"}),"\n",(0,i.jsx)(n.li,{children:"array"}),"\n",(0,i.jsx)(n.li,{children:"null"}),"\n",(0,i.jsx)(n.li,{children:"bool"}),"\n",(0,i.jsx)(n.li,{children:"int"}),"\n",(0,i.jsx)(n.li,{children:"bigint"}),"\n",(0,i.jsx)(n.li,{children:"largeint"}),"\n",(0,i.jsx)(n.li,{children:"double"}),"\n",(0,i.jsx)(n.li,{children:"string"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"JSON_TYPE( <json>, <json_path> )\n"})}),"\n",(0,i.jsx)(n.h2,{id:"alias",children:"Alias"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"JSONB_TYPE"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<json>"})," The JSON string to check the type of."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<json_path>"})," String type, which specifies the location of the field in JSON. The path is usually given in $. At the beginning, use. to represent the hierarchical structure."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Nullable<String>"}),": Returns the type of the corresponding field."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"<json_object>"})," or ",(0,i.jsx)(n.code,{children:"<json_path>"})," is NULL, returns NULL."]}),"\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"<json_path>"})," is not a valid path, the function reports an error."]}),"\n",(0,i.jsxs)(n.li,{children:["If the field specified by ",(0,i.jsx)(n.code,{children:"<json_path>"})," does not exist, returns NULL."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"JSON is of string type:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT JSON_TYPE(\'{"name": "John", "age": 30}\', \'$.name\');\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'+-------------------------------------------------------------------+\n| jsonb_type(cast(\'{"name": "John", "age": 30}\' as JSON), \'$.name\') |\n+-------------------------------------------------------------------+\n| string                                                            |\n+-------------------------------------------------------------------+\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"JSON is of number type:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT JSON_TYPE(\'{"name": "John", "age": 30}\', \'$.age\');\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'+------------------------------------------------------------------+\n| jsonb_type(cast(\'{"name": "John", "age": 30}\' as JSON), \'$.age\') |\n+------------------------------------------------------------------+\n| int                                                              |\n+------------------------------------------------------------------+\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"NULL parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select json_type(NULL, '$.key1');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"+---------------------------+\n| json_type(NULL, '$.key1') |\n+---------------------------+\n| NULL                      |\n+---------------------------+\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"NULL parameters 2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select json_type('{\"key1\": true}', NULL);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"+-----------------------------------+\n| json_type('{\"key1\": true}', NULL) |\n+-----------------------------------+\n| NULL                              |\n+-----------------------------------+\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Field specified by ",(0,i.jsx)(n.code,{children:"json_path"})," parameter does not exist"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select json_type('{\"key1\": true}', '$.key2');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"+---------------------------------------+\n| json_type('{\"key1\": true}', '$.key2') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Invalid ",(0,i.jsx)(n.code,{children:"json_path"})," parameter"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select json_type('{\"key1\": true}', '$.');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"ERROR 1105 (HY000): errCode = 2, detailMessage = [INVALID_ARGUMENT]Json path error: Invalid Json Path for value: $.\n"})}),"\n"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return r}});var l=s(667294);let i={},t=l.createContext(i);function r(e){let n=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);