"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["954950"],{891934:function(e,n,s){s.r(n),s.d(n,{default:()=>d,frontMatter:()=>r,metadata:()=>t,assets:()=>c,toc:()=>o,contentTitle:()=>a});var t=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftleft","title":"BIT_SHIFT_LEFT","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftleft.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/bitwise-functions","slug":"/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftleft","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftleft","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"BIT_SHIFT_LEFT","language":"en"},"sidebar":"docs","previous":{"title":"BITOR","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitor"},"next":{"title":"BIT_SHIFT_RIGHT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/bitwise-functions/bitshiftright"}}'),i=s("785893"),l=s("250065");let r={title:"BIT_SHIFT_LEFT",language:"en"},a=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function u(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Performs a left shift operation, which moves all bits of a binary number to the left by a specified number of positions. This is a form of bitwise operation, commonly used for handling binary data or efficient mathematical calculations."}),"\n",(0,i.jsx)(n.p,{children:"For the maximum value of BIGINT type (9223372036854775807), shifting left by one position results in -2."}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"BIT_SHIFT_LEFT(<x>, <bits>)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<x>"}),": The number to be shifted."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<bits>"}),": The number of positions to shift left. It is an integer that determines how many positions ",(0,i.jsx)(n.code,{children:"<x>"})," will be shifted."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)(n.p,{children:"Returns an integer representing the result after the left shift operation."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Example 1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select BIT_SHIFT_LEFT(5, 2), BIT_SHIFT_LEFT(-5, 2), BIT_SHIFT_LEFT(9223372036854775807, 1);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"+----------------------+-----------------------+----------------------------------------+\n| BIT_SHIFT_LEFT(5, 2) | BIT_SHIFT_LEFT(-5, 2) | BIT_SHIFT_LEFT(9223372036854775807, 1) |\n+----------------------+-----------------------+----------------------------------------+\n|                   20 |                   -20 |                                     -2 |\n+----------------------+-----------------------+----------------------------------------+\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"NULL argument"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select BIT_SHIFT_LEFT(5, NULL), BIT_SHIFT_LEFT(NULL, 2), BIT_SHIFT_LEFT(NULL, NULL);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"+-------------------------+-------------------------+----------------------------+\n| BIT_SHIFT_LEFT(5, NULL) | BIT_SHIFT_LEFT(NULL, 2) | BIT_SHIFT_LEFT(NULL, NULL) |\n+-------------------------+-------------------------+----------------------------+\n|                    NULL |                    NULL |                       NULL |\n+-------------------------+-------------------------+----------------------------+\n"})}),"\n"]}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return r}});var t=s(667294);let i={},l=t.createContext(i);function r(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);