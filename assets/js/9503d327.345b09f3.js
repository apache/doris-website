"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["966434"],{527752:function(e,n,s){s.r(n),s.d(n,{default:()=>u,frontMatter:()=>t,metadata:()=>i,assets:()=>c,toc:()=>d,contentTitle:()=>l});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-cidr-to-range","title":"IPV4_CIDR_TO_RANGE","description":"ipv4cidrto_range","source":"@site/docs/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-cidr-to-range.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/ip-functions","slug":"/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-cidr-to-range","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-cidr-to-range","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"IPV4_CIDR_TO_RANGE","language":"en"},"sidebar":"docs","previous":{"title":"CUT_IPV6","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/cut-ipv6"},"next":{"title":"IPV4_NUM_TO_STRING","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-num-to-string"}}'),r=s("785893"),a=s("250065");let t={title:"IPV4_CIDR_TO_RANGE",language:"en"},l=void 0,c={},d=[{value:"ipv4_cidr_to_range",id:"ipv4_cidr_to_range",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Usage Notes",id:"usage-notes",level:3},{value:"Examples",id:"examples",level:2},{value:"Keywords",id:"keywords",level:3}];function o(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"ipv4_cidr_to_range",children:"ipv4_cidr_to_range"}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Calculates the minimum and maximum IPv4 addresses for a network segment based on an IPv4 address and CIDR prefix length, returning a struct containing two IPv4 addresses."}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"IPV4_CIDR_TO_RANGE(<ipv4_address>, <cidr_prefix>)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<ipv4_address>"}),": IPv4 type address"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<cidr_prefix>"}),": CIDR prefix length (SMALLINT type, range 0-32)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsx)(n.p,{children:"Return Type: STRUCT<min: IPv4, max: IPv4>"}),"\n",(0,r.jsx)(n.p,{children:"Return Value Meaning:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns a struct containing two fields:\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min"}),": Minimum IPv4 address of the network segment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"max"}),": Maximum IPv4 address of the network segment"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CIDR prefix length must be within the range 0-32"}),"\n",(0,r.jsx)(n.li,{children:"Calculation is based on network mask, setting all host bits to zero for minimum address and all host bits to one for maximum address"}),"\n",(0,r.jsx)(n.li,{children:"Supports various combinations of constant parameters and column parameters"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"Calculate address range for /24 network segment."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'SELECT ipv4_cidr_to_range(INET_ATON(\'192.168.1.1\'), 24) as range;\n+----------------------------------------+\n| range                                  |\n+----------------------------------------+\n| {"min": "192.168.1.0", "max": "192.168.1.255"} |\n+----------------------------------------+\n'})}),"\n",(0,r.jsx)(n.p,{children:"Calculate address range for /16 network segment."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'SELECT ipv4_cidr_to_range(INET_ATON(\'10.0.0.1\'), 16) as range;\n+----------------------------------------+\n| range                                  |\n+----------------------------------------+\n| {"min": "10.0.0.0", "max": "10.255.255.255"} |\n+----------------------------------------+\n'})}),"\n",(0,r.jsx)(n.p,{children:"Access specific fields in the struct."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT \n  ipv4_cidr_to_range(INET_ATON('172.16.1.1'), 24).min as min_ip,\n  ipv4_cidr_to_range(INET_ATON('172.16.1.1'), 24).max as max_ip;\n+-------------+-------------+\n| min_ip      | max_ip      |\n+-------------+-------------+\n| 172.16.1.0  | 172.16.1.255 |\n+-------------+-------------+\n"})}),"\n",(0,r.jsx)(n.p,{children:"CIDR prefix out of range throws an exception."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT ipv4_cidr_to_range(INET_ATON('192.168.1.1'), 33);\nERROR 1105 (HY000): errCode = 2, detailMessage = (...)[INVALID_ARGUMENT]Illegal cidr value '33'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"keywords",children:"Keywords"}),"\n",(0,r.jsx)(n.p,{children:"IPV4_CIDR_TO_RANGE"})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return t}});var i=s(667294);let r={},a=i.createContext(r);function t(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);