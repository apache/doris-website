"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["491694"],{437227:function(e,n,a){a.r(n),a.d(n,{default:()=>p,frontMatter:()=>t,metadata:()=>r,assets:()=>c,toc:()=>o,contentTitle:()=>i});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-map","title":"ARRAY_MAP","description":"array_map","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-map.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-map","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-map","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_MAP","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_LAST_INDEX","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-last-index"},"next":{"title":"ARRAY_MATCH_ALL","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-match-all"}}'),s=a("785893"),l=a("250065");let t={title:"ARRAY_MAP",language:"en"},i=void 0,c={},o=[{value:"array_map",id:"array_map",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Keywords",id:"keywords",level:3}];function d(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",r:"r",strong:"strong",t:"t",ul:"ul",version:"version",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"array_map",children:"array_map"}),"\n",(0,s.jsx)(n.version,{since:"2.0.0",children:"\n"}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Applies a lambda expression to elements in an array and returns a new array. The function applies the lambda expression to each element in the array and returns the corresponding result."}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"array_map(lambda, ARRAY<T> arr1, [ARRAY<T> arr2, ...])\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lambda"}),"\uFF1Alambda expression used to define transformation rules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"arr1, arr2, ..."}),"\uFF1AARRAY",(0,s.jsx)(n.t,{children:" type, arrays to be transformed. Supports one or more array parameters."})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported types for T:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,s.jsx)(n.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,s.jsx)(n.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,s.jsx)(n.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,s.jsx)(n.li,{children:"IP types: IPV4, IPV6"}),"\n",(0,s.jsx)(n.li,{children:"Complex types: ARRAY, MAP, STRUCT"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:["Return type: ARRAY",(0,s.jsx)(n.r,{})]}),"\n",(0,s.jsx)(n.p,{children:"Return value meaning:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a new array with the same length as the input array, where each position contains the result of applying the lambda expression to the corresponding element"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Usage notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The number of parameters in the lambda expression must match the number of array parameters"}),"\n",(0,s.jsx)(n.li,{children:"Does not support NULL for input array parameters"}),"\n",(0,s.jsx)(n.li,{children:"When there are multiple array parameters, all arrays must have the same length"}),"\n",(0,s.jsx)(n.li,{children:"Lambda can use any scalar expression, but cannot use aggregate functions"}),"\n",(0,s.jsx)(n.li,{children:"Lambda expressions can call other higher-order functions, but the return types must be compatible"}),"\n",(0,s.jsx)(n.li,{children:"For null values in array elements: null elements will be passed to the lambda expression for processing, and lambda can check for null values"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Query Examples:"})}),"\n",(0,s.jsx)(n.p,{children:"Square each element in the array:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> x * x, [1, 2, 3, 4, 5]);\n+------------------------------------------+\n| array_map(x -> x * x, [1, 2, 3, 4, 5]) |\n+------------------------------------------+\n| [1, 4, 9, 16, 25]                       |\n+------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Round each element in a floating-point array:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> round(x), [1.1, 2.7, 3.3, 4.9, 5.5]);\n+--------------------------------------------------+\n| array_map(x -> round(x), [1.1, 2.7, 3.3, 4.9, 5.5]) |\n+--------------------------------------------------+\n| [1, 3, 3, 5, 6]                                 |\n+--------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Calculate the length of each element in a string array:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> length(x), ['a', 'bb', 'ccc', 'dddd', 'eeeee']);\n+--------------------------------------------------+\n| array_map(x -> length(x), ['a', 'bb', 'ccc', 'dddd', 'eeeee']) |\n+--------------------------------------------------+\n| [1, 2, 3, 4, 5]                                 |\n+--------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Process an array containing null values:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> x is not null, [1, null, 3, null, 5]);\n+--------------------------------------------------+\n| array_map(x -> x is not null, [1, null, 3, null, 5]) |\n+--------------------------------------------------+\n| [1, 0, 1, 0, 1]                                 |\n+--------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"NULL can not apply to array_map, will meet error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mysql> SELECT array_map(x->x>2, NULL);\nERROR 1105 (HY000): errCode = 2, detailMessage = lambda argument must be array but is NULL\n"})}),"\n",(0,s.jsx)(n.p,{children:"Multiple array parameters example, adding corresponding elements from two arrays:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map((x, y) -> x + y, [1, 2, 3, 4, 5], [10, 20, 30, 40, 50]);\n+--------------------------------------------------+\n| array_map((x, y) -> x + y, [1, 2, 3, 4, 5], [10, 20, 30, 40, 50]) |\n+--------------------------------------------------+\n| [11, 22, 33, 44, 55]                             |\n+--------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nested array processing, calculating the length of each sub-array:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> size(x), [[1,2],[3,4,5],[6],[7,8,9,10]]);\n+--------------------------------------------------+\n| array_map(x -> size(x), [[1,2],[3,4,5],[6],[7,8,9,10]]) |\n+--------------------------------------------------+\n| [2, 3, 1, 4]                                     |\n+--------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Map type processing, extracting the value with key 'a' from each map:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> x['a'], [{'a':1,'b':2}, {'a':3,'b':4}, {'a':5,'b':6}]);\n+--------------------------------------------------+\n| array_map(x -> x['a'], [{'a':1,'b':2}, {'a':3,'b':4}, {'a':5,'b':6}]) |\n+--------------------------------------------------+\n| [1, 3, 5]                                        |\n+--------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Error when parameter count is wrong:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map();\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not found function 'array_map' which has 0 arity. Candidate functions are: [array_map(Expression, Expression...)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Error when the number of parameters in lambda expression doesn't match the number of array parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> x > 0, [1,2,3], [4,5,6], [7,8,9]);\nERROR 1105 (HY000): errCode = 2, detailMessage = lambda x -> (x > 0) arguments' size is not equal parameters' size\n"})}),"\n",(0,s.jsx)(n.p,{children:"Error when passing non-array type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT array_map(x -> x * 2, 'not_an_array');\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: array_map(Expression, VARCHAR(12))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsx)(n.p,{children:"ARRAY, MAP, ARRAY_MAP"})]})}function p(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,a){a.d(n,{Z:function(){return i},a:function(){return t}});var r=a(667294);let s={},l=r.createContext(s);function t(e){let n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);