"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["704244"],{465911:function(e,n,s){s.r(n),s.d(n,{default:()=>d,frontMatter:()=>i,metadata:()=>t,assets:()=>r,toc:()=>u,contentTitle:()=>o});var t=JSON.parse('{"id":"sql-manual/sql-functions/window-functions/cume-dist","title":"CUME_DIST","description":"Description","source":"@site/versioned_docs/version-2.1/sql-manual/sql-functions/window-functions/cume-dist.md","sourceDirName":"sql-manual/sql-functions/window-functions","slug":"/sql-manual/sql-functions/window-functions/cume-dist","permalink":"/docs/2.1/sql-manual/sql-functions/window-functions/cume-dist","draft":false,"unlisted":false,"tags":[],"version":"2.1","frontMatter":{"title":"CUME_DIST","language":"en"},"sidebar":"docs","previous":{"title":"UNION","permalink":"/docs/2.1/sql-manual/sql-functions/combinators/union"},"next":{"title":"DENSE_RANK","permalink":"/docs/2.1/sql-manual/sql-functions/window-functions/dense-rank"}}'),a=s("785893"),l=s("250065");let i={title:"CUME_DIST",language:"en"},o=void 0,r={},u=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function c(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"CUME_DIST (Cumulative Distribution) is a window function that calculates the relative ranking of the current row value in the sorted result set. It returns the cumulative distribution value of the current row in the result set, ranging from 0 to 1. For a given row, its cumulative distribution value equals: (number of rows less than or equal to the current row value) / (total number of rows in the window partition)."}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CUME_DIST()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsx)(n.p,{children:"Returns a DOUBLE value ranging from 0 to 1."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"Suppose we have a table called sales containing sales data, including salesperson name (sales_person), sales amount (sales_amount), and sales date (sales_date). We want to calculate the cumulative percentage of each salesperson's sales amount for each sales date."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT \n    sales_person,\n    sales_date,\n    sales_amount,\n    CUME_DIST() OVER (PARTITION BY sales_date ORDER BY sales_amount ASC) AS cumulative_sales_percentage\nFROM \n    sales;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Assume the sales table contains the following data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"+------+--------------+------------+--------------+\n| id   | sales_person | sales_date | sales_amount |\n+------+--------------+------------+--------------+\n|    1 | Alice        | 2024-02-01 |         2000 |\n|    2 | Bob          | 2024-02-01 |         1500 |\n|    3 | Alice        | 2024-02-02 |         1800 |\n|    4 | Bob          | 2024-02-02 |         1200 |\n|    5 | Alice        | 2024-02-03 |         2200 |\n|    6 | Bob          | 2024-02-03 |         1900 |\n|    7 | Tom          | 2024-02-03 |         2000 |\n|    8 | Jerry        | 2024-02-03 |         2000 |\n+------+--------------+------------+--------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"After executing the above SQL query, the result will show each salesperson's sales amount and their cumulative percentage ranking for each sales date:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"+--------------+------------+--------------+-----------------------------+\n| sales_person | sales_date | sales_amount | cumulative_sales_percentage |\n+--------------+------------+--------------+-----------------------------+\n| Bob          | 2024-02-01 |         1500 |                         0.5 |\n| Alice        | 2024-02-01 |         2000 |                           1 |\n| Bob          | 2024-02-02 |         1200 |                         0.5 |\n| Alice        | 2024-02-02 |         1800 |                           1 |\n| Bob          | 2024-02-03 |         1900 |                        0.25 |\n| Tom          | 2024-02-03 |         2000 |                        0.75 |\n| Jerry        | 2024-02-03 |         2000 |                        0.75 |\n| Alice        | 2024-02-03 |         2200 |                           1 |\n+--------------+------------+--------------+-----------------------------+\n"})}),"\n",(0,a.jsx)(n.p,{children:"In this example, the CUME_DIST() function sorts sales amounts within each sales date and then calculates the cumulative percentage of each salesperson's sales amount for that date. Since we used PARTITION BY sales_date, the calculations are performed separately for each sales date, with salesperson sales amounts being calculated independently for different dates."})]})}function d(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return o},a:function(){return i}});var t=s(667294);let a={},l=t.createContext(a);function i(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);