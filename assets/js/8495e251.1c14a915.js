"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["211469"],{974446:function(e,n,r){r.r(n),r.d(n,{default:()=>u,frontMatter:()=>s,metadata:()=>a,assets:()=>c,toc:()=>d,contentTitle:()=>l});var a=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/array-functions/array-distinct","title":"ARRAY_DISTINCT","description":"array_distinct","source":"@site/docs/sql-manual/sql-functions/scalar-functions/array-functions/array-distinct.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/array-functions","slug":"/sql-manual/sql-functions/scalar-functions/array-functions/array-distinct","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-distinct","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ARRAY_DISTINCT","language":"en"},"sidebar":"docs","previous":{"title":"ARRAY_DIFFERENCE","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-difference"},"next":{"title":"ARRAY_ENUMERATE","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/array-functions/array-enumerate"}}'),t=r("785893"),i=r("250065");let s={title:"ARRAY_DISTINCT",language:"en"},l=void 0,c={},d=[{value:"array_distinct",id:"array_distinct",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Examples",id:"examples",level:3},{value:"Keywords",id:"keywords",level:3}];function o(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",version:"version",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"array_distinct",children:"array_distinct"}),"\n",(0,t.jsx)(n.version,{since:"2.0.0",children:"\n"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Removes duplicate elements from an array and returns a new array containing unique elements. The function maintains the original order of elements, keeping only the first occurrence of each element."}),"\n",(0,t.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"array_distinct(ARRAY<T> arr)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"arr"}),"\uFF1AARRAY<T> type, the array to deduplicate. Supports column names or constant values."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"T supported types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,t.jsx)(n.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,t.jsx)(n.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,t.jsx)(n.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,t.jsx)(n.li,{children:"IP types: IPV4, IPV6"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsx)(n.p,{children:"Return type: ARRAY<T>"}),"\n",(0,t.jsx)(n.p,{children:"Return value meaning:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The deduplicated array containing all unique elements from the original array"}),"\n",(0,t.jsx)(n.li,{children:"Maintains the original order of elements"}),"\n",(0,t.jsx)(n.li,{children:"NULL: if the input array is NULL"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Usage notes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The function traverses the array from left to right, keeping the first occurrence of each element and removing subsequent duplicate elements"}),"\n",(0,t.jsx)(n.li,{children:"Empty array returns empty array, NULL array returns NULL"}),"\n",(0,t.jsx)(n.li,{children:"Deduplication maintains the relative order of elements in the original array, does not reorder"}),"\n",(0,t.jsx)(n.li,{children:"For null values in array elements: null elements will be deduplicated, multiple nulls only keep one"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query examples:"})}),"\n",(0,t.jsx)(n.p,{children:"Integer array deduplication, the original array [1, 2, 3, 4, 5] has no duplicate elements, so the result after deduplication is the same as the original array."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct([1, 2, 3, 4, 5]);\n+---------------------------------+\n| array_distinct([1, 2, 3, 4, 5]) |\n+---------------------------------+\n| [1, 2, 3, 4, 5]                 |\n+---------------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"String array deduplication: removes duplicate string elements. In the original array ['a', 'b', 'a', 'c', 'b', 'd'], 'a' appears twice (keeping the first occurrence), 'b' appears twice (keeping the first occurrence), after deduplication it becomes [\"a\", \"b\", \"c\", \"d\"]."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct(['a', 'b', 'a', 'c', 'b', 'd']);\n+------------------------------------------------+\n| array_distinct(['a', 'b', 'a', 'c', 'b', 'd']) |\n+------------------------------------------------+\n| [\"a\", \"b\", \"c\", \"d\"]                           |\n+------------------------------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Array containing null values: null elements will also be deduplicated, multiple nulls only keep one. In the original array [1, null, 2, null, 3, null], null appears three times, after deduplication only the first null is kept, resulting in [1, null, 2, 3]."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct([1, null, 2, null, 3, null]);\n+---------------------------------------------+\n| array_distinct([1, null, 2, null, 3, null]) |\n+---------------------------------------------+\n| [1, null, 2, 3]                             |\n+---------------------------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"IP type array deduplication: deduplication of IPv4 address array. In the original array ['192.168.1.1', '192.168.1.2', '192.168.1.1'], '192.168.1.1' appears twice, after deduplication only the first occurrence of the address is kept, resulting in [192.168.1.1, 192.168.1.2]."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct(CAST(['192.168.1.1', '192.168.1.2', '192.168.1.1'] AS ARRAY<IPV4>));\n+------------------------------------------------------------------------------------+\n| array_distinct(CAST(['192.168.1.1', '192.168.1.2', '192.168.1.1'] AS ARRAY<IPV4>)) |\n+------------------------------------------------------------------------------------+\n| [\"192.168.1.1\", \"192.168.1.2\"]                                                     |\n+------------------------------------------------------------------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"IPv6 type array deduplication: deduplication of IPv6 address array. In the original array ['2001:db8::1', '2001:db8::2', '2001:db8::1'], '2001:db8::1' appears twice, after deduplication only the first occurrence of the address is kept, resulting in [2001:db8::1, 2001:db8::2]."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct(CAST(['2001:db8::1', '2001:db8::2', '2001:db8::1'] AS ARRAY<IPV6>));\n+------------------------------------------------------------------------------------+\n| array_distinct(CAST(['2001:db8::1', '2001:db8::2', '2001:db8::1'] AS ARRAY<IPV6>)) |\n+------------------------------------------------------------------------------------+\n| [\"2001:db8::1\", \"2001:db8::2\"]                                                     |\n+------------------------------------------------------------------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Empty array returns empty array: empty array has no elements to deduplicate, directly returns empty array."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"+--------------------+\n| array_distinct([]) |\n+--------------------+\n| []                 |\n+--------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"NULL array returns NULL: returning NULL when the input array is NULL without throwing an error."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"+----------------------+\n| array_distinct(NULL) |\n+----------------------+\n| NULL                 |\n+----------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Single element array returns the original array: array with only one element has no duplicate elements, the result after deduplication is the same as the original array."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct([42]);\n+----------------------+\n| array_distinct([42]) |\n+----------------------+\n| [42]                 |\n+----------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Complex types not supported:"}),"\n",(0,t.jsx)(n.p,{children:"Nested array type not supported, throws error."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct([[1,2,3], [4,5,6], [1,2,3]]);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.6)[RUNTIME_ERROR]execute failed or unsupported types for function array_distinct(Array(Nullable(Array(Nullable(TINYINT)))))\n"})}),"\n",(0,t.jsx)(n.p,{children:"Map type not supported, throws error."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct([{'a':1}, {'b':2}, {'a':1}]);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.6)[RUNTIME_ERROR]execute failed or unsupported types for function array_distinct(Array(Nullable(Map(Nullable(String), Nullable(TINYINT)))))\n"})}),"\n",(0,t.jsx)(n.p,{children:"Struct type not supported, throws error."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct(array(named_struct('name','Alice','age',20), named_struct('name','Bob','age',30), named_struct('name','Alice','age',20)));\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.6)[RUNTIME_ERROR]execute failed or unsupported types for function array_distinct(Array(Nullable(Struct(name:Nullable(String), age:Nullable(TINYINT)))))\n"})}),"\n",(0,t.jsx)(n.p,{children:"Incorrect number of parameters will cause an error: the array_distinct function only accepts one array parameter, passing multiple parameters will cause an error."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct([1, 2, 3], [4, 5, 6]);\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not found function 'array_distinct' which has 2 arity. Candidate functions are: [array_distinct(Expression)]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Passing non-array type will cause an error: the array_distinct function only accepts array type parameters, passing non-array types like strings will cause an error."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT array_distinct('not_an_array');\nERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: array_distinct(VARCHAR(12))\n"})}),"\n",(0,t.jsx)(n.h3,{id:"keywords",children:"Keywords"}),"\n",(0,t.jsx)(n.p,{children:"ARRAY, DISTINCT, ARRAY_DISTINCT"})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return l},a:function(){return s}});var a=r(667294);let t={},i=a.createContext(t);function s(e){let n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);