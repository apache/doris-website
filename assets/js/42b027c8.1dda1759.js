"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["344380"],{344378:function(e,n,t){t.r(n),t.d(n,{default:()=>d,frontMatter:()=>c,metadata:()=>s,assets:()=>i,toc:()=>u,contentTitle:()=>a});var s=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/struct-functions/struct","title":"STRUCT","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/struct-functions/struct.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/struct-functions","slug":"/sql-manual/sql-functions/scalar-functions/struct-functions/struct","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/struct-functions/struct","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"STRUCT","language":"en-US"},"sidebar":"docs","previous":{"title":"NAMED_STRUCT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/struct-functions/named-struct"},"next":{"title":"STRUCT_ELEMENT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/struct-functions/struct-element"}}'),r=t("785893"),l=t("250065");let c={title:"STRUCT",language:"en-US"},a=void 0,i={},u=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2}];function o(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",t:"t",ul:"ul",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Constructs and returns a struct based on given values. The function accepts one or more parameters and returns a struct containing all input elements."}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"STRUCT( <expr1> [ , <expr2> ... ] )\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<expr1>, <expr2>, ..."}),": Input content for constructing the struct, supports one or more parameters"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supported element types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Numeric types: TINYINT, SMALLINT, INT, BIGINT, LARGEINT, FLOAT, DOUBLE, DECIMAL"}),"\n",(0,r.jsx)(n.li,{children:"String types: CHAR, VARCHAR, STRING"}),"\n",(0,r.jsx)(n.li,{children:"Date and time types: DATE, DATETIME, DATEV2, DATETIMEV2"}),"\n",(0,r.jsx)(n.li,{children:"Boolean type: BOOLEAN"}),"\n",(0,r.jsx)(n.li,{children:"IP types: IPV4, IPV6"}),"\n",(0,r.jsx)(n.li,{children:"Complex types: ARRAY, MAP, STRUCT"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.p,{children:["Return type: STRUCT",(0,r.jsx)(n.t,{})]}),"\n",(0,r.jsx)(n.p,{children:"Return value meaning:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Returns a struct containing all input elements, field names default to col1, col2, col3, ... format"}),"\n",(0,r.jsx)(n.li,{children:"All fields support NULL values"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The function combines all input elements into a struct"}),"\n",(0,r.jsx)(n.li,{children:"At least one parameter is required"}),"\n",(0,r.jsx)(n.li,{children:"All fields are marked as nullable"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Query Examples:"})}),"\n",(0,r.jsx)(n.p,{children:"Basic usage: Creating a struct containing mixed types with null fields"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'select struct(1, \'a\', "abc"),struct(null, 1, null),struct(cast(\'2023-03-16\' as datetime));\n+--------------------------------------+--------------------------------------+----------------------------------------+\n| struct(1, \'a\', "abc")                | struct(null, 1, null)                | struct(cast(\'2023-03-16\' as datetime)) |\n+--------------------------------------+--------------------------------------+----------------------------------------+\n| {"col1":1, "col2":"a", "col3":"abc"} | {"col1":null, "col2":1, "col3":null} | {"col1":"2023-03-16 00:00:00"}         |\n+--------------------------------------+--------------------------------------+----------------------------------------+\n'})}),"\n",(0,r.jsx)(n.p,{children:"Creating a struct containing complex types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select struct([1,2,3], {'name':'Alice','age':20}, named_struct('f1',1,'f2',2));\n+----------------------------------------------------------------------------------+\n| struct([1,2,3], {'name':'Alice','age':20}, named_struct('f1',1,'f2',2))          |\n+----------------------------------------------------------------------------------+\n| {\"col1\":[1, 2, 3], \"col2\":{\"name\":\"Alice\", \"age\":\"20\"}, \"col3\":{\"f1\":1, \"f2\":2}} |\n+----------------------------------------------------------------------------------+\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creating a struct containing IP addresses:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select struct(cast('192.168.1.1' as ipv4), cast('2001:db8::1' as ipv6));\n+------------------------------------------------------------------+\n| struct(cast('192.168.1.1' as ipv4), cast('2001:db8::1' as ipv6)) |\n+------------------------------------------------------------------+\n| {\"col1\":\"192.168.1.1\", \"col2\":\"2001:db8::1\"}                     |\n+------------------------------------------------------------------+\n"})}),"\n",(0,r.jsx)(n.p,{children:"Error Examples"}),"\n",(0,r.jsx)(n.p,{children:"Unsupported types will report error:\nCreating struct containing Json/Variant types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select struct(v) from var_with_index;\nERROR 1105 (HY000): errCode = 2, detailMessage = struct does not support jsonb/variant type\n\nselect struct(cast(1 as jsonb)) from var_with_index;\nERROR 1105 (HY000): errCode = 2, detailMessage = struct does not support jsonb/variant type\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creating empty struct will report error, at least one parameter is required, consistent with hive behavior:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"select struct();\nERROR 1105 (HY000): errCode = 2, detailMessage = struct requires at least one argument, like: struct(1)\n"})})]})}function d(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return c}});var s=t(667294);let r={},l=s.createContext(r);function c(e){let n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);