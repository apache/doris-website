"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["276492"],{660996:function(e,n,s){s.r(n),s.d(n,{default:()=>u,frontMatter:()=>i,metadata:()=>t,assets:()=>c,toc:()=>o,contentTitle:()=>a});var t=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/json-functions/json-extract-string","title":"JSON_EXTRACT_STRING","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/json-functions/json-extract-string.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/json-functions","slug":"/sql-manual/sql-functions/scalar-functions/json-functions/json-extract-string","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-extract-string","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"JSON_EXTRACT_STRING","language":"en"},"sidebar":"docs","previous":{"title":"JSON_EXTRACT_LARGEINT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-extract-largeint"},"next":{"title":"JSON_HASH","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-hash"}}'),l=s("785893"),r=s("250065");let i={title:"JSON_EXTRACT_STRING",language:"en"},a=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Notes",id:"usage-notes",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"JSON_EXTRACT_STRING"})," extracts the field specified by ",(0,l.jsx)(n.code,{children:"<json_path>"})," from a JSON object and converts it to ",(0,l.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/string-type/STRING",children:(0,l.jsx)(n.code,{children:"STRING"})})," type."]}),"\n",(0,l.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"JSON_EXTRACT_STRING(<json_object>, <json_path>)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<json_object>"}),": JSON type, the target parameter to extract from."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<json_path>"}),": String type, the JSON path to extract the target element from the target JSON."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Nullable(STRING)"})," Returns the extracted STRING value, returns NULL in some cases"]}),"\n",(0,l.jsx)(n.h2,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["If ",(0,l.jsx)(n.code,{children:"<json_object>"})," or ",(0,l.jsx)(n.code,{children:"<json_path>"})," is NULL, returns NULL."]}),"\n",(0,l.jsxs)(n.li,{children:["If the element specified by ",(0,l.jsx)(n.code,{children:"<json_path>"})," does not exist, returns NULL."]}),"\n",(0,l.jsxs)(n.li,{children:["If the element specified by ",(0,l.jsx)(n.code,{children:"<json_path>"})," cannot be converted to STRING, returns NULL."]}),"\n",(0,l.jsxs)(n.li,{children:['Its behavior is consistent with "cast + json_extract", which is equivalent to:\n',(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CAST(JSON_EXTRACT(<json_object>, <json_path>) as STRING)\n"})}),"\nSo even if the object pointed to by ",(0,l.jsx)(n.code,{children:"<json_path>"})," is not of STRING type, as long as it supports conversion to STRING type, you can get the converted value."]}),"\n",(0,l.jsx)(n.li,{children:'The STRING returned here does not contain double quotes (").'}),"\n",(0,l.jsxs)(n.li,{children:['For null values in JSON objects, the result is not NULL but the string "null".\nIf you want to check whether an element is null, please use the function  ',(0,l.jsx)(n.a,{href:"/docs/dev/sql-manual/sql-functions/scalar-functions/json-functions/json-extract-isnull",children:(0,l.jsx)(n.code,{children:"JSON_EXTRACT_ISNULL"})}),"\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Normal parameters\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT json_extract_string(\'{"id": 123, "name": "doris"}\', \'$.name\');\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+---------------------------------------------------------------+\n| json_extract_string(\'{"id": 123, "name": "doris"}\', \'$.name\') |\n+---------------------------------------------------------------+\n| doris                                                         |\n+---------------------------------------------------------------+\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Case where path does not exist\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT json_extract_string(\'{"id": 123, "name": "doris"}\', \'$.name2\');\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+----------------------------------------------------------------+\n| json_extract_string(\'{"id": 123, "name": "doris"}\', \'$.name2\') |\n+----------------------------------------------------------------+\n| NULL                                                           |\n+----------------------------------------------------------------+\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["NULL parameters\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT json_extract_string(\'{"id": 123, "name": "doris"}\', NULl);\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+-----------------------------------------------------------+\n| json_extract_string(\'{"id": 123, "name": "doris"}\', NULl) |\n+-----------------------------------------------------------+\n| NULL                                                      |\n+-----------------------------------------------------------+\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT json_extract_string(NULL, '$.id2');\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+------------------------------------+\n| json_extract_string(NULL, '$.id2') |\n+------------------------------------+\n| NULL                               |\n+------------------------------------+\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Case where other types are converted to STRING\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT json_extract_string(\'{"id": 123, "name": "doris"}\',\'$.id\');\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+------------------------------------------------------------+\n| json_extract_string(\'{"id": 123, "name": "doris"}\',\'$.id\') |\n+------------------------------------------------------------+\n| 123                                                        |\n+------------------------------------------------------------+\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:['Null values will be converted to string "null" instead of NULL\n',(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'SELECT json_extract_string(\'{"id": null, "name": "doris"}\',\'$.id\');\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'+-------------------------------------------------------------+\n| json_extract_string(\'{"id": null, "name": "doris"}\',\'$.id\') |\n+-------------------------------------------------------------+\n| null                                                        |\n+-------------------------------------------------------------+\n'})}),"\n"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return i}});var t=s(667294);let l={},r=t.createContext(l);function i(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);