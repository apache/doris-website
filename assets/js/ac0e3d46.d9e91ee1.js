"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["330990"],{984145:function(e,n,i){i.r(n),i.d(n,{default:()=>h,frontMatter:()=>s,metadata:()=>r,assets:()=>d,toc:()=>o,contentTitle:()=>l});var r=JSON.parse('{"id":"query-acceleration/materialized-view/async-materialized-view/functions-and-demands","title":"Creating, Querying, and Maintaining Asynchronous Materialized Views","description":"This document provides detailed information about materialized view creation, direct querying of materialized views, query rewriting, and common maintenance operations.","source":"@site/versioned_docs/version-2.1/query-acceleration/materialized-view/async-materialized-view/functions-and-demands.md","sourceDirName":"query-acceleration/materialized-view/async-materialized-view","slug":"/query-acceleration/materialized-view/async-materialized-view/functions-and-demands","permalink":"/docs/2.1/query-acceleration/materialized-view/async-materialized-view/functions-and-demands","draft":false,"unlisted":false,"tags":[],"version":"2.1","frontMatter":{"title":"Creating, Querying, and Maintaining Asynchronous Materialized Views","language":"en"},"sidebar":"docs","previous":{"title":"Overview of Asynchronous Materialized Views","permalink":"/docs/2.1/query-acceleration/materialized-view/async-materialized-view/overview"},"next":{"title":"Best Practices","permalink":"/docs/2.1/query-acceleration/materialized-view/async-materialized-view/use-guide"}}'),t=i("785893"),a=i("250065");let s={title:"Creating, Querying, and Maintaining Asynchronous Materialized Views",language:"en"},l=void 0,d={},o=[{value:"Creating Materialized Views",id:"creating-materialized-views",level:2},{value:"Permission Requirements",id:"permission-requirements",level:3},{value:"Creation Syntax",id:"creation-syntax",level:3},{value:"Refresh Configuration",id:"refresh-configuration",level:3},{value:"build_mode Refresh Timing",id:"build_mode-refresh-timing",level:4},{value:"refresh_method Refresh Method",id:"refresh_method-refresh-method",level:4},{value:"refresh_trigger Trigger Methods",id:"refresh_trigger-trigger-methods",level:4},{value:"Examples",id:"examples",level:4},{value:"Refresh mechanism example 1",id:"refresh-mechanism-example-1",level:4},{value:"Refresh mechanism example 2",id:"refresh-mechanism-example-2",level:4},{value:"Refresh mechanism example 3",id:"refresh-mechanism-example-3",level:4},{value:"Partition Configuration",id:"partition-configuration",level:3},{value:"Base Table with Multiple Partition Columns",id:"base-table-with-multiple-partition-columns",level:4},{value:"Using Partial Partitions from the Base Table",id:"using-partial-partitions-from-the-base-table",level:4},{value:"Partition Aggregation",id:"partition-aggregation",level:4},{value:"SQL Definition",id:"sql-definition",level:3},{value:"Direct Querying of Materialized Views",id:"direct-querying-of-materialized-views",level:2},{value:"Transparent Query Rewriting",id:"transparent-query-rewriting",level:2},{value:"Condition Compensation",id:"condition-compensation",level:3},{value:"JOIN Rewriting",id:"join-rewriting",level:3},{value:"JOIN Derivation",id:"join-derivation",level:3},{value:"Aggregate Rewriting",id:"aggregate-rewriting",level:3},{value:"Aggregate Rewriting (Roll-up)",id:"aggregate-rewriting-roll-up",level:3},{value:"Multi-dimensional Aggregate Rewriting",id:"multi-dimensional-aggregate-rewriting",level:3},{value:"Partition Compensation Rewriting",id:"partition-compensation-rewriting",level:3},{value:"Nested Materialized View Rewriting",id:"nested-materialized-view-rewriting",level:3},{value:"Aggregate Query Using Non-Aggregate Materialized View Rewrite",id:"aggregate-query-using-non-aggregate-materialized-view-rewrite",level:3},{value:"Explain Query Transparent Rewriting Status",id:"explain-query-transparent-rewriting-status",level:3},{value:"Maintaining Materialized Views",id:"maintaining-materialized-views",level:2},{value:"Permission Requirements",id:"permission-requirements-1",level:3},{value:"Modifying Materialized Views",id:"modifying-materialized-views",level:3},{value:"Modifying Materialized View Properties",id:"modifying-materialized-view-properties",level:4},{value:"Materialized View Renaming, i.e., Atomic Replacement of Materialized Views",id:"materialized-view-renaming-ie-atomic-replacement-of-materialized-views",level:4},{value:"Dropping Materialized Views",id:"dropping-materialized-views",level:3},{value:"Viewing Materialized View Creation Statement",id:"viewing-materialized-view-creation-statement",level:3},{value:"Pausing Materialized Views",id:"pausing-materialized-views",level:3},{value:"Resuming Materialized Views",id:"resuming-materialized-views",level:3},{value:"Canceling Materialized View Refresh Tasks",id:"canceling-materialized-view-refresh-tasks",level:3},{value:"Querying Materialized View Information",id:"querying-materialized-view-information",level:3},{value:"Querying Refresh Task Information",id:"querying-refresh-task-information",level:3},{value:"Querying Materialized View Jobs",id:"querying-materialized-view-jobs",level:3},{value:"Querying Materialized View Partition Information",id:"querying-materialized-view-partition-information",level:3},{value:"Viewing Materialized View Table Structure",id:"viewing-materialized-view-table-structure",level:3},{value:"Related Configuration",id:"related-configuration",level:3},{value:"Session Variables",id:"session-variables",level:4},{value:"fe.conf Configuration",id:"feconf-configuration",level:4}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This document provides detailed information about materialized view creation, direct querying of materialized views, query rewriting, and common maintenance operations."}),"\n",(0,t.jsx)(n.h2,{id:"creating-materialized-views",children:"Creating Materialized Views"}),"\n",(0,t.jsx)(n.h3,{id:"permission-requirements",children:"Permission Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creating Materialized Views: Requires both materialized view creation permission (same as table creation permission) and query permission for the materialized view creation statement (same as SELECT permission)."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"creation-syntax",children:"Creation Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW\n[ IF NOT EXISTS ] <materialized_view_name>\n[ (<columns_definition>) ]\n[ BUILD <build_mode> ]\n[ REFRESH <refresh_method> [refresh_trigger]]\n[ [DUPLICATE] KEY (<key_cols>) ]\n[ COMMENT '<table_comment>' ]\n[ PARTITION BY (\n{ <partition_col>\n| DATE_TRUNC(<partition_col>, <partition_unit>) }\n)]\n[ DISTRIBUTED BY { HASH (<distribute_cols>) | RANDOM }\n[ BUCKETS { <bucket_count> | AUTO } ]\n]\n[ PROPERTIES (\n-- Table property\n<table_property>\n-- Additional table properties\n[ , ... ])\n]\nAS <query>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"refresh-configuration",children:"Refresh Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"build_mode-refresh-timing",children:"build_mode Refresh Timing"}),"\n",(0,t.jsx)(n.p,{children:"Determines whether to refresh immediately after materialized view creation."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"IMMEDIATE: Refresh immediately (default mode)"}),"\n",(0,t.jsx)(n.li,{children:"DEFERRED: Delayed refresh"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"refresh_method-refresh-method",children:"refresh_method Refresh Method"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"COMPLETE: Refresh all partitions"}),"\n",(0,t.jsx)(n.li,{children:"AUTO: Attempt incremental refresh, only refreshing partitions with data changes since the last materialization. Falls back to full refresh of all partitions if data changes cannot be detected."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"refresh_trigger-trigger-methods",children:"refresh_trigger Trigger Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"ON MANUAL"})," Manual Trigger"]})}),"\n",(0,t.jsx)(n.p,{children:"Users can trigger materialized view refreshes using SQL statements with the following strategies:"}),"\n",(0,t.jsx)(n.p,{children:"Check for base table partition data changes since last refresh and refresh only changed partitions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"REFRESH MATERIALIZED VIEW mvName AUTO;\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"If the base table used in the SQL definition of the materialized view is a JDBC table,\nDoris cannot perceive changes in the table data. When refreshing the materialized view,\nit is necessary to specify COMPLETE. If AUTO is specified, it may result in the base table\nhaving data, but the materialized view being empty after the refresh. Currently,\nwhen refreshing the materialized view, Doris can only perceive data changes in internal\ntables and Hive data source tables; support for other data sources is being gradually implemented."})}),"\n",(0,t.jsx)(n.p,{children:"Refresh all materialized view partitions without checking for base table changes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"REFRESH MATERIALIZED VIEW mvName COMPLETE;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Refresh only specified partitions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"REFRESH MATERIALIZED VIEW mvName partitions(partitionName1,partitionName2);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"partitionName"})," can be obtained using ",(0,t.jsx)(n.code,{children:"SHOW PARTITIONS FROM mvName"}),".\nStarting from version 2.1.3, Hive supports detecting base table partition changes since last refresh. Other external tables don't support this yet. Internal tables have always supported this feature."]})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"ON SCHEDULE"})," Scheduled Trigger"]})}),"\n",(0,t.jsx)(n.p,{children:"Specify refresh intervals in the materialized view creation statement. You can specify the data refresh interval in the materialized view creation statement using refreshUnit, where the refresh time interval unit can be minute, hour, day, week, etc."}),"\n",(0,t.jsxs)(n.p,{children:["Example of full refresh (",(0,t.jsx)(n.code,{children:"REFRESH COMPLETE"}),") every 10 hours, refreshing all partitions:"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_6\nREFRESH COMPLETE ON SCHEDULE EVERY 10 hour\nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS\nSELECT FROM lineitem;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Example of incremental refresh (",(0,t.jsx)(n.code,{children:"REFRESH AUTO"}),") every 10 hours,\nonly refreshing changed partitions or falling back to full refresh if needed\n(automatic Hive partition calculation supported from version 2.1.3):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_7\nREFRESH AUTO ON SCHEDULE EVERY 10 hour\nPARTITION by(l_shipdate)\nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS\nSELECT FROM lineitem;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"ON COMMIT"})," Automatic Trigger"]})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"This feature is available from Apache Doris version 2.1.4 onwards."})}),"\n",(0,t.jsx)(n.p,{children:'Automatically triggers materialized view refresh when base table data changes, with refresh partition scope matching "scheduled trigger".'}),"\n",(0,t.jsxs)(n.p,{children:["Example: When partition ",(0,t.jsx)(n.code,{children:"t1"})," data changes in base table ",(0,t.jsx)(n.code,{children:"lineitem"}),", it automatically triggers corresponding materialized view partition refresh:"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_8\nREFRESH AUTO ON COMMIT\nPARTITION by(l_shipdate)\nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS\nSELECT FROM lineitem;\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Not recommended for frequently changing base tables as it creates frequent materialized refresh tasks, consuming excessive resources."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"For more details, see [REFRESH MATERIALIZED VIEW](../../../sql-manual/sql-statements/table-and-view/async-materialized-view/REFRESH-MATERIALIZED-VIEW)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"Table Creation Statements"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS lineitem (\n    l_orderkey    integer not null,\n    l_partkey     integer not null,\n    l_suppkey     integer not null,\n    l_linenumber  integer not null,\n    l_quantity    decimalv3(15,2) not null,\n    l_extendedprice  decimalv3(15,2) not null,\n    l_discount    decimalv3(15,2) not null,\n    l_tax         decimalv3(15,2) not null,\n    l_returnflag  char(1) not null,\n    l_linestatus  char(1) not null,\n    l_shipdate    date not null,\n    l_commitdate  date not null,\n    l_receiptdate date not null,\n    l_shipinstruct char(25) not null,\n    l_shipmode     char(10) not null,\n    l_comment      varchar(44) not null\n    )\n    DUPLICATE KEY(l_orderkey, l_partkey, l_suppkey, l_linenumber)\n    PARTITION BY RANGE(l_shipdate)\n    (FROM ('2023-10-17') TO ('2023-11-01') INTERVAL 1 DAY)\n    DISTRIBUTED BY HASH(l_orderkey) BUCKETS 3;\n\nINSERT INTO lineitem VALUES\n(1, 2, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-17', '2023-10-17', '2023-10-17', 'a', 'b', 'yyyyyyyyy'),\n(2, 4, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-18', '2023-10-18', '2023-10-18', 'a', 'b', 'yyyyyyyyy'),\n(3, 2, 4, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-19', '2023-10-19', '2023-10-19', 'a', 'b', 'yyyyyyyyy');\n\nCREATE TABLE IF NOT EXISTS orders  (\n    o_orderkey       integer not null,\n    o_custkey        integer not null,\n    o_orderstatus    char(1) not null,\n    o_totalprice     decimalv3(15,2) not null,\n    o_orderdate      date not null,\n    o_orderpriority  char(15) not null,\n    o_clerk          char(15) not null,\n    o_shippriority   integer not null,\n    o_comment        varchar(79) not null\n    )\nDUPLICATE KEY(o_orderkey, o_custkey)\nPARTITION BY RANGE(o_orderdate)(\nFROM ('2023-10-17') TO ('2023-11-01') INTERVAL 1 DAY)\nDISTRIBUTED BY HASH(o_orderkey) BUCKETS 3;\n\nINSERT INTO orders VALUES\n(1, 1, 'o', 9.5, '2023-10-17', 'a', 'b', 1, 'yy'),\n(1, 1, 'o', 10.5, '2023-10-18', 'a', 'b', 1, 'yy'),\n(2, 1, 'o', 11.5, '2023-10-19', 'a', 'b', 1, 'yy'),\n(3, 1, 'o', 12.5, '2023-10-19', 'a', 'b', 1, 'yy');\n    \nCREATE TABLE IF NOT EXISTS partsupp (\n      ps_partkey     INTEGER NOT NULL,\n      ps_suppkey     INTEGER NOT NULL,\n      ps_availqty    INTEGER NOT NULL,\n      ps_supplycost  DECIMALV3(15,2)  NOT NULL,\n      ps_comment     VARCHAR(199) NOT NULL \n    )\nDUPLICATE KEY(ps_partkey, ps_suppkey)\nDISTRIBUTED BY HASH(ps_partkey) BUCKETS 3;\n\nINSERT INTO partsupp VALUES\n(2, 3, 9, 10.01, 'supply1'),\n(4, 3, 10, 11.01, 'supply2'),\n(2, 3, 10, 11.01, 'supply3');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"refresh-mechanism-example-1",children:"Refresh mechanism example 1"}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, the refresh timing is set to ",(0,t.jsx)(n.code,{children:"BUILD IMMEDIATE"})," (refresh immediately after creation), the refresh method is set to ",(0,t.jsx)(n.code,{children:"REFRESH AUTO"})," (attempt incremental refresh), which only refreshes partitions that have changed since the last materialization. If incremental refresh is not possible, it will perform a full refresh of all partitions.\nThe trigger method is set to ",(0,t.jsx)(n.code,{children:"ON MANUAL"}),". For non-partitioned full materialized views that have only one partition, if the base table data changes, a full refresh will be required."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_1_0\nBUILD IMMEDIATE \nREFRESH AUTO\nON MANUAL    \nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS   \nSELECT   \n  l_linestatus,   \n  to_date(o_orderdate) as date_alias,   \n  o_shippriority   \nFROM   \n  orders   \n  LEFT JOIN lineitem ON l_orderkey = o_orderkey;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"refresh-mechanism-example-2",children:"Refresh mechanism example 2"}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, the refresh timing is set to delayed refresh (",(0,t.jsx)(n.code,{children:"BUILD DEFERRED"}),"), the refresh method is set to full refresh (",(0,t.jsx)(n.code,{children:"REFRESH COMPLETE"}),"), and the trigger timing is set to scheduled refresh (",(0,t.jsx)(n.code,{children:"ON SCHEDULE"}),"). The first refresh time is ",(0,t.jsx)(n.code,{children:"2024-12-01 20:30:00"}),", and it will refresh every day thereafter. If ",(0,t.jsx)(n.code,{children:"BUILD DEFERRED"})," is specified as ",(0,t.jsx)(n.code,{children:"BUILD IMMEDIATE"}),", the materialized view will refresh immediately upon creation. After that, it will refresh every day starting from ",(0,t.jsx)(n.code,{children:"2024-12-01 20:30:00"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"The time specified in STARTS must be later than the current time."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_1_1\nBUILD DEFERRED\nREFRESH COMPLETE\nON SCHEDULE EVERY 1 DAY STARTS '2024-12-01 20:30:00'\nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS   \nSELECT   \nl_linestatus,   \nto_date(o_orderdate) as date_alias,   \no_shippriority   \nFROM   \norders   \nLEFT JOIN lineitem ON l_orderkey = o_orderkey;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"refresh-mechanism-example-3",children:"Refresh mechanism example 3"}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the refresh timing is set to immediate refresh upon creation (",(0,t.jsx)(n.code,{children:"BUILD IMMEDIATE"}),"), the refresh method is set to full refresh (",(0,t.jsx)(n.code,{children:"REFRESH COMPLETE"}),"), and the trigger method is set to trigger refresh (",(0,t.jsx)(n.code,{children:"ON COMMIT"}),"). When data in the ",(0,t.jsx)(n.code,{children:"orders"})," or ",(0,t.jsx)(n.code,{children:"lineitem"})," tables changes, it will automatically trigger the refresh of the materialized view."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_1_1\nBUILD IMMEDIATE\nREFRESH COMPLETE\nON COMMIT\nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS   \nSELECT   \nl_linestatus,   \nto_date(o_orderdate) as date_alias,   \no_shippriority   \nFROM   \norders   \nLEFT JOIN lineitem ON l_orderkey = o_orderkey;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"partition-configuration",children:"Partition Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, when creating a partitioned materialized view, it is necessary to specify ",(0,t.jsx)(n.code,{children:"PARTITION BY"}),". For expressions referencing partition fields, only the ",(0,t.jsx)(n.code,{children:"date_trunc"})," function and identifiers are allowed. The following statement meets the requirements: the partition field references only the ",(0,t.jsx)(n.code,{children:"date_trunc"})," function. The refresh method for partitioned materialized views is generally set to ",(0,t.jsx)(n.code,{children:"AUTO"}),", which attempts incremental refresh, refreshing only the partitions that have changed since the last materialized refresh. If incremental refresh is not possible, it will refresh all partitions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_2_0 \nBUILD IMMEDIATE\nREFRESH AUTO\nON MANUAL   \nPARTITION BY (order_date_month)   \nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS   \nSELECT   \n  l_linestatus,\n  date_trunc(o_orderdate, 'month') as order_date_month,   \n  o_shippriority   \nFROM   \n  orders   \nLEFT JOIN lineitem ON l_orderkey = o_orderkey;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The following statement will fail to create a partitioned materialized view because the partition field ",(0,t.jsx)(n.code,{children:"order_date_month"})," uses the ",(0,t.jsx)(n.code,{children:"date_add()"})," function, resulting in the error ",(0,t.jsx)(n.code,{children:"because column to check use invalid implicit expression, invalid expression is date_add(o_orderdate#4, 2)"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_2_1 BUILD IMMEDIATE REFRESH AUTO ON MANUAL   \nPARTITION BY (order_date_month)   \nDISTRIBUTED BY RANDOM BUCKETS 2   \nAS   \nSELECT   \n  l_linestatus,\n  date_trunc(date_add(o_orderdate, INTERVAL 2 DAY), 'month') as order_date_month,   \n  o_shippriority   \nFROM   \n  orders   \nLEFT JOIN lineitem ON l_orderkey = o_orderkey;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"base-table-with-multiple-partition-columns",children:"Base Table with Multiple Partition Columns"}),"\n",(0,t.jsx)(n.p,{children:"Currently, only Hive external tables support multiple partition columns. Hive external tables often have many multi-level partitions, such as a first-level partition by date and a second-level partition by region. Materialized views can choose one of Hive's partition columns as the partition column for the materialized view."}),"\n",(0,t.jsx)(n.p,{children:"For example, the Hive table creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE hive1 (\n`k1` int)\nPARTITIONED BY (\n`year` int,\n`region` string)\nSTORED AS ORC;\n\nalter table hive1 add if not exists\npartition(year=2020,region="bj")\npartition(year=2020,region="sh")\npartition(year=2021,region="bj")\npartition(year=2021,region="sh")\npartition(year=2022,region="bj")\npartition(year=2022,region="sh")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When the materialized view creation statement is as follows, the materialized view ",(0,t.jsx)(n.code,{children:"mv_hive"})," will have three partitions: ",(0,t.jsx)(n.code,{children:"('2020')"}),", ",(0,t.jsx)(n.code,{children:"('2021')"}),", and ",(0,t.jsx)(n.code,{children:"('2022')"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_hive\nBUILD DEFERRED\nREFRESH AUTO\nON MANUAL\nPARTITION BY (year)\nDISTRIBUTED BY RANDOM BUCKETS 2\nAS\nSELECT k1, year, region FROM hive1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When the materialized view creation statement is as follows, the materialized view ",(0,t.jsx)(n.code,{children:"mv_hive2"})," will have the following two partitions: ",(0,t.jsx)(n.code,{children:"('bj')"})," and ",(0,t.jsx)(n.code,{children:"('sh')"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_hive2\nBUILD DEFERRED\nREFRESH AUTO\nON MANUAL\nPARTITION BY (region)\nDISTRIBUTED BY RANDOM BUCKETS 2\nAS\nSELECT k1, year, region FROM hive1;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-partial-partitions-from-the-base-table",children:"Using Partial Partitions from the Base Table"}),"\n",(0,t.jsx)(n.p,{children:'Some base tables have many partitions, but the materialized view only focuses on the "hot" data from a recent period. This feature allows for that.'}),"\n",(0,t.jsx)(n.p,{children:"The base table creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE t1 (\nk1 INT,\nk2 DATE NOT NULL\n) ENGINE=OLAP\nDUPLICATE KEY(k1)\nCOMMENT \'OLAP\'\nPARTITION BY range(k2)\n(\nPARTITION p26 VALUES [("2024-03-26"),("2024-03-27")),\nPARTITION p27 VALUES [("2024-03-27"),("2024-03-28")),\nPARTITION p28 VALUES [("2024-03-28"),("2024-03-29"))\n)\nDISTRIBUTED BY HASH(k1) BUCKETS 2;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The materialized view creation statement is as follows, indicating that the materialized view only focuses on the data from the most recent day. If the current time is ",(0,t.jsx)(n.code,{children:"2024-03-28 xx:xx:xx"}),", the materialized view will only have one partition ",(0,t.jsx)(n.code,{children:'[("2024-03-28"),("2024-03-29")]'}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1\nBUILD DEFERRED\nREFRESH AUTO\nON MANUAL\nPARTITION BY (k2)\nDISTRIBUTED BY RANDOM BUCKETS 2\nPROPERTIES (\n'partition_sync_limit'='1',\n'partition_sync_time_unit'='DAY'\n)\nAS\nSELECT FROM t1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the time passes another day, and the current time is ",(0,t.jsx)(n.code,{children:"2024-03-29 xx:xx:xx"}),", ",(0,t.jsx)(n.code,{children:"t1"})," will add a new partition ",(0,t.jsx)(n.code,{children:'[("2024-03-29"),("2024-03-30")]'}),". If the materialized view is refreshed at this time, after the refresh is complete, the materialized view will only have one partition ",(0,t.jsx)(n.code,{children:'[("2024-03-29"),("2024-03-30")]'}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, when the partition field is of string type, the materialized view property ",(0,t.jsx)(n.code,{children:"partition_date_format"})," can be set, for example, ",(0,t.jsx)(n.code,{children:"%Y-%m-%d"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"partition-aggregation",children:"Partition Aggregation"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Range partitioning is supported since Doris 2.1.5"})}),"\n",(0,t.jsx)(n.p,{children:"When the data in the base table is aggregated, the amount of data in each partition may significantly decrease. In this case, a partition aggregation strategy can be adopted to reduce the number of partitions in the materialized view."}),"\n",(0,t.jsx)(n.p,{children:"Assuming the base table creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE t1 (\nk1 LARGEINT NOT NULL,\nk2 DATE NOT NULL\n) ENGINE=OLAP\nDUPLICATE KEY(k1)\nCOMMENT \'OLAP\'\nPARTITION BY range(k2)\n(\nPARTITION p_20200101 VALUES [("2020-01-01"),("2020-01-02")),\nPARTITION p_20200102 VALUES [("2020-01-02"),("2020-01-03")),\nPARTITION p_20200201 VALUES [("2020-02-01"),("2020-02-02"))\n)\nDISTRIBUTED BY HASH(k1) BUCKETS 2;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, the materialized view will contain two partitions: ",(0,t.jsx)(n.code,{children:'[("2020-01-01","2020-02-01")]'})," and ",(0,t.jsx)(n.code,{children:'[("2020-02-01","2020-03-01")]'}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_3\nBUILD DEFERRED\nREFRESH AUTO\nON MANUAL\nPARTITION BY (date_trunc(k2,'month'))\nDISTRIBUTED BY RANDOM BUCKETS 2\nAS\nSELECT FROM t1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, the materialized view will only contain one partition: ",(0,t.jsx)(n.code,{children:'[("2020-01-01","2021-01-01")]'}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_4\nBUILD DEFERRED\nREFRESH AUTO\nON MANUAL\nPARTITION BY (date_trunc(k2,'year'))\nDISTRIBUTED BY RANDOM BUCKETS 2\nAS\nSELECT FROM t1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, if the partition field is of string type, the date format can be specified by setting the materialized view's ",(0,t.jsx)(n.code,{children:"partition_date_format"})," property, for example, ",(0,t.jsx)(n.code,{children:"'%Y-%m-%d'"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For more details, refer to ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/async-materialized-view/CREATE-ASYNC-MATERIALIZED-VIEW",children:"CREATE ASYNC MATERIALIZED VIEW"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"sql-definition",children:"SQL Definition"}),"\n",(0,t.jsx)(n.p,{children:"There are no restrictions on the SQL definition of asynchronous materialized views."}),"\n",(0,t.jsx)(n.h2,{id:"direct-querying-of-materialized-views",children:"Direct Querying of Materialized Views"}),"\n",(0,t.jsx)(n.p,{children:"Materialized views can be treated like tables, allowing for the addition of filtering conditions and aggregations for direct querying."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Definition of Materialized View:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_5\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nAS\nSELECT t1.l_linenumber,\no_custkey,\no_orderdate\nFROM (SELECT FROM lineitem WHERE l_linenumber > 1) t1\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Original Query:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT t1.l_linenumber,\no_custkey,\no_orderdate\nFROM (SELECT FROM lineitem WHERE l_linenumber > 1) t1\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey\nWHERE o_orderdate = '2023-10-18';\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Equivalent Direct Query on Materialized View:"}),"\nUsers need to manually modify the query."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT l_linenumber,\no_custkey,\no_orderdate\nFROM mv_5\nWHERE o_orderdate = '2023-10-18';\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"transparent-query-rewriting",children:"Transparent Query Rewriting"}),"\n",(0,t.jsx)(n.p,{children:"Transparent rewriting means that when processing queries, users do not need to manually modify queries, as the system will automatically optimize and rewrite them.\nDoris asynchronous materialized views use a transparent rewriting algorithm based on the SPJG (SELECT-PROJECT-JOIN-GROUP-BY) pattern.\nThis algorithm can analyze SQL structure information, automatically find suitable materialized views for transparent rewriting, and select the optimal materialized view to respond to query SQL.\nDoris provides rich and comprehensive transparent rewriting capabilities. For example, the following capabilities:"}),"\n",(0,t.jsx)(n.h3,{id:"condition-compensation",children:"Condition Compensation"}),"\n",(0,t.jsx)(n.p,{children:"Query and materialized view conditions do not need to be exactly the same. By compensating conditions on materialized views to express queries, materialized views can be reused to the maximum extent, avoiding the need to repeatedly build materialized views."}),"\n",(0,t.jsxs)(n.p,{children:["When the ",(0,t.jsx)(n.code,{children:"where"})," conditions in the materialized view and query are expressions connected by ",(0,t.jsx)(n.code,{children:"and"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"When the query's expressions contain the materialized view's expressions:"})}),"\n",(0,t.jsx)(n.p,{children:"Condition compensation can be performed."}),"\n",(0,t.jsxs)(n.p,{children:["For example, if the query condition is ",(0,t.jsx)(n.code,{children:"a > 5 and b > 10 and c = 7"}),", and the materialized view condition is ",(0,t.jsx)(n.code,{children:"a > 5 and b > 10"}),", the materialized view condition is a subset of the query condition, so only the ",(0,t.jsx)(n.code,{children:"c = 7"})," condition needs to be compensated."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"When the query's expressions do not completely contain the materialized view's expressions:"})}),"\n",(0,t.jsxs)(n.p,{children:["When the query conditions can be derived from the materialized view conditions (common for comparison and range expressions like ",(0,t.jsx)(n.code,{children:">"}),", ",(0,t.jsx)(n.code,{children:"<"}),", ",(0,t.jsx)(n.code,{children:"="}),", ",(0,t.jsx)(n.code,{children:"in"}),", etc.), condition compensation can also be performed. The compensation result is the query condition itself."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if the query condition is ",(0,t.jsx)(n.code,{children:"a > 5 and b = 10"}),", and the materialized view condition is ",(0,t.jsx)(n.code,{children:"a > 1 and b > 8"}),", it can be seen that the materialized view condition contains the query condition, and the query condition can be derived from the materialized view condition, so compensation can be performed, with the compensation result being ",(0,t.jsx)(n.code,{children:"a > 5 and b = 10"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Condition compensation usage restrictions:"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For expressions connected by ",(0,t.jsx)(n.code,{children:"or"}),", condition compensation cannot be performed; they must be exactly the same for successful rewriting."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For non-comparison and non-range expressions like ",(0,t.jsx)(n.code,{children:"like"}),", condition compensation cannot be performed; they must be exactly the same for successful rewriting."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Materialized View Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"```sql\nCREATE MATERIALIZED VIEW mv1\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nAS\nSELECT t1.l_linenumber,\n       o_custkey,\n       o_orderdate\nFROM (SELECT * FROM lineitem WHERE l_linenumber > 1) t1\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey;\n```\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following queries can all hit the materialized view. Multiple queries can reuse one materialized view through transparent rewriting,\nreducing query rewriting time and saving materialized view construction costs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"```sql\nSELECT l_linenumber,\n       o_custkey,\n       o_orderdate\nFROM lineitem\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey\nWHERE l_linenumber > 2;\n```\n\n```sql\nSELECT l_linenumber,\n       o_custkey,\n       o_orderdate\nFROM lineitem\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey\nWHERE l_linenumber > 2 and o_orderdate = '2023-10-19';\n\n```\n"})}),"\n",(0,t.jsx)(n.h3,{id:"join-rewriting",children:"JOIN Rewriting"}),"\n",(0,t.jsx)(n.p,{children:"JOIN rewriting refers to when the query and materialized view use the same tables, and conditions can be written in the materialized view, JOIN inputs, or outside the JOIN. The optimizer will attempt transparent rewriting for queries in this pattern."}),"\n",(0,t.jsx)(n.p,{children:"Multiple table JOINs are supported, with the following supported JOIN types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"INNER JOIN"}),"\n",(0,t.jsx)(n.li,{children:"LEFT OUTER JOIN"}),"\n",(0,t.jsx)(n.li,{children:"RIGHT OUTER JOIN"}),"\n",(0,t.jsx)(n.li,{children:"FULL OUTER JOIN"}),"\n",(0,t.jsx)(n.li,{children:"LEFT SEMI JOIN"}),"\n",(0,t.jsx)(n.li,{children:"RIGHT SEMI JOIN"}),"\n",(0,t.jsx)(n.li,{children:"LEFT ANTI JOIN"}),"\n",(0,t.jsx)(n.li,{children:"RIGHT ANTI JOIN"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Materialized View Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv2\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nAS\nSELECT t1.l_linenumber,\n       o_custkey,\n       o_orderkey,\n       o_orderstatus,\n       l_partkey,\n       l_suppkey,\n       l_orderkey\nFROM (SELECT * FROM lineitem WHERE l_linenumber > 1) t1\nINNER JOIN orders ON t1.l_orderkey = orders.o_orderkey;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The following query can be transparently rewritten. The condition ",(0,t.jsx)(n.code,{children:"l_linenumber > 1"})," can be lifted up, enabling transparent rewriting to use the materialized view's pre-computed results to express the query.\nAfter hitting the materialized view, JOIN computation can be saved."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query Statement:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT l_linenumber,\n       o_custkey\nFROM lineitem\nINNER JOIN orders ON l_orderkey = o_orderkey\nWHERE l_linenumber > 1 and o_orderdate = '2023-10-18';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"join-derivation",children:"JOIN Derivation"}),"\n",(0,t.jsx)(n.p,{children:"When the JOIN types in the query and materialized view are inconsistent, if the materialized view can provide all the data needed by the query, transparent rewriting can still be performed by compensating predicates outside the JOIN."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Materialized View Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv3\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nAS\nSELECT\n    l_shipdate, l_suppkey, o_orderdate,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nGROUP BY\nl_shipdate,\nl_suppkey,\no_orderdate;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query Statement:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT\n    l_shipdate, l_suppkey, o_orderdate,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nINNER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nWHERE o_orderdate = '2023-10-18' AND l_suppkey = 3\nGROUP BY\nl_shipdate,\nl_suppkey,\no_orderdate;\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"aggregate-rewriting",children:"Aggregate Rewriting"}),"\n",(0,t.jsx)(n.p,{children:"When the group dimensions in the query and materialized view definition are consistent, if the materialized view uses the same group by dimensions as the query, and the aggregate functions used in the query can be expressed using the materialized view's aggregate functions, transparent rewriting can be performed."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Materialized View Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv4\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nAS\nSELECT\n    o_shippriority, o_comment,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS cnt_1,\n    count(distinct CASE WHEN O_SHIPPRIORITY > 2 AND o_orderkey IN (2) THEN o_custkey ELSE null END) AS cnt_2,\n    sum(o_totalprice),\n    max(o_totalprice),\n    min(o_totalprice),\n    count(*)\nFROM orders\nGROUP BY\no_shippriority,\no_comment;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The following query can hit the materialized view, as it uses the same aggregation dimensions as the materialized view. The query can filter results using the materialized view's ",(0,t.jsx)(n.code,{children:"o_shippriority"})," field. The query's group by dimensions and aggregate functions can be rewritten using the materialized view's group by dimensions and aggregate functions.\nAfter hitting the aggregate materialized view, aggregation computation can be reduced."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query Statement:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT \n    o_shippriority, o_comment,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS cnt_1,\n    count(distinct CASE WHEN O_SHIPPRIORITY > 2 AND o_orderkey IN (2) THEN o_custkey ELSE null END) AS cnt_2,\n    sum(o_totalprice),\n    max(o_totalprice),\n    min(o_totalprice),\n    count(*)\nFROM orders\nWHERE o_shippriority in (1, 2)\nGROUP BY\no_shippriority,\no_comment;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"aggregate-rewriting-roll-up",children:"Aggregate Rewriting (Roll-up)"}),"\n",(0,t.jsxs)(n.p,{children:["Even when the aggregation dimensions in the query and materialized view definition are inconsistent, rewriting can still be performed. The materialized view's ",(0,t.jsx)(n.code,{children:"group by"})," dimensions need to include the query's ",(0,t.jsx)(n.code,{children:"group by"})," dimensions, and the query may not have any ",(0,t.jsx)(n.code,{children:"group by"}),". Additionally, the aggregate functions used in the query must be expressible using the materialized view's aggregate functions."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Materialized View Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv5\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nAS\nSELECT\n    l_shipdate, o_orderdate, l_partkey, l_suppkey,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    bitmap_union(to_bitmap(CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END)) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nGROUP BY\nl_shipdate,\no_orderdate,\nl_partkey,\nl_suppkey;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The following query can be transparently rewritten. The query and materialized view use different aggregation dimensions, but the materialized view's dimensions include the query's dimensions. The query can use fields from the dimensions to filter results. The query will attempt to roll up using the functions after the materialized view's ",(0,t.jsx)(n.code,{children:"SELECT"}),",\nfor example, the materialized view's ",(0,t.jsx)(n.code,{children:"bitmap_union"})," will eventually roll up to ",(0,t.jsx)(n.code,{children:"bitmap_union_count"}),", which maintains the same semantics as the query's ",(0,t.jsx)(n.code,{children:"count(distinct)"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Through aggregate roll-up, the same materialized view can be reused by multiple queries, saving materialized view construction costs."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query Statement:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT\n    l_shipdate, l_suppkey,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nWHERE o_orderdate = '2023-10-18' AND l_partkey = 3\nGROUP BY\nl_shipdate,\nl_suppkey;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Currently supported aggregate roll-up functions are listed below:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Query Function"}),(0,t.jsx)(n.th,{children:"Materialized View Function"}),(0,t.jsx)(n.th,{children:"Function After Roll-up"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"max"}),(0,t.jsx)(n.td,{children:"max"}),(0,t.jsx)(n.td,{children:"max"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"min"}),(0,t.jsx)(n.td,{children:"min"}),(0,t.jsx)(n.td,{children:"min"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sum"}),(0,t.jsx)(n.td,{children:"sum"}),(0,t.jsx)(n.td,{children:"sum"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"count"}),(0,t.jsx)(n.td,{children:"count"}),(0,t.jsx)(n.td,{children:"sum"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"count(distinct)"}),(0,t.jsx)(n.td,{children:"bitmap_union"}),(0,t.jsx)(n.td,{children:"bitmap_union_count"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"bitmap_union"}),(0,t.jsx)(n.td,{children:"bitmap_union"}),(0,t.jsx)(n.td,{children:"bitmap_union"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"bitmap_union_count"}),(0,t.jsx)(n.td,{children:"bitmap_union"}),(0,t.jsx)(n.td,{children:"bitmap_union_count"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"hll_union_agg, approx_count_distinct, hll_cardinality"}),(0,t.jsx)(n.td,{children:"hll_union or hll_raw_agg"}),(0,t.jsx)(n.td,{children:"hll_union_agg"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"any_value"}),(0,t.jsx)(n.td,{children:"any_value or column used after any_value in select"}),(0,t.jsx)(n.td,{children:"any_value"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"multi-dimensional-aggregate-rewriting",children:"Multi-dimensional Aggregate Rewriting"}),"\n",(0,t.jsxs)(n.p,{children:["Multi-dimensional aggregate transparent rewriting is supported, meaning that if the materialized view does not use ",(0,t.jsx)(n.code,{children:"GROUPING SETS"}),", ",(0,t.jsx)(n.code,{children:"CUBE"}),", or ",(0,t.jsx)(n.code,{children:"ROLLUP"}),", but the query has multi-dimensional aggregation, and the materialized view's ",(0,t.jsx)(n.code,{children:"group by"})," fields include all fields in the query's multi-dimensional aggregation, transparent rewriting can still be performed."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Materialized View Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv5_1\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nAS\nselect o_orderstatus, o_orderdate, o_orderpriority,\n       sum(o_totalprice) as sum_total,\n       max(o_totalprice) as max_total,\n       min(o_totalprice) as min_total,\n       count(*) as count_all\nfrom orders\ngroup by\no_orderstatus, o_orderdate, o_orderpriority;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following query can hit the materialized view, reusing the materialized view's aggregate results and saving computation:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query Statement:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select o_orderstatus, o_orderdate, o_orderpriority,\n       sum(o_totalprice),\n       max(o_totalprice),\n       min(o_totalprice),\n       count(*)\nfrom orders\ngroup by\nGROUPING SETS ((o_orderstatus, o_orderdate), (o_orderpriority), (o_orderstatus), ());\n"})}),"\n",(0,t.jsx)(n.h3,{id:"partition-compensation-rewriting",children:"Partition Compensation Rewriting"}),"\n",(0,t.jsxs)(n.p,{children:["When a partitioned materialized view cannot provide all the data needed by the query, a ",(0,t.jsx)(n.code,{children:"union all"})," approach can be used, combining data from the original table and the materialized view as the final result."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Materialized View Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv7\nBUILD IMMEDIATE REFRESH AUTO ON MANUAL\npartition by(l_shipdate)\nDISTRIBUTED BY RANDOM BUCKETS 2\nas\nselect l_shipdate, o_orderdate, l_partkey,\n       l_suppkey, sum(o_totalprice) as sum_total\nfrom lineitem\nleft join orders on lineitem.l_orderkey = orders.o_orderkey and l_shipdate = o_orderdate\ngroup by\n    l_shipdate,\n    o_orderdate,\n    l_partkey,\n    l_suppkey;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When the base table adds a partition ",(0,t.jsx)(n.code,{children:"2023-10-21"})," and the materialized view hasn't been refreshed yet, results can be returned by using ",(0,t.jsx)(n.code,{children:"union all"})," between the materialized view and the original table."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"insert into lineitem values\n(1, 2, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-21', '2023-10-21', '2023-10-21', 'a', 'b', 'yyyyyyyyy');\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query Statement:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select l_shipdate, o_orderdate, l_partkey, l_suppkey, sum(o_totalprice) as sum_total\nfrom lineitem\nleft join orders on lineitem.l_orderkey = orders.o_orderkey and l_shipdate = o_orderdate\ngroup by\n    l_shipdate,\n    o_orderdate,\n    l_partkey,\n    l_suppkey;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The query can partially use the materialized view's pre-computed results, saving this portion of computation."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Rewrite Result Illustration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM mv7\nunion all\nselect t1.l_shipdate, o_orderdate, t1.l_partkey, t1.l_suppkey, sum(o_totalprice) as sum_total\nfrom (select * from lineitem where l_shipdate = '2023-10-21') t1\nleft join orders on t1.l_orderkey = orders.o_orderkey and t1.l_shipdate = o_orderdate\ngroup by\n    t1.l_shipdate,\n    o_orderdate,\n    t1.l_partkey,\n    t1.l_suppkey;\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"nested-materialized-view-rewriting",children:"Nested Materialized View Rewriting"}),"\n",(0,t.jsx)(n.p,{children:"The SQL definition of a materialized view can use another materialized view; this is called a nested materialized view.\nThere is theoretically no limit to the nesting depth, and this materialized view can be both directly queried and transparently rewritten. Nested materialized views can also participate in transparent rewriting."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Create inner materialized view ",(0,t.jsx)(n.code,{children:"mv8_0_inner_mv"}),":"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv8_0_inner_mv\nBUILD IMMEDIATE REFRESH COMPLETE ON MANUAL\nDISTRIBUTED BY RANDOM BUCKETS 2\nAS\nselect\nl_linenumber,\no_custkey,\no_orderkey,\no_orderstatus,\nl_partkey,\nl_suppkey,\nl_orderkey\nfrom lineitem\ninner join orders on lineitem.l_orderkey = orders.o_orderkey;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Create outer materialized view ",(0,t.jsx)(n.code,{children:"mv8_0"}),":"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv8_0\nBUILD IMMEDIATE REFRESH COMPLETE ON MANUAL\nDISTRIBUTED BY RANDOM BUCKETS 2\nAS\nselect\nl_linenumber,\no_custkey,\no_orderkey,\no_orderstatus,\nl_partkey,\nl_suppkey,\nl_orderkey,\nps_availqty\nfrom mv8_0_inner_mv\ninner join partsupp on l_partkey = ps_partkey AND l_suppkey = ps_suppkey;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For the following query, both ",(0,t.jsx)(n.code,{children:"mv8_0_inner_mv"})," and ",(0,t.jsx)(n.code,{children:"mv8_0"})," will be successfully rewritten, and the cost model will ultimately choose ",(0,t.jsx)(n.code,{children:"mv8_0"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Nested materialized views are commonly used in data modeling and particularly complex queries. If a single materialized\nview cannot be transparently rewritten, you can split the complex query and build nested materialized views.\nThe transparent rewriting process will attempt to use nested materialized views for rewriting. If the rewrite is successful,\nit will save computation and improve query performance."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select lineitem.l_linenumber\nfrom lineitem\ninner join orders on l_orderkey = o_orderkey\ninner join partsupp on  l_partkey = ps_partkey AND l_suppkey = ps_suppkey\nwhere o_orderstatus = 'o'\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The more layers of nested materialized views, the longer transparent rewriting will take. It is recommended that nested materialized views do not exceed 3 layers."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Nested materialized view transparent rewriting is disabled by default. See the related settings below for how to enable it."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"aggregate-query-using-non-aggregate-materialized-view-rewrite",children:"Aggregate Query Using Non-Aggregate Materialized View Rewrite"}),"\n",(0,t.jsx)(n.p,{children:"If the query is an aggregate query and the materialized view does not contain aggregates,\nbut the materialized view can provide all the columns used in the query, then it can also be rewritten.\nFor example, if the query first performs a join and then a group by aggregation,\nhitting a materialized view that includes the join will also yield benefits."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv10_0\nBUILD IMMEDIATE REFRESH AUTO ON MANUAL\nDISTRIBUTED BY RANDOM BUCKETS 2\nas\nselect l_shipdate, o_orderdate, l_partkey,\n       l_suppkey, o_totalprice\nfrom lineitem\nleft join orders on lineitem.l_orderkey = orders.o_orderkey and l_shipdate = o_orderdate;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following query can hit the mv10_0 materialized view, saving the computation of the\nlineitem join orders join:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select l_shipdate, o_orderdate, l_partkey,\n       l_suppkey, sum(o_totalprice) as sum_total\nfrom lineitem\nleft join orders on lineitem.l_orderkey = orders.o_orderkey and l_shipdate = o_orderdate\ngroup by\n    l_shipdate,\n    o_orderdate,\n    l_partkey,\n    l_suppkey;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"explain-query-transparent-rewriting-status",children:"Explain Query Transparent Rewriting Status"}),"\n",(0,t.jsx)(n.p,{children:"To view materialized view transparent rewriting hits, used for viewing and debugging."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"To view materialized view transparent rewriting hit status, this statement will show brief process information about query transparent rewriting."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"explain <query_sql> \n"})}),"\n",(0,t.jsx)(n.p,{children:"The returned information is as follows, with materialized view-related information excerpted here:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"| MaterializedView                                                                                                                                                                                                                                      |\n| MaterializedViewRewriteSuccessAndChose:                                                                                                                                                                                                               |\n|   Names: mv5                                                                                                                                                                                                                                          |\n| MaterializedViewRewriteSuccessButNotChose:                                                                                                                                                                                                            |\n|                                                                                                                                                                                                                                                       |\n| MaterializedViewRewriteFail:                                                                                                                                                                                                                          |\n|   Name: mv4                                                                                                                                                                                                                                           |\n|   FailSummary: Match mode is invalid, View struct info is invalid                                                                                                                                                                                     |\n|   Name: mv3                                                                                                                                                                                                                                           |\n|   FailSummary: Match mode is invalid, Rewrite compensate predicate by view fail, View struct info is invalid                                                                                                                                          |\n|   Name: mv1                                                                                                                                                                                                                                           |\n|   FailSummary: The columns used by query are not in view, View struct info is invalid                                                                                                                                                                 |\n|   Name: mv2                                                                                                                                                                                                                                           |\n|   FailSummary: The columns used by query are not in view, View struct info is invalid\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"MaterializedViewRewriteSuccessAndChose: Indicates the list of materialized view names that were successfully transparently rewritten and chosen by CBO (Cost-Based Optimizer)."}),"\n",(0,t.jsx)(n.li,{children:"MaterializedViewRewriteSuccessButNotChose: Indicates the list of materialized view names that were successfully transparently rewritten but ultimately not chosen by CBO."}),"\n",(0,t.jsx)(n.li,{children:"MaterializedViewRewriteFail: Lists the failed cases and summary reasons."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"To understand the detailed process information about materialized view candidacy, rewriting, and final selection, execute the following statement:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"explain memo plan <query_sql>\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"maintaining-materialized-views",children:"Maintaining Materialized Views"}),"\n",(0,t.jsx)(n.h3,{id:"permission-requirements-1",children:"Permission Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Dropping materialized views: Requires materialized view deletion permission (same as table deletion permission)"}),"\n",(0,t.jsx)(n.li,{children:"Modifying materialized views: Requires materialized view modification permission (same as table modification permission)"}),"\n",(0,t.jsx)(n.li,{children:"Pausing/resuming/canceling/refreshing materialized views: Requires materialized view creation permission"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"modifying-materialized-views",children:"Modifying Materialized Views"}),"\n",(0,t.jsx)(n.h4,{id:"modifying-materialized-view-properties",children:"Modifying Materialized View Properties"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'ALTER MATERIALIZED VIEW mv_1\nSET(\n  "grace_period" = "10"\n);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/async-materialized-view/ALTER-ASYNC-MATERIALIZED-VIEW",children:"ALTER ASYNC MATERIALIZED VIEW"})]}),"\n",(0,t.jsx)(n.h4,{id:"materialized-view-renaming-ie-atomic-replacement-of-materialized-views",children:"Materialized View Renaming, i.e., Atomic Replacement of Materialized Views"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv9_0\nBUILD IMMEDIATE REFRESH COMPLETE ON MANUAL\nDISTRIBUTED BY RANDOM BUCKETS 2\nPROPERTIES ('replication_num' = '1') \nAS\nselect\n  l_linenumber,\n  o_custkey,\n  o_orderkey,\n  o_orderstatus,\n  l_partkey,\n  l_suppkey,\n  l_orderkey\nfrom lineitem\ninner join orders on lineitem.l_orderkey = orders.o_orderkey;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Replace the materialized view mv7 with mv9_0 and delete mv7:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"ALTER MATERIALIZED VIEW mv7\nREPLACE WITH MATERIALIZED VIEW mv9_0\nPROPERTIES('swap' = 'false');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dropping-materialized-views",children:"Dropping Materialized Views"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"DROP MATERIALIZED VIEW mv_1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/async-materialized-view/DROP-ASYNC-MATERIALIZED-VIEW",children:"DROP ASYNC MATERIALIZED VIEW"})]}),"\n",(0,t.jsx)(n.h3,{id:"viewing-materialized-view-creation-statement",children:"Viewing Materialized View Creation Statement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SHOW CREATE MATERIALIZED VIEW mv_1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/sync-materialized-view/SHOW-CREATE-MATERIALIZED-VIEW",children:"SHOW CREATE MATERIALIZED VIEW"})]}),"\n",(0,t.jsx)(n.h3,{id:"pausing-materialized-views",children:"Pausing Materialized Views"}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/async-materialized-view/PAUSE-MATERIALIZED-VIEW-JOB",children:"PAUSE MATERIALIZED VIEW"})]}),"\n",(0,t.jsx)(n.h3,{id:"resuming-materialized-views",children:"Resuming Materialized Views"}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/async-materialized-view/RESUME-MATERIALIZED-VIEW-JOB",children:"RESUME MATERIALIZED VIEW"})]}),"\n",(0,t.jsx)(n.h3,{id:"canceling-materialized-view-refresh-tasks",children:"Canceling Materialized View Refresh Tasks"}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/async-materialized-view/CANCEL-MATERIALIZED-VIEW-TASK",children:"CANCEL MATERIALIZED VIEW TASK"})]}),"\n",(0,t.jsx)(n.h3,{id:"querying-materialized-view-information",children:"Querying Materialized View Information"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT * \nFROM mv_infos('database'='db_name')\nWHERE Name = 'mv_name' \\G \n"})}),"\n",(0,t.jsx)(n.p,{children:"Example output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"*************************** 1. row ***************************\n                Id: 139570\n              Name: mv11\n           JobName: inner_mtmv_139570\n             State: NORMAL\nSchemaChangeDetail: \n      RefreshState: SUCCESS\n       RefreshInfo: BUILD IMMEDIATE REFRESH AUTO ON MANUAL\n          QuerySql: SELECT l_shipdate, l_orderkey, O_ORDERDATE, count(*)\nFROM lineitem  \nLEFT OUTER JOIN orders on l_orderkey = o_orderkey\nGROUP BY l_shipdate, l_orderkey, O_ORDERDATE\n           EnvInfo: EnvInfo{ctlId='0', dbId='16813'}\n      MvProperties: {}\n   MvPartitionInfo: MTMVPartitionInfo{partitionType=FOLLOW_BASE_TABLE, relatedTable=lineitem, relatedCol='l_shipdate', partitionCol='l_shipdate'}\nSyncWithBaseTables: 1\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"SyncWithBaseTables:"})," Indicates whether the materialized view is synchronized with base tables."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For fully built materialized views, a value of 1 indicates the view is available for transparent rewriting."}),"\n",(0,t.jsxs)(n.li,{children:["For incrementally partitioned materialized views, availability is determined at the partition level. Even if some partitions are unavailable, the view can still be used for transparent rewriting if the queried partitions are valid. The ability to use transparent rewriting depends on the ",(0,t.jsx)(n.code,{children:"SyncWithBaseTables"})," value of the queried partitions - 1 means available, 0 means unavailable."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"JobName:"})," Name of the materialized view's build job. Each materialized view has one Job, and each refresh creates a new Task, with a 1:n relationship between Jobs and Tasks."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"State:"})," If changed to SCHEMA_CHANGE, indicates the base table's schema has changed. The materialized view cannot be used for transparent rewriting (but can still be queried directly). Will return to NORMAL after the next successful refresh task."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"SchemaChangeDetail:"})," Explains the reason for SCHEMA_CHANGE."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"RefreshState:"})," Status of the last refresh task. If FAIL, indicates execution failed - use the ",(0,t.jsx)(n.code,{children:"tasks()"})," command to identify the cause. See [Viewing Materialized View Task Status](### Querying Refresh Task Information) section."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"SyncWithBaseTables:"})," Whether synchronized with base tables. 1 means synchronized, 0 means not synchronized. If not synchronized, use ",(0,t.jsx)(n.code,{children:"show partitions"})," to check which partitions are out of sync. See the section below on checking SyncWithBaseTables status for partitioned materialized views."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For transparent rewriting, materialized views typically have two states:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Normal:"})," The materialized view is available for transparent rewriting."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unavailable/Abnormal:"})," The materialized view cannot be used for transparent rewriting. However, it can still be queried directly."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-functions/table-valued-functions/mv_infos",children:"MV_INFOS"})]}),"\n",(0,t.jsx)(n.h3,{id:"querying-refresh-task-information",children:"Querying Refresh Task Information"}),"\n",(0,t.jsx)(n.p,{children:"Each materialized view has one Job, and each refresh creates a new Task, with a 1:n relationship between Jobs and Tasks.\nTo view a materialized view's Task status by name, run the following query to check refresh task status and progress:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM tasks(\"type\"=\"mv\")\nWHERE\n  MvDatabaseName = 'mv_db_name' and\n  mvName = 'mv_name'\nORDER BY  CreateTime DESC \\G\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'*************************** 1. row ***************************\n               TaskId: 167019363907545\n                JobId: 139872\n              JobName: inner_mtmv_139570\n                 MvId: 139570\n               MvName: mv11\n         MvDatabaseId: 16813\n       MvDatabaseName: regression_test_nereids_rules_p0_mv\n               Status: SUCCESS\n             ErrorMsg: \n           CreateTime: 2024-06-21 10:31:43\n            StartTime: 2024-06-21 10:31:43\n           FinishTime: 2024-06-21 10:31:45\n           DurationMs: 2466\n          TaskContext: {"triggerMode":"SYSTEM","isComplete":false}\n          RefreshMode: COMPLETE\nNeedRefreshPartitions: ["p_20231023_20231024","p_20231019_20231020","p_20231020_20231021","p_20231027_20231028","p_20231030_20231031","p_20231018_20231019","p_20231024_20231025","p_20231021_20231022","p_20231029_20231030","p_20231028_20231029","p_20231025_20231026","p_20231022_20231023","p_20231031_20231101","p_20231016_20231017","p_20231026_20231027"]\n  CompletedPartitions: ["p_20231023_20231024","p_20231019_20231020","p_20231020_20231021","p_20231027_20231028","p_20231030_20231031","p_20231018_20231019","p_20231024_20231025","p_20231021_20231022","p_20231029_20231030","p_20231028_20231029","p_20231025_20231026","p_20231022_20231023","p_20231031_20231101","p_20231016_20231017","p_20231026_20231027"]\n             Progress: 100.00% (15/15)\n          LastQueryId: fe700ca3d6504521-bb522fc9ccf615e3\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"NeedRefreshPartitions and CompletedPartitions record the partitions refreshed in this Task."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Status: If FAILED, indicates execution failed. Check ErrorMsg for failure reason or use LastQueryId to search Doris logs for detailed error information. Currently, task failure makes existing materialized views unavailable. This will be changed so existing materialized views remain available for transparent rewriting even if tasks fail."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"ErrorMsg: Failure reason."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"RefreshMode: COMPLETE means all partitions were refreshed, PARTIAL means some partitions were refreshed, NOT_REFRESH means no partitions needed refreshing."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Note",type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Currently, the default storage and display count for tasks is 100. This can be modified by configuring max_persistence_task_count in the fe.conf file. When exceeding this limit, older task records will be discarded. If the value is set to < 1, task persistence will be disabled. After modifying the configuration, a restart of the FE service is required for the changes to take effect."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"grace_period"})," property was set when creating the materialized view, it may still be available for transparent rewriting in some cases even if ",(0,t.jsx)(n.code,{children:"SyncWithBaseTables"})," is false or 0."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"grace_period"})," is measured in seconds and specifies the allowed time for data inconsistency between the materialized view and base tables."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If set to 0, requires exact consistency between materialized view and base table data for transparent rewriting."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If set to 10, allows up to 10 seconds of delay between materialized view and base table data. The materialized view can be used for transparent rewriting during this 10-second window."}),"\n"]}),"\n"]})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-functions/table-valued-functions/tasks",children:"TASKS"})]}),"\n",(0,t.jsx)(n.h3,{id:"querying-materialized-view-jobs",children:"Querying Materialized View Jobs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT * \nFROM jobs("type"="mv") \nWHERE Name="inner_mtmv_75043";\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-functions/table-valued-functions/jobs",children:"JOBS"})]}),"\n",(0,t.jsx)(n.h3,{id:"querying-materialized-view-partition-information",children:"Querying Materialized View Partition Information"}),"\n",(0,t.jsx)(n.p,{children:"Checking SyncWithBaseTables Status for Partitioned Materialized Views"}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"show partitions from mv_name"})," to check if queried partitions are valid. Example output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Plain",children:"show partitions from mv11;\n+-------------+---------------------+----------------+---------------------+--------+--------------+--------------------------------------------------------------------------------+-----------------+---------+----------------+---------------+---------------------+---------------------+--------------------------+-----------+------------+-------------------------+-----------+--------------------+--------------+\n| PartitionId | PartitionName       | VisibleVersion | VisibleVersionTime  | State  | PartitionKey | Range                                                                          | DistributionKey | Buckets | ReplicationNum | StorageMedium | CooldownTime        | RemoteStoragePolicy | LastConsistencyCheckTime | DataSize  | IsInMemory | ReplicaAllocation       | IsMutable | SyncWithBaseTables | UnsyncTables |\n+-------------+---------------------+----------------+---------------------+--------+--------------+--------------------------------------------------------------------------------+-----------------+---------+----------------+---------------+---------------------+---------------------+--------------------------+-----------+------------+-------------------------+-----------+--------------------+--------------+\n| 140189      | p_20231016_20231017 | 1              | 2024-06-21 10:31:45 | NORMAL | l_shipdate   | [types: [DATEV2]; keys: [2023-10-16]; ..types: [DATEV2]; keys: [2023-10-17]; ) | l_orderkey      | 10      | 1              | HDD           | 9999-12-31 23:59:59 |                     | NULL                     | 0.000     | false      | tag.location.default: 1 | true      | true               | []           |\n| 139995      | p_20231018_20231019 | 2              | 2024-06-21 10:31:44 | NORMAL | l_shipdate   | [types: [DATEV2]; keys: [2023-10-18]; ..types: [DATEV2]; keys: [2023-10-19]; ) | l_orderkey      | 10      | 1              | HDD           | 9999-12-31 23:59:59 |                     | NULL                     | 880.000 B | false      | tag.location.default: 1 | true      | true               | []           |\n| 139898      | p_20231019_20231020 | 2              | 2024-06-21 10:31:43 | NORMAL | l_shipdate   | [types: [DATEV2]; keys: [2023-10-19]; ..types: [DATEV2]; keys: [2023-10-20]; ) | l_orderkey      | 10      | 1              | HDD           | 9999-12-31 23:59:59 |                     | NULL                     | 878.000 B | false      | tag.location.default: 1 | true      | true               | []           |\n+-------------+---------------------+----------------+---------------------+--------+--------------+--------------------------------------------------------------------------------+-----------------+---------+----------------+---------------+---------------------+---------------------+--------------------------+-----------+------------+-------------------------+-----------+--------------------+--------------+\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Check the ",(0,t.jsx)(n.code,{children:"SyncWithBaseTables"})," field - false indicates the partition is not available for transparent rewriting."]}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/table/SHOW-PARTITIONS",children:"SHOW PARTITIONS"})]}),"\n",(0,t.jsx)(n.h3,{id:"viewing-materialized-view-table-structure",children:"Viewing Materialized View Table Structure"}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"../../../sql-manual/sql-statements/table-and-view/table/DESC-TABLE",children:"DESCRIBE"})]}),"\n",(0,t.jsx)(n.h3,{id:"related-configuration",children:"Related Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"session-variables",children:"Session Variables"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Variable"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET enable_nereids_planner = true;"}),(0,t.jsx)(n.td,{children:"Async materialized views only work with the new optimizer. Enable this if materialized view transparent rewriting isn't working"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET enable_materialized_view_rewrite = true;"}),(0,t.jsx)(n.td,{children:"Enable/disable query transparent rewriting (enabled by default from version 2.1.5)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET materialized_view_rewrite_enable_contain_external_table = true;"}),(0,t.jsx)(n.td,{children:"Allow materialized views containing external tables to participate in transparent rewriting (disabled by default)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET materialized_view_rewrite_success_candidate_num = 3;"}),(0,t.jsx)(n.td,{children:"Maximum number of successful rewrite results allowed in CBO candidates (default 3). Reduce if transparent rewriting is slow"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET enable_materialized_view_union_rewrite = true;"}),(0,t.jsx)(n.td,{children:"Allow UNION ALL between base table and materialized view when partitioned view doesn't provide all needed data (enabled by default)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET enable_materialized_view_nest_rewrite = true;"}),(0,t.jsx)(n.td,{children:"Allow nested rewrites (disabled by default). Enable if complex queries require nested materialized views"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET materialized_view_relation_mapping_max_count = 8;"}),(0,t.jsx)(n.td,{children:"Maximum allowed relation mappings during transparent rewriting (default 8). Reduce if rewriting is slow"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET enable_dml_materialized_view_rewrite = true;"}),(0,t.jsx)(n.td,{children:"Enable structure-based materialized view transparent rewriting during DML (enabled by default)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SET enable_dml_materialized_view_rewrite_when_base_table_unawareness = true;"}),(0,t.jsx)(n.td,{children:"Enable structure-based materialized view transparent rewriting during DML when view contains external tables that can't be tracked in real-time (disabled by default)"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"feconf-configuration",children:"fe.conf Configuration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"job_mtmv_task_consumer_thread_num:"})," Controls the number of concurrent materialized view refresh tasks (default 10). Tasks exceeding this limit will be pending. Requires FE restart to take effect."]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return s}});var r=i(667294);let t={},a=r.createContext(t);function s(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);