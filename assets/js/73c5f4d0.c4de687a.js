"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["99953"],{388776:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>a,assets:()=>c,toc:()=>o,contentTitle:()=>i});var a=JSON.parse('{"id":"sql-manual/sql-functions/aggregate-functions/bitmap-agg","title":"BITMAP_AGG","description":"Description","source":"@site/versioned_docs/version-3.x/sql-manual/sql-functions/aggregate-functions/bitmap-agg.md","sourceDirName":"sql-manual/sql-functions/aggregate-functions","slug":"/sql-manual/sql-functions/aggregate-functions/bitmap-agg","permalink":"/docs/3.x/sql-manual/sql-functions/aggregate-functions/bitmap-agg","draft":false,"unlisted":false,"tags":[],"version":"3.x","frontMatter":{"title":"BITMAP_AGG","language":"en"},"sidebar":"docs","previous":{"title":"AVG_WEIGHTED","permalink":"/docs/3.x/sql-manual/sql-functions/aggregate-functions/avg-weighted"},"next":{"title":"BITMAP_INTERSECT","permalink":"/docs/3.x/sql-manual/sql-functions/aggregate-functions/bitmap-intersect"}}'),s=t("785893"),l=t("250065");let r={title:"BITMAP_AGG",language:"en"},i=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function d(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Aggregate the values of a column (excluding any NULL values) and return a single row bitmap value, i.e., convert multiple rows into one."}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"BITMAP_AGG(<expr>)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<expr>"})}),(0,s.jsx)(n.td,{children:"The column or expression of values to be aggregated. The type of expr must be TINYINT, SMALLINT, INT, LARGEINT, or BIGINT, and it also supports VARCHAR that can be converted to one of these types."})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(n.p,{children:"Returns a BITMAP type value. Special cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If a value is less than 0 or greater than 18446744073709551615, the value will be ignored and will not be merged into the Bitmap."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select * from test_bitmap_agg;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+------+------+------+------+------+-------------+----------------------+\n| id   | k0   | k1   | k2   | k3   | k4          | k5                   |\n+------+------+------+------+------+-------------+----------------------+\n|    1 |   10 | 110  |   11 |  300 | 10000000000 | 0                    |\n|    2 |   20 | 120  |   21 |  400 | 20000000000 | 200000000000000      |\n|    3 |   30 | 130  |   31 |  350 | 30000000000 | 300000000000000      |\n|    4 |   40 | 140  |   41 |  500 | 40000000000 | 18446744073709551616 |\n|    5 |   50 | 150  |   51 |  250 | 50000000000 | 18446744073709551615 |\n|    6 |   60 | 160  |   61 |  600 | 60000000000 | -1                   |\n|    7 |   60 | 160  |  120 |  600 | 60000000000 | NULL                 |\n+------+------+------+------+------+-------------+----------------------+\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select bitmap_to_string(bitmap_agg(k0)) from test_bitmap_agg;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+----------------------------------+\n| bitmap_to_string(bitmap_agg(k0)) |\n+----------------------------------+\n| 10,20,30,40,50,60                |\n+----------------------------------+\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select bitmap_to_string(bitmap_agg(k5)) from test_bitmap_agg;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+--------------------------------------------------------+\n| bitmap_to_string(bitmap_agg(cast(k5 as BIGINT)))       |\n+--------------------------------------------------------+\n| 0,200000000000000,300000000000000,18446744073709551615 |\n+--------------------------------------------------------+\n"})})]})}function u(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return r}});var a=t(667294);let s={},l=a.createContext(s);function r(e){let n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);