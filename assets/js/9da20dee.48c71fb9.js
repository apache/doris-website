"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["232558"],{798598:function(e,n,s){s.r(n),s.d(n,{default:()=>p,frontMatter:()=>i,metadata:()=>t,assets:()=>c,toc:()=>o,contentTitle:()=>a});var t=JSON.parse('{"id":"sql-manual/sql-functions/aggregate-functions/percentile-approx","title":"PERCENTILE_APPROX","description":"Description","source":"@site/docs/sql-manual/sql-functions/aggregate-functions/percentile-approx.md","sourceDirName":"sql-manual/sql-functions/aggregate-functions","slug":"/sql-manual/sql-functions/aggregate-functions/percentile-approx","permalink":"/docs/dev/sql-manual/sql-functions/aggregate-functions/percentile-approx","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"PERCENTILE_APPROX","language":"en"},"sidebar":"docs","previous":{"title":"PERCENTILE","permalink":"/docs/dev/sql-manual/sql-functions/aggregate-functions/percentile"},"next":{"title":"PERCENTILE_ARRAY","permalink":"/docs/dev/sql-manual/sql-functions/aggregate-functions/percentile-array"}}'),r=s("785893"),l=s("250065");let i={title:"PERCENTILE_APPROX",language:"en"},a=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"PERCENTILE_APPROX"})," function is used to calculate approximate percentiles, primarily for large datasets. Compared to the ",(0,r.jsx)(n.code,{children:"PERCENTILE"})," function, it has the following features:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Memory Efficiency: Uses fixed-size memory, maintaining low memory consumption even when processing low-cardinality columns (large data volumes but the number of different elements is small)"}),"\n",(0,r.jsx)(n.li,{children:"Performance Advantage: Suitable for processing low-cardinality large-scale datasets with faster computation"}),"\n",(0,r.jsx)(n.li,{children:"Adjustable Precision: Balance between precision and performance through the compression parameter"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"PERCENTILE_APPROX(<col>, <p> [, <compression>])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<col>"})}),(0,r.jsx)(n.td,{children:"The column to calculate percentiles for, supported type: Double."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<p>"})}),(0,r.jsxs)(n.td,{children:["Percentile value, constant, type Double, range ",(0,r.jsx)(n.code,{children:"[0.0, 1.0]"}),", e.g., ",(0,r.jsx)(n.code,{children:"0.99"})," means 99th percentile. Must be a constant."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<compression>"})}),(0,r.jsxs)(n.td,{children:["Optional, compression level, type Double, range ",(0,r.jsx)(n.code,{children:"[2048, 10000]"}),". Higher values increase precision but consume more memory. If not specified or out of range, defaults to ",(0,r.jsx)(n.code,{children:"10000"}),"."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsx)(n.p,{children:"Returns the approximate percentile of the specified column, type Double.\nIf there is no valid data in the group, returns NULL."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- setup\nCREATE TABLE response_times (\n    request_id INT,\n    response_time DECIMAL(10, 2)\n) DUPLICATE KEY(`request_id`)\nDISTRIBUTED BY HASH(`request_id`) BUCKETS AUTO\nPROPERTIES (\n    "replication_allocation" = "tag.location.default: 1"\n);\nINSERT INTO response_times VALUES\n(1, 10.5),\n(2, 15.2),\n(3, 20.1),\n(4, 25.8),\n(5, 30.3),\n(6, 35.7),\n(7, 40.2),\n(8, 45.9),\n(9, 50.4),\n(10, 100.6);\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Calculate 99th percentile using different compression levels\nSELECT \n    percentile_approx(response_time, 0.99) as p99_default,          -- Default compression\n    percentile_approx(response_time, 0.99, 2048) as p99_fast,       -- Lower compression, faster\n    percentile_approx(response_time, 0.99, 10000) as p99_accurate   -- Higher compression, more accurate\nFROM response_times;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+-------------------+-------------------+-------------------+\n| p99_default       | p99_fast          | p99_accurate      |\n+-------------------+-------------------+-------------------+\n| 100.5999984741211 | 100.5999984741211 | 100.5999984741211 |\n+-------------------+-------------------+-------------------+\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT percentile_approx(if(response_time>90,response_time,NULL), 0.5) FROM response_times;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Only non-NULL data is calculated."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+-----------------------------------------------------------------+\n| percentile_approx(if(response_time>90,response_time,NULL), 0.5) |\n+-----------------------------------------------------------------+\n|                                               100.5999984741211 |\n+-----------------------------------------------------------------+\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT percentile_approx(NULL, 0.99) FROM response_times;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns NULL when all input data is NULL."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+-------------------------------+\n| percentile_approx(NULL, 0.99)  |\n+-------------------------------+\n|                          NULL  |\n+-------------------------------+\n"})})]})}function p(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return i}});var t=s(667294);let r={},l=t.createContext(r);function i(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);