"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["232575"],{573652:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>o,metadata:()=>s,assets:()=>a,toc:()=>l,contentTitle:()=>c});var s=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/date-time-functions/from-microsecond","title":"FROM_MICROSECOND","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/date-time-functions/from-microsecond.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/date-time-functions","slug":"/sql-manual/sql-functions/scalar-functions/date-time-functions/from-microsecond","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/from-microsecond","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"FROM_MICROSECOND","language":"en"},"sidebar":"docs","previous":{"title":"FROM_ISO8601_DATE","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/from-iso8601-date"},"next":{"title":"FROM_MILLISECOND","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/from-millisecond"}}'),r=t("785893"),i=t("250065");let o={title:"FROM_MICROSECOND",language:"en"},c=void 0,a={},l=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The FROM_MICROSECOND function is used to convert a Unix timestamp (in microseconds) to a ",(0,r.jsx)(n.code,{children:"DATETIME"})," type date-time value. The reference time for Unix timestamps is 1970-01-01 00:00:00 UTC, and this function converts the input microseconds to the corresponding specific date and time after that reference time (including the fractional part of seconds, accurate to microseconds)."]}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"FROM_MICROSECOND(<unix_timestamp>)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<unix_timestamp>"})}),(0,r.jsx)(n.td,{children:"Input Unix timestamp, of integer type (BIGINT), representing the number of microseconds from 1970-01-01 00:00:00 UTC"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsx)(n.p,{children:"Returns a DATETIME type value representing the result of converting the UTC timezone unix timestamp to the current timezone time"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If <unix_timestamp> is NULL, the function returns NULL."}),"\n",(0,r.jsx)(n.li,{children:"If the input <unix_timestamp> can be converted to integer seconds, the result returns datetime without scale; if not, the result returns datetime with scale"}),"\n",(0,r.jsx)(n.li,{children:"If <unix_timestamp> is less than 0, returns an error"}),"\n",(0,r.jsx)(n.li,{children:"If the returned datetime exceeds the maximum time 9999-12-31 23:59:59, returns an error"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"\n-- Current machine is in East 8th timezone, so the returned time is 8 hours ahead of UTC\nSELECT FROM_MICROSECOND(0);\n+----------------------------+\n| FROM_MICROSECOND(0)        |\n+----------------------------+\n| 1970-01-01 08:00:00.000000 |\n+----------------------------+\n\n-- Convert 1700000000000000 microseconds added to reference time to datetime\nSELECT FROM_MICROSECOND(1700000000000000);\n\n+------------------------------------+\n| from_microsecond(1700000000000000) |\n+------------------------------------+\n| 2023-11-15 06:13:20                |\n+------------------------------------+\n\n-- Timestamp contains non-integer seconds (1700000000 seconds + 123456 microseconds)\nselect from_microsecond(1700000000123456) as dt_with_micro;\n\n+----------------------------+\n| dt_with_micro              |\n+----------------------------+\n| 2023-11-15 06:13:20.123456 |\n+----------------------------+\n\n-- Input negative number, returns error\n select from_microsecond(-1);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.3)[E-218]Operation from_microsecond of -1 out of range\n\n\n-- Input NULL, returns NULL\nselect from_microsecond(NULL);\n+------------------------+\n| from_microsecond(NULL) |\n+------------------------+\n| NULL                   |\n+------------------------+\n\n-- Exceeds maximum time range 9999-12-31 23:59:59, returns error\nselect from_microsecond(999999999999999999);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.3)[E-218]Operation from_microsecond of 999999999999999999 out of range\n"})})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return o}});var s=t(667294);let r={},i=s.createContext(r);function o(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);