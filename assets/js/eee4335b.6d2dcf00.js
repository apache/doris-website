"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["974631"],{641023:function(e,n,a){a.r(n),a.d(n,{default:()=>p,frontMatter:()=>i,metadata:()=>t,assets:()=>c,toc:()=>o,contentTitle:()=>r});var t=JSON.parse('{"id":"sql-manual/sql-functions/table-functions/explode-bitmap","title":"EXPLODE_BITMAP","description":"Description","source":"@site/docs/sql-manual/sql-functions/table-functions/explode-bitmap.md","sourceDirName":"sql-manual/sql-functions/table-functions","slug":"/sql-manual/sql-functions/table-functions/explode-bitmap","permalink":"/docs/dev/sql-manual/sql-functions/table-functions/explode-bitmap","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"EXPLODE_BITMAP","language":"en"},"sidebar":"docs","previous":{"title":"EXPLODE-OUTER","permalink":"/docs/dev/sql-manual/sql-functions/table-functions/explode-outer"},"next":{"title":"EXPLODE_BITMAP_OUTER","permalink":"/docs/dev/sql-manual/sql-functions/table-functions/explode-bitmap-outer"}}'),l=a("785893"),s=a("250065");let i={title:"EXPLODE_BITMAP",language:"en"},r=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Notes",id:"usage-notes",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"explode_bitmap"})," table function accepts a bitmap type data and maps each bit in the bitmap to a separate row.\nIt is commonly used to process bitmap data, expanding each element in the bitmap into a separate record. It should be used together with ",(0,l.jsx)(n.a,{href:"/docs/dev/query-data/lateral-view",children:(0,l.jsx)(n.code,{children:"LATERAL VIEW"})}),".\n",(0,l.jsx)(n.code,{children:"explode_bitmap_outer"})," is similar to ",(0,l.jsx)(n.code,{children:"explode_bitmap"}),", but behaves differently when handling empty or NULL values. It allows records with empty or NULL bitmaps to exist and expands them into NULL rows in the result."]}),"\n",(0,l.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"EXPLODE_BITMAP(<bitmap>)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<bitmap>"})," ",(0,l.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/aggregate/BITMAP",children:(0,l.jsx)(n.code,{children:"BITMAP"})})," type"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Returns a row for each bit in ",(0,l.jsx)(n.code,{children:"<bitmap>"}),", with each row containing a bit value."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["If the ",(0,l.jsx)(n.code,{children:"<bitmap>"})," parameter is not of type ",(0,l.jsx)(n.a,{href:"/docs/dev/sql-manual/basic-element/sql-data-types/aggregate/BITMAP",children:(0,l.jsx)(n.code,{children:"BITMAP"})}),", an error will be reported."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsxs)(n.ol,{start:"0",children:["\n",(0,l.jsxs)(n.li,{children:["Prepare data\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'create table example(\n    k1 int\n) properties(\n    "replication_num" = "1"\n);\n\ninsert into example values(1);\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Regular parameters\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'select k1, e1 from example lateral view explode_bitmap(bitmap_from_string("1,3,4,5,6,10")) t2 as e1 order by k1, e1;\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"+------+------+\n| k1   | e1   |\n+------+------+\n|    1 |    1 |\n|    1 |    3 |\n|    1 |    4 |\n|    1 |    5 |\n|    1 |    6 |\n|    1 |   10 |\n+------+------+\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Empty BITMAP\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'select k1, e1 from example lateral view explode_bitmap(bitmap_from_string("")) t2 as e1 order by k1, e1;\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"Empty set (0.03 sec)\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["NULL parameter\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select  * from example lateral view explode_bitmap(NULL) t2 as c;\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"Empty set (0.03 sec)\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["Non-array parameter\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"select  * from example lateral view explode_bitmap('abc') t2 as c;\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"ERROR 1105 (HY000): errCode = 2, detailMessage = Can not find the compatibility function signature: explode_bitmap(VARCHAR(3))\n"})}),"\n"]}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},250065:function(e,n,a){a.d(n,{Z:function(){return r},a:function(){return i}});var t=a(667294);let l={},s=t.createContext(l);function i(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);