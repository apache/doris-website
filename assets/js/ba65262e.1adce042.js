"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["642765"],{589617:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>s,assets:()=>l,toc:()=>c,contentTitle:()=>a});var s=JSON.parse('{"id":"sql-manual/sql-functions/aggregate-functions/percentile-approx","title":"PERCENTILE_APPROX","description":"PERCENTILE_APPROX","source":"@site/versioned_docs/version-2.0/sql-manual/sql-functions/aggregate-functions/percentile-approx.md","sourceDirName":"sql-manual/sql-functions/aggregate-functions","slug":"/sql-manual/sql-functions/aggregate-functions/percentile-approx","permalink":"/docs/2.0/sql-manual/sql-functions/aggregate-functions/percentile-approx","draft":false,"unlisted":false,"tags":[],"version":"2.0","frontMatter":{"title":"PERCENTILE_APPROX","language":"en"},"sidebar":"docs","previous":{"title":"GROUP_BIT_XOR","permalink":"/docs/2.0/sql-manual/sql-functions/aggregate-functions/group-bit-xor"},"next":{"title":"STDDEV,STDDEV_POP","permalink":"/docs/2.0/sql-manual/sql-functions/aggregate-functions/stddev"}}'),i=t("785893"),o=t("250065");let r={title:"PERCENTILE_APPROX",language:"en"},a=void 0,l={},c=[{value:"PERCENTILE_APPROX",id:"percentile_approx",level:2},{value:"Description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"example",id:"example",level:3},{value:"keywords",id:"keywords",level:3}];function p(e){let n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"percentile_approx",children:"PERCENTILE_APPROX"}),"\n",(0,i.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"PERCENTILE_APPROX(expr, DOUBLE p[, DOUBLE compression])"})}),"\n",(0,i.jsx)(n.p,{children:"Return the approximation of the point p, where the value of P is between 0 and 1."}),"\n",(0,i.jsx)(n.p,{children:"Compression param is optional and can be setted to a value in the range of [2048, 10000]. The bigger compression you set, the more precise result and more time cost you will get. If it is not setted or not setted in the correct range, PERCENTILE_APPROX function will run with a default compression param of 10000."}),"\n",(0,i.jsx)(n.p,{children:"This function uses fixed size memory, so less memory can be used for columns with high cardinality, and can be used to calculate statistics such as tp99."}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"MySQL > select `table`, percentile_approx(cost_time,0.99) from log_statis group by `table`;\n+---------------------+---------------------------+\n| table    | percentile_approx(`cost_time`, 0.99) |\n+----------+--------------------------------------+\n| test     |                                54.22 |\n+----------+--------------------------------------+\n\nMySQL > select `table`, percentile_approx(cost_time,0.99, 4096) from log_statis group by `table`;\n+---------------------+---------------------------+\n| table    | percentile_approx(`cost_time`, 0.99, 4096.0) |\n+----------+--------------------------------------+\n| test     |                                54.21 |\n+----------+--------------------------------------+\n"})}),"\n",(0,i.jsx)(n.h3,{id:"keywords",children:"keywords"}),"\n",(0,i.jsx)(n.p,{children:"PERCENTILE_APPROX,PERCENTILE,APPROX"})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var s=t(667294);let i={},o=s.createContext(i);function r(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);