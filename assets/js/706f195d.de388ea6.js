"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["286949"],{103011:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>a,metadata:()=>i,assets:()=>o,toc:()=>l,contentTitle:()=>c});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/date-time-functions/microsecond-timestamp","title":"MICROSECOND_TIMESTAMP","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/date-time-functions/microsecond-timestamp.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/date-time-functions","slug":"/sql-manual/sql-functions/scalar-functions/date-time-functions/microsecond-timestamp","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/microsecond-timestamp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"MICROSECOND_TIMESTAMP","language":"en"},"sidebar":"docs","previous":{"title":"MICROSECOND","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/microsecond"},"next":{"title":"MICROSECONDS_ADD","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/microseconds-add"}}'),s=t("785893"),r=t("250065");let a={title:"MICROSECOND_TIMESTAMP",language:"en"},c=void 0,o={},l=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"The MICROSECOND_TIMESTAMP function is used to convert an input datetime value into a Unix timestamp calculated from 1970-01-01 00:00:00 (adjusted by the local time zone offset), with the unit being microseconds (1 second = 1,000,000 microseconds). This function supports processing DATETIME types with microsecond precision, and automatically ignores time zone differences during conversion (using UTC time as the default reference)."}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"MICROSECOND_TIMESTAMP(`<datetime>`)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<datetime>"})}),(0,s.jsxs)(n.td,{children:["Represents the datetime to be converted into a Unix timestamp. Supports the ",(0,s.jsx)(n.code,{children:"DATETIME"})," type. For specific datetime formats, see ",(0,s.jsx)(n.a,{href:"../../../../../docs/sql-manual/basic-element/sql-data-types/conversion/datetime-conversion",children:"datetime conversion"})]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)(n.code,{children:"BIGINT"})," integer representing the Unix timestamp in microseconds corresponding to the input datetime (total microseconds converted to the current time zone)."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If the input is ",(0,s.jsx)(n.code,{children:"NULL"}),", the function returns ",(0,s.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"If the input datetime is before 1970-01-01 00:00:00.000 UTC, the result is negative."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Convert a DATETIME with microsecond precision, executed in a machine with the East 8 time zone\nSELECT MICROSECOND_TIMESTAMP('2025-01-23 12:34:56.123456');\n+-----------------------------------------------------+\n| MICROSECOND_TIMESTAMP('2025-01-23 12:34:56.123456') |\n+-----------------------------------------------------+\n|                                    1737606896123456 |\n+-----------------------------------------------------+\n\n-- Explicitly specify the time zone as UTC\nSELECT MICROSECOND_TIMESTAMP('2025-01-23 12:34:56.123456 UTC');\n+---------------------------------------------------------+\n| MICROSECOND_TIMESTAMP('2025-01-23 12:34:56.123456 UTC') |\n+---------------------------------------------------------+\n|                                        1737635696123456 |\n+---------------------------------------------------------+\n\n-- Input type is DATE, time part is automatically set to 00:00:00.000000\nSELECT MICROSECOND_TIMESTAMP('1970-01-01');\n+-------------------------------------+\n| MICROSECOND_TIMESTAMP('1970-01-01') |\n+-------------------------------------+\n|                        -28800000000 |\n+-------------------------------------+\n\n-- Specified time zone is out of range, returns NULL\nSELECT MICROSECOND_TIMESTAMP('2025-01-23 12:34:56.123456 +15:00');\n+------------------------------------------------------------+\n| MICROSECOND_TIMESTAMP('2025-01-23 12:34:56.123456 +15:00') |\n+------------------------------------------------------------+\n|                                                       NULL |\n+------------------------------------------------------------+\n\n-- If the input datetime is before 1970 (standard UTC), returns a negative value\nSELECT MICROSECOND_TIMESTAMP('1960-01-01 00:00:00 UTC');\n+---------------------------------------------------+\n| MICROSECOND_TIMESTAMP('1960-01-01 00:00:00 UTC') |\n+---------------------------------------------------+\n|                                  -315619200000000 |\n+---------------------------------------------------+\n\n-- Input is NULL, returns NULL\nSELECT MICROSECOND_TIMESTAMP(NULL);\n+-----------------------------+\n| MICROSECOND_TIMESTAMP(NULL) |\n+-----------------------------+\n|                        NULL  |\n+-----------------------------+\n"})})]})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return a}});var i=t(667294);let s={},r=i.createContext(s);function a(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);