"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["532665"],{967900:function(e,l,n){n.r(l),n.d(l,{default:()=>u,frontMatter:()=>c,metadata:()=>i,assets:()=>r,toc:()=>d,contentTitle:()=>o});var i=JSON.parse('{"id":"sql-manual/basic-element/sql-data-types/numeric/DECIMAL","title":"DECIMAL","description":"DECIMAL","source":"@site/docs/sql-manual/basic-element/sql-data-types/numeric/DECIMAL.md","sourceDirName":"sql-manual/basic-element/sql-data-types/numeric","slug":"/sql-manual/basic-element/sql-data-types/numeric/DECIMAL","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/numeric/DECIMAL","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"DECIMAL","language":"en"},"sidebar":"docs","previous":{"title":"LARGEINT","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/numeric/LARGEINT"},"next":{"title":"Floating-Point Types (FLOAT and DOUBLE)","permalink":"/docs/dev/sql-manual/basic-element/sql-data-types/numeric/FLOATING-POINT"}}'),s=n("785893"),t=n("250065");let c={title:"DECIMAL",language:"en"},o=void 0,r={},d=[{value:"DECIMAL",id:"decimal",level:2},{value:"Description",id:"description",level:3},{value:"Precision Deduction",id:"precision-deduction",level:3},{value:"Arithmetic Operations",id:"arithmetic-operations",level:4},{value:"Examples",id:"examples",level:5},{value:"Multiplication No Overflow",id:"multiplication-no-overflow",level:6},{value:"Multiplication Overflow",id:"multiplication-overflow",level:6},{value:"Enable decimal256 when multiplication overflow",id:"enable-decimal256-when-multiplication-overflow",level:6},{value:"Division No Overflow",id:"division-no-overflow",level:6},{value:"Division Overflow Rule 1",id:"division-overflow-rule-1",level:6},{value:"Division Overflow Rule 2",id:"division-overflow-rule-2",level:6},{value:"Division Overflow Rule 3",id:"division-overflow-rule-3",level:6},{value:"Aggregation Operations",id:"aggregation-operations",level:4},{value:"Default Rules",id:"default-rules",level:4},{value:"Adjusting Result Precision",id:"adjusting-result-precision",level:4},{value:"Why DECIMAL is Required",id:"why-decimal-is-required",level:3},{value:"keywords",id:"keywords",level:3}];function a(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.h2,{id:"decimal",children:"DECIMAL"}),"\n",(0,s.jsx)(l.p,{children:"DECIMAL"}),"\n",(0,s.jsx)(l.h3,{id:"description",children:"Description"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{children:"DECIMAL(P[,S])\nHigh-precision fixed-point number, where P represents the total count of significant digits (precision), and S is the count of decimal digits in the fractional part, to the right of the decimal point.\nThe range of significant digits P is [1, MAX_P], where MAX_P=38 when enable_decimal256=false, and MAX_P=76 when enable_decimal256=true.\nThe range of decimal places S is [0, P].\n\nBy default, precision is 38, and scale is 9(that is DECIMAL(38, 9)).\n\nThe default value of enable_decimal256 is false. Setting it to true can get more accurate results, but it will bring some performance loss.\n\nWhen outputting decimal types, the decimal point is always followed by S digits, even if the trailing digits are 0. For example, the number 123.456 of type decimal(18, 6) will be output as 123.456000.\n"})}),"\n",(0,s.jsx)(l.h3,{id:"precision-deduction",children:"Precision Deduction"}),"\n",(0,s.jsx)(l.p,{children:"DECIMAL has a very complex set of type inference rules. For different expressions, different rules will be applied for precision inference."}),"\n",(0,s.jsx)(l.h4,{id:"arithmetic-operations",children:"Arithmetic Operations"}),"\n",(0,s.jsx)(l.p,{children:"Assuming e1(p1, s1) and e2(p2, s2) are two DECIMAL numbers, the precision deduction rules for operation results are as follows:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{children:"Operation"}),(0,s.jsx)(l.th,{children:"Result precision"}),(0,s.jsx)(l.th,{children:"Result scale"}),(0,s.jsx)(l.th,{children:"Result precision if overflow"}),(0,s.jsx)(l.th,{children:"Result scale if overflow"}),(0,s.jsx)(l.th,{children:"Intermediate e1 type"}),(0,s.jsx)(l.th,{children:"Intermediate e2 type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"e1 + e2"}),(0,s.jsx)(l.td,{children:"max(p1 - s1,p2 - s2) + max(s1, s2) + 1"}),(0,s.jsx)(l.td,{children:"max(s1, s2)"}),(0,s.jsx)(l.td,{children:"MAX_P"}),(0,s.jsx)(l.td,{children:"min(MAX_P, p) - max(p1 - s1,p2 - s2)"}),(0,s.jsx)(l.td,{children:"Cast according to result"}),(0,s.jsx)(l.td,{children:"Cast according to result"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"e1 - e2"}),(0,s.jsx)(l.td,{children:"max(p1 - s1,p2 - s2) + max(s1, s2) + 1"}),(0,s.jsx)(l.td,{children:"max(s1, s2)"}),(0,s.jsx)(l.td,{children:"MAX_P"}),(0,s.jsx)(l.td,{children:"min(MAX_P, p) - max(p1 - s1,p2 - s2)"}),(0,s.jsx)(l.td,{children:"Cast according to result"}),(0,s.jsx)(l.td,{children:"Cast according to result"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"e1 * e2"}),(0,s.jsx)(l.td,{children:"p1 + p2"}),(0,s.jsx)(l.td,{children:"s1 + s2"}),(0,s.jsx)(l.td,{children:"MAX_P"}),(0,s.jsx)(l.td,{children:(0,s.jsxs)(l.ol,{children:[(0,s.jsxs)(l.li,{children:["precision - scale < MAX_P - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),": min(scale, 38 - (precision - scale))"]}),(0,s.jsxs)(l.li,{children:["precision - scale > MAX_P - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", and scale < ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),": s1 + s2"]}),(0,s.jsxs)(l.li,{children:["precision - scale > MAX_P - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),"\uFF0Cscale >= ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),"\uFF1A",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})]})]})}),(0,s.jsx)(l.td,{children:"Unchanged"}),(0,s.jsx)(l.td,{children:"Unchanged"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"e1 / e2"}),(0,s.jsxs)(l.td,{children:["p1 + s2 + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})]}),(0,s.jsxs)(l.td,{children:["s1 + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})]}),(0,s.jsx)(l.td,{children:"MAX_P"}),(0,s.jsx)(l.td,{children:(0,s.jsxs)(l.ol,{children:[(0,s.jsxs)(l.li,{children:["precision - s1 less than max_precision - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),": (max_precision - (precision - s1)) + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})]}),(0,s.jsxs)(l.li,{children:["precision - s1 greater than max_precision - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", and s1 less than ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),": s1 + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})]}),(0,s.jsxs)(l.li,{children:["precision - s1 greater than max_precision - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", and s1 greater than or equal to ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),": ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})]})]})}),(0,s.jsx)(l.td,{children:"p cast according to result, s cast according to result+e2.scale"}),(0,s.jsx)(l.td,{})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"e1 % e2"}),(0,s.jsx)(l.td,{children:"max(p1 - s1,p2 - s2) + max(s1, s2)"}),(0,s.jsx)(l.td,{children:"max(s1, s2)"}),(0,s.jsx)(l.td,{children:"MAX_P"}),(0,s.jsx)(l.td,{children:"min(MAX_P, p) - max(p1 - s1,p2 - s2)"}),(0,s.jsx)(l.td,{children:"Cast according to result"}),(0,s.jsx)(l.td,{children:"Cast according to result"})]})]})]}),"\n",(0,s.jsxs)(l.p,{children:["In the rules for calculating ",(0,s.jsx)(l.code,{children:"Result scale if overflow"})," in the table, ",(0,s.jsx)(l.code,{children:"precision"})," refers to ",(0,s.jsx)(l.code,{children:"precision"})," in the ",(0,s.jsx)(l.code,{children:"Result precision"})," column, and ",(0,s.jsx)(l.code,{children:"scale"})," refers to ",(0,s.jsx)(l.code,{children:"scale"})," in the ",(0,s.jsx)(l.code,{children:"Result scale"})," column."]}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"div_precision_increment"})," is a configuration parameter of FE, see ",(0,s.jsx)(l.a,{href:"../../../../admin-manual/config/fe-config#div_precision_increment",children:"div_precision_increment"}),"."]}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," is a session variable of FE, which indicates the maximum number of decimal places that can be retained in the calculation result when the precision of the decimal value calculation result overflows. The default value is 6."]}),"\n",(0,s.jsxs)(l.p,{children:["It is worth noting that the process of division calculation is as follows:\nDECIMAL(p1, s1) / DECIMAL(p2, s2) is first converted to DECIMAL(p1 + s2 + div_precision_increment, s1 + s2) / DECIMAL(p2, s2) and then the calculation is performed. Therefore, it is possible that DECIMAL(p1 + s2 + div_precision_increment, s1 + div_precision_increment) satisfies the range of DECIMAL,\nbut due to the conversion to DECIMAL(p1 + s2 + div_precision_increment, s1 + s2),\nit exceeds the range, Doris will report an ",(0,s.jsx)(l.code,{children:"Arithmetic overflow"})," error by default."]}),"\n",(0,s.jsx)(l.h5,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(l.h6,{id:"multiplication-no-overflow",children:"Multiplication No Overflow"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"create table test_decimal_mul_no_overflow(f1 decimal(19, 9), f2 decimal(19, 9)) properties('replication_num'='1');\ninsert into test_decimal_mul_no_overflow values('9999999999.999999999', '9999999999.999999999');\n"})}),"\n",(0,s.jsx)(l.p,{children:"According to the calculation rules of the multiplication result precision, the result type is decimal(38, 18) and will not overflow:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 * f2 from test_decimal_mul_no_overflow;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 * f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_mul_no_overflow(test_decimal_mul_no_overflow), PREAGGREGATION: ON                                  |\n|      partitions=1/1 (test_decimal_mul_no_overflow)                                                                               |\n|      tablets=10/10, tabletList=1750210355691,1750210355693,1750210355695 ...                                                     |\n|      cardinality=1, avgRowSize=3065.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                        |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_no_overflow}                                                                          |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_no_overflow}                                                                          |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,18), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Results:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_no_overflow;\n+----------------------+----------------------+-----------------------------------------+\n| f1                   | f2                   | f1 * f2                                 |\n+----------------------+----------------------+-----------------------------------------+\n| 9999999999.999999999 | 9999999999.999999999 | 99999999999999999980.000000000000000001 |\n+----------------------+----------------------+-----------------------------------------+\n"})}),"\n",(0,s.jsx)(l.h6,{id:"multiplication-overflow",children:"Multiplication Overflow"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"create table test_decimal_mul_overflow1(f1 decimal(20, 5), f2 decimal(21, 6)) properties('replication_num'='1');\ninsert into test_decimal_mul_overflow1 values('12345678901234.12345', '12345678901234.123456');\n"})}),"\n",(0,s.jsxs)(l.p,{children:["According to the calculation rules of the precision of the multiplication result, under the default configuration (",(0,s.jsx)(l.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(l.code,{children:"div_precision_increment"}),"=4), the normal calculated result type is ",(0,s.jsx)(l.code,{children:"decimal(41, 11)"}),". The precision overflows and needs to be recalculated according to the overflow rules: ",(0,s.jsx)(l.code,{children:"MAX_P"})," - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32, ",(0,s.jsx)(l.code,{children:"precision"})," - ",(0,s.jsx)(l.code,{children:"scale"})," = 41 - 11 = 30 < 32, Rule 1 applies, the final result scale = min(11, 38 - 30) = 8, and the final result type is decimal(38, 8):"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:" explain verbose select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 * f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test.test_decimal_mul_overflow1(test_decimal_mul_overflow1), PREAGGREGATION: ON                                     |\n|      partitions=1/1 (test_decimal_mul_overflow1)                                                                                |\n|      tablets=10/10, tabletList=1750210355791,1750210355793,1750210355795 ...                                                    |\n|      cardinality=1, avgRowSize=3115.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                       |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,8), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Results:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------+-----------------------+--------------------------------------+\n| f1                   | f2                    | f1 * f2                              |\n+----------------------+-----------------------+--------------------------------------+\n| 12345678901234.12345 | 12345678901234.123456 | 152415787532377393748917544.09724464 |\n+----------------------+-----------------------+--------------------------------------+\n"})}),"\n",(0,s.jsxs)(l.p,{children:["If the value of ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," is increased, for example, ",(0,s.jsx)(l.code,{children:"set decimal_overflow_scale=9;"}),", the calculation is performed according to the overflow rule: ",(0,s.jsx)(l.code,{children:"MAX_P"})," - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," = 38 - 9 = 29, ",(0,s.jsx)(l.code,{children:"precision"})," - ",(0,s.jsx)(l.code,{children:"scale"})," = 41 - 11 = 30 > 29, and scale > ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", overflow rule 3 applies, and the final calculated result type is: ",(0,s.jsx)(l.code,{children:"decimal(38,9)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 * f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test.test_decimal_mul_overflow1(test_decimal_mul_overflow1), PREAGGREGATION: ON                                     |\n|      partitions=1/1 (test_decimal_mul_overflow1)                                                                                |\n|      tablets=10/10, tabletList=1750210355963,1750210355965,1750210355967 ...                                                    |\n|      cardinality=1, avgRowSize=3145.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                       |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_overflow1}                                                                           |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,9), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Results:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------+-----------------------+---------------------------------------+\n| f1                   | f2                    | f1 * f2                               |\n+----------------------+-----------------------+---------------------------------------+\n| 12345678901234.12345 | 12345678901234.123456 | 152415787532377393748917544.097244643 |\n+----------------------+-----------------------+---------------------------------------+\n"})}),"\n",(0,s.jsxs)(l.p,{children:["If we continue to increase the value of ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", for example, ",(0,s.jsx)(l.code,{children:"set decimal_overflow_scale=12;"}),", we calculate according to the overflow rule: ",(0,s.jsx)(l.code,{children:"MAX_P"})," - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," = 38 - 12 = 26, ",(0,s.jsx)(l.code,{children:"precision"})," - ",(0,s.jsx)(l.code,{children:"scale"})," = 41 - 11 = 30 > 26, and scale < ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),". In this case, overflow rule 2 applies, and the final calculated result type is: ",(0,s.jsx)(l.code,{children:"decimal(38,11)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 * f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_mul_overflow1(test_decimal_mul_overflow1), PREAGGREGATION: ON                                      |\n|      partitions=1/1 (test_decimal_mul_overflow1)                                                                                 |\n|      tablets=10/10, tabletList=1750210355963,1750210355965,1750210355967 ...                                                     |\n|      cardinality=1, avgRowSize=3145.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (f1[#0] * f2[#1])                                                                        |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_mul_overflow1}                                                                            |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_mul_overflow1}                                                                            |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(20,5), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(21,6), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,11), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Results:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 * f2 from test_decimal_mul_overflow1;\n+----------------------+-----------------------+-----------------------------------------+\n| f1                   | f2                    | f1 * f2                                 |\n+----------------------+-----------------------+-----------------------------------------+\n| 12345678901234.12345 | 12345678901234.123456 | 152415787532377393748917544.09724464320 |\n+----------------------+-----------------------+-----------------------------------------+\n"})}),"\n",(0,s.jsx)(l.h6,{id:"enable-decimal256-when-multiplication-overflow",children:"Enable decimal256 when multiplication overflow"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"create table test_decimal_mul_overflow_dec256(f1 decimal(38, 19), f2 decimal(38, 19)) properties('replication_num'='1');\ninsert into test_decimal_mul_overflow_dec256 values('9999999999999999999.9999999999999999999', '9999999999999999999.9999999999999999999');\n"})}),"\n",(0,s.jsxs)(l.p,{children:["By default (",(0,s.jsx)(l.code,{children:"enable_decimal256"}),"=false), the actual result of the multiplication will overflow. In this case, you can enable decimal256: ",(0,s.jsx)(l.code,{children:"set enable_decimal256=true"})," to calculate the exact result, and the result type is decimal(76, 38):"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"set enable_decimal256=true;\n\nelect f1, f2, f1 * f2 from test_decimal_mul_overflow_dec256;\n+-----------------------------------------+-----------------------------------------+-------------------------------------------------------------------------------+\n| f1                                      | f2                                      | f1 * f2                                                                       |\n+-----------------------------------------+-----------------------------------------+-------------------------------------------------------------------------------+\n| 9999999999999999999.9999999999999999999 | 9999999999999999999.9999999999999999999 | 99999999999999999999999999999999999998.00000000000000000000000000000000000001 |\n+-----------------------------------------+-----------------------------------------+-------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(l.h6,{id:"division-no-overflow",children:"Division No Overflow"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"create table test_decimal_div_no_overflow(f1 decimal(19, 9), f2 decimal(19, 9)) properties('replication_num'='1');\n\ninsert into test_decimal_div_no_overflow values('1234567890.123456789', '234567890.123456789');\n"})}),"\n",(0,s.jsxs)(l.p,{children:["According to the calculation rules of the division result precision, under the default configuration (",(0,s.jsx)(l.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(l.code,{children:"div_precision_increment"}),"=4), the normal calculated result type is ",(0,s.jsx)(l.code,{children:"decimal(19 + 9 + 4, 9 + 4)"}),", that is, ",(0,s.jsx)(l.code,{children:"decimal(32, 13)"}),", and the precision does not overflow. The final type of the result is ",(0,s.jsx)(l.code,{children:"decimal(32, 13)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:" explain verbose select f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal_div_no_overflow(test_decimal_div_no_overflow), PREAGGREGATION: ON                                  |\n|      partitions=1/1 (test_decimal_div_no_overflow)                                                                                   |\n|      tablets=10/10, tabletList=1750210335692,1750210335694,1750210335696 ...                                                     |\n|      cardinality=1, avgRowSize=0.0, numNodes=1                                                                                   |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(32,22)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(32,13), nullable=true, isAutoIncrement=false, subColPath=null} |\n\nselect f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------+---------------------+-----------------+\n| f1                   | f2                  | f1 / f2         |\n+----------------------+---------------------+-----------------+\n| 1234567890.123456789 | 234567890.123456789 | 5.2631580966759 |\n+----------------------+---------------------+-----------------+\n"})}),"\n",(0,s.jsxs)(l.p,{children:["If you want the result to retain more decimal places, you can increase ",(0,s.jsx)(l.code,{children:"div_precision_increment"}),", for example, ",(0,s.jsx)(l.code,{children:"admin set frontend config('div_precision_increment'='8');"}),". Then according to the above calculation rules, the calculated result type is ",(0,s.jsx)(l.code,{children:"decimal(36, 17)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"admin set frontend config('div_precision_increment'='8');\nexplain verbose select f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_div_no_overflow(test_decimal_div_no_overflow), PREAGGREGATION: ON                                          |\n|      partitions=1/1 (test_decimal_div_no_overflow)                                                                                   |\n|      tablets=10/10, tabletList=1750210354910,1750210354912,1750210354914 ...                                                     |\n|      cardinality=1, avgRowSize=3120.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(36,26)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_no_overflow}                                                                              |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(19,9), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(36,17), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Result:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_no_overflow;\n+----------------------+---------------------+---------------------+\n| f1                   | f2                  | f1 / f2             |\n+----------------------+---------------------+---------------------+\n| 1234567890.123456789 | 234567890.123456789 | 5.26315809667590986 |\n+----------------------+---------------------+---------------------+\n"})}),"\n",(0,s.jsx)(l.h6,{id:"division-overflow-rule-1",children:"Division Overflow Rule 1"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"create table test_decimal_div_overflow1(f1 decimal(27, 8), f2 decimal(27, 8)) properties('replication_num'='1');\n\ninsert into test_decimal_div_overflow1 values('123456789012345678.12345678', '23456789012345678.12345678');\n"})}),"\n",(0,s.jsxs)(l.p,{children:["According to the calculation rules of the division result precision, under the default configuration (",(0,s.jsx)(l.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(l.code,{children:"div_precision_increment"}),"=4), the normal calculated result type is ",(0,s.jsx)(l.code,{children:"decimal(27 + 8 + 4, 8 + 4)"}),", that is, ",(0,s.jsx)(l.code,{children:"decimal(39, 12)"}),". The precision overflowed and needs to be recalculated according to the overflow rules: ",(0,s.jsx)(l.code,{children:"MAX_P"})," - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32, ",(0,s.jsx)(l.code,{children:"precision"})," - s1 = 39 - 8 = 31 < 32, so the ",(0,s.jsx)(l.code,{children:"Result scale if overflow"})," rule 1 applies, and the result scale is (",(0,s.jsx)(l.code,{children:"MAX_P"})," - (",(0,s.jsx)(l.code,{children:"precision"})," - ",(0,s.jsx)(l.code,{children:"s1"}),")) + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})," = (38 - (39 - 8)) + 4 = 11, and the result type is ",(0,s.jsx)(l.code,{children:"decimal(38, 11)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 / f2 from test_decimal_div_overflow1;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal_div_overflow1(test_decimal_div_overflow1), PREAGGREGATION: ON                                      |\n|      partitions=1/1 (test_decimal_div_overflow1)                                                                                     |\n|      tablets=10/10, tabletList=1750210336251,1750210336253,1750210336255 ...                                                     |\n|      cardinality=1, avgRowSize=3455.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,19)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,11), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Result:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_overflow1; \n+-----------------------------+----------------------------+---------------+\n| f1                          | f2                         | f1 / f2       |\n+-----------------------------+----------------------------+---------------+\n| 123456789012345678.12345678 | 23456789012345678.12345678 | 5.26315809667 |\n+-----------------------------+----------------------------+---------------+\n"})}),"\n",(0,s.jsxs)(l.p,{children:["If the value of ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," is increased, for example, ",(0,s.jsx)(l.code,{children:"set decimal_overflow_scale=8;"}),", the calculation is performed according to the overflow rules: ",(0,s.jsx)(l.code,{children:"MAX_P"})," - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," = 38 - 8 = 30, ",(0,s.jsx)(l.code,{children:"precision"})," - s1 = 39 - 8 = 31 > 30, and s1 == ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", overflow rule 3 applies, and the final calculated result type is: ",(0,s.jsx)(l.code,{children:"decimalv3(38,12)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"set decimal_overflow_scale=8;\nexplain verbose select f1, f2, f1 / f2 from test_decimal_div_overflow1;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test.test_decimal_div_overflow1(test_decimal_div_overflow1), PREAGGREGATION: ON                                              |\n|      partitions=1/1 (test_decimal_div_overflow1)                                                                                     |\n|      tablets=10/10, tabletList=1750210355035,1750210355037,1750210355039 ...                                                     |\n|      cardinality=1, avgRowSize=3355.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,20)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_overflow1}                                                                                |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(27,8), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,12), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Result:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_overflow1;\n+-----------------------------+----------------------------+----------------+\n| f1                          | f2                         | f1 / f2        |\n+-----------------------------+----------------------------+----------------+\n| 123456789012345678.12345678 | 23456789012345678.12345678 | 5.263158096675 |\n+-----------------------------+----------------------------+----------------+\n"})}),"\n",(0,s.jsx)(l.h6,{id:"division-overflow-rule-2",children:"Division Overflow Rule 2"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"create table test_decimal(f1 decimal(38, 4), f2 decimal(38, 4)) properties('replication_num'='1');\n\ninsert into test_decimal values('123456789012345678.1234', '23456789012345678.1234');\n"})}),"\n",(0,s.jsxs)(l.p,{children:["According to the calculation rules of the division result precision, under the default configuration (",(0,s.jsx)(l.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(l.code,{children:"div_precision_increment"}),"=4), the normal calculated result type is ",(0,s.jsx)(l.code,{children:"decimal(38 + 4 + 4, 4 + 4)"}),", that is, ",(0,s.jsx)(l.code,{children:"decimal(46, 8)"}),". The precision overflowed and needs to be recalculated according to the overflow rules: ",(0,s.jsx)(l.code,{children:"MAX_P"})," - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32, ",(0,s.jsx)(l.code,{children:"precision"})," - s1 = 46 - 4 = 42 > 32, s1 = 4 < ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", so the ",(0,s.jsx)(l.code,{children:"Result scale if overflow"})," rule 2 is applied, and the result scale is ",(0,s.jsx)(l.code,{children:"s1"})," + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})," = 4 + 4 = 8, and the result type is ",(0,s.jsx)(l.code,{children:"decimal(38, 8)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 / f2 from test_decimal;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 / f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test_decimal.test_decimal(test_decimal), PREAGGREGATION: ON                                                         |\n|      partitions=1/1 (test_decimal)                                                                                              |\n|      tablets=10/10, tabletList=1750210334096,1750210334098,1750210334100 ...                                                    |\n|      cardinality=1, avgRowSize=3250.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,12)) / f2[#1])                                             |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,8), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation Result:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal;\n+-------------------------+------------------------+-------------+\n| f1                      | f2                     | f1 / f2     |\n+-------------------------+------------------------+-------------+\n| 123456789012345678.1234 | 23456789012345678.1234 |  5.26315809 |\n+-------------------------+------------------------+-------------+\n"})}),"\n",(0,s.jsxs)(l.p,{children:["If you want the result to retain more decimal places, you can increase ",(0,s.jsx)(l.code,{children:"div_precision_increment"}),", for example, ",(0,s.jsx)(l.code,{children:"admin set frontend config('div_precision_increment'='8');"}),". Then according to the above calculation rules, the calculated result type is ",(0,s.jsx)(l.code,{children:"decimal(38, 12)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"admin set frontend config('div_precision_increment'='8');\n\nexplain verbose select f1, f2, f1 / f2 from test_decimal;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal(test_decimal), PREAGGREGATION: ON                                                          |\n|      partitions=1/1 (test_decimal)                                                                                               |\n|      tablets=10/10, tabletList=1750210334096,1750210334098,1750210334100 ...                                                     |\n|      cardinality=2, avgRowSize=3240.0, numNodes=1                                                                                |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,16)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal}                                                                                          |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal}                                                                                          |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,12), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculation result:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal;\n+-------------------------+------------------------+-----------------+\n| f1                      | f2                     | f1 / f2         |\n+-------------------------+------------------------+-----------------+\n| 123456789012345678.1234 | 23456789012345678.1234 |  5.263158096675 |\n+-------------------------+------------------------+-----------------+\n"})}),"\n",(0,s.jsxs)(l.p,{children:["If decimal256 is enabled (",(0,s.jsx)(l.code,{children:"set enable_decimal256 = true;"}),"), the result precision is calculated normally without overflow, and the result type is ",(0,s.jsx)(l.code,{children:"decimal(46, 8)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"set enable_decimal256=true;\n\nadmin set frontend config('div_precision_increment'='4');\n\nexplain verbose select f1, f2, f1 / f2 from test_decimal;\n+---------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                 |\n|   OUTPUT EXPRS:                                                                                                                 |\n|     f1[#2]                                                                                                                      |\n|     f2[#3]                                                                                                                      |\n|     f1 / f2[#4]                                                                                                                 |\n|   PARTITION: UNPARTITIONED                                                                                                      |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   VRESULT SINK                                                                                                                  |\n|      MYSQL_PROTOCAL                                                                                                             |\n|                                                                                                                                 |\n|   1:VEXCHANGE                                                                                                                   |\n|      offset: 0                                                                                                                  |\n|      distribute expr lists:                                                                                                     |\n|      tuple ids: 1N                                                                                                              |\n|                                                                                                                                 |\n| PLAN FRAGMENT 1                                                                                                                 |\n|                                                                                                                                 |\n|   PARTITION: RANDOM                                                                                                             |\n|                                                                                                                                 |\n|   HAS_COLO_PLAN_NODE: false                                                                                                     |\n|                                                                                                                                 |\n|   STREAM DATA SINK                                                                                                              |\n|     EXCHANGE ID: 01                                                                                                             |\n|     UNPARTITIONED                                                                                                               |\n|                                                                                                                                 |\n|   0:VOlapScanNode(59)                                                                                                           |\n|      TABLE: test_decimal.test_decimal(test_decimal), PREAGGREGATION: ON                                                         |\n|      partitions=1/1 (test_decimal)                                                                                              |\n|      tablets=10/10, tabletList=1750210334096,1750210334098,1750210334100 ...                                                    |\n|      cardinality=2, avgRowSize=3240.0, numNodes=1                                                                               |\n|      pushAggOp=NONE                                                                                                             |\n|      desc: 0                                                                                                                    |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(46,12)) / f2[#1])                                             |\n|      final project output tuple id: 1                                                                                           |\n|      tuple ids: 0                                                                                                               |\n|                                                                                                                                 |\n| Tuples:                                                                                                                         |\n| TupleDescriptor{id=0, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|                                                                                                                                 |\n| TupleDescriptor{id=1, tbl=test_decimal}                                                                                         |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,4), nullable=true, isAutoIncrement=false, subColPath=null}      |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(46,8), nullable=true, isAutoIncrement=false, subColPath=null} |\n\nselect f1, f2, f1 / f2 from test_decimal;\n+-------------------------+------------------------+-------------+\n| f1                      | f2                     | f1 / f2     |\n+-------------------------+------------------------+-------------+\n| 123456789012345678.1234 | 23456789012345678.1234 |  5.26315809 |\n+-------------------------+------------------------+-------------+\n"})}),"\n",(0,s.jsx)(l.h6,{id:"division-overflow-rule-3",children:"Division Overflow Rule 3"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"create table test_decimal_div_overflow3(f1 decimal(38, 7), f2 decimal(38, 7)) properties('replication_num'='1');\n\ninsert into test_decimal_div_overflow3 values('123456789012345678.1234567', '23456789012345678.1234567');\n"})}),"\n",(0,s.jsxs)(l.p,{children:["According to the calculation rules of the division result precision, under the default configuration (",(0,s.jsx)(l.code,{children:"enable_decimal256"}),"=false, ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),"=6, ",(0,s.jsx)(l.code,{children:"div_precision_increment"}),"=4), the normal calculated result type is ",(0,s.jsx)(l.code,{children:"decimal(38 + 7 + 4, 7 + 4)"}),", that is, ",(0,s.jsx)(l.code,{children:"decimal(49, 11)"}),". The precision overflows and needs to be recalculated according to the overflow rules: ",(0,s.jsx)(l.code,{children:"MAX_P"})," - ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," = 38 - 6 = 32, ",(0,s.jsx)(l.code,{children:"precision"})," - s1 = 49 - 7 = 42 > 32, s1 = 7 > ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"}),", so the ",(0,s.jsx)(l.code,{children:"Result scale if overflow"})," rule 3 is applied, and the result scale is ",(0,s.jsx)(l.code,{children:"decimal_overflow_scale"})," + ",(0,s.jsx)(l.code,{children:"div_precision_increment"})," = 6 + 4 = 10, and the result type is ",(0,s.jsx)(l.code,{children:"decimal(38, 10)"}),":"]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"explain verbose select f1, f2, f1 / f2 from test_decimal_div_overflow3;\n+----------------------------------------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| PLAN FRAGMENT 0                                                                                                                  |\n|   OUTPUT EXPRS:                                                                                                                  |\n|     f1[#2]                                                                                                                       |\n|     f2[#3]                                                                                                                       |\n|     f1 / f2[#4]                                                                                                                  |\n|   PARTITION: UNPARTITIONED                                                                                                       |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   VRESULT SINK                                                                                                                   |\n|      MYSQL_PROTOCAL                                                                                                              |\n|                                                                                                                                  |\n|   1:VEXCHANGE                                                                                                                    |\n|      offset: 0                                                                                                                   |\n|      distribute expr lists:                                                                                                      |\n|      tuple ids: 1N                                                                                                               |\n|                                                                                                                                  |\n| PLAN FRAGMENT 1                                                                                                                  |\n|                                                                                                                                  |\n|   PARTITION: RANDOM                                                                                                              |\n|                                                                                                                                  |\n|   HAS_COLO_PLAN_NODE: false                                                                                                      |\n|                                                                                                                                  |\n|   STREAM DATA SINK                                                                                                               |\n|     EXCHANGE ID: 01                                                                                                              |\n|     UNPARTITIONED                                                                                                                |\n|                                                                                                                                  |\n|   0:VOlapScanNode(59)                                                                                                            |\n|      TABLE: test_decimal.test_decimal_div_overflow3(test_decimal_div_overflow3), PREAGGREGATION: ON                                      |\n|      partitions=1/1 (test_decimal_div_overflow3)                                                                                     |\n|      tablets=10/10, tabletList=1750210336825,1750210336827,1750210336829 ...                                                     |\n|      cardinality=1, avgRowSize=0.0, numNodes=1                                                                                   |\n|      pushAggOp=NONE                                                                                                              |\n|      desc: 0                                                                                                                     |\n|      final projections: f1[#0], f2[#1], (CAST(f1[#0] AS decimalv3(38,17)) / f2[#1])                                              |\n|      final project output tuple id: 1                                                                                            |\n|      tuple ids: 0                                                                                                                |\n|                                                                                                                                  |\n| Tuples:                                                                                                                          |\n| TupleDescriptor{id=0, tbl=test_decimal_div_overflow3}                                                                                |\n|   SlotDescriptor{id=0, col=f1, colUniqueId=0, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=1, col=f2, colUniqueId=1, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|                                                                                                                                  |\n| TupleDescriptor{id=1, tbl=test_decimal_div_overflow3}                                                                                |\n|   SlotDescriptor{id=2, col=f1, colUniqueId=0, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=3, col=f2, colUniqueId=1, type=decimalv3(38,7), nullable=true, isAutoIncrement=false, subColPath=null}       |\n|   SlotDescriptor{id=4, col=null, colUniqueId=null, type=decimalv3(38,10), nullable=true, isAutoIncrement=false, subColPath=null} |\n"})}),"\n",(0,s.jsx)(l.p,{children:"Caculation result:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-sql",children:"select f1, f2, f1 / f2 from test_decimal_div_overflow3; \n+----------------------------+---------------------------+--------------+\n| f1                         | f2                        | f1 / f2      |\n+----------------------------+---------------------------+--------------+\n| 123456789012345678.1234567 | 23456789012345678.1234567 | 5.2631580966 |\n+----------------------------+---------------------------+--------------+\n"})}),"\n",(0,s.jsx)(l.h4,{id:"aggregation-operations",children:"Aggregation Operations"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsx)(l.li,{children:"SUM / MULTI_DISTINCT_SUM: SUM(DECIMAL(a, b)) -> DECIMAL(MAX_P, b)."}),"\n",(0,s.jsx)(l.li,{children:"AVG: AVG(DECIMAL(a, b)) -> DECIMAL(MAX_P, max(b, 4))."}),"\n"]}),"\n",(0,s.jsx)(l.h4,{id:"default-rules",children:"Default Rules"}),"\n",(0,s.jsxs)(l.p,{children:["Except for the expressions mentioned above, other expressions use default rules for precision deduction. That is, for the expression ",(0,s.jsx)(l.code,{children:"expr(DECIMAL(a, b))"}),", the result type is also DECIMAL(a, b)."]}),"\n",(0,s.jsx)(l.h4,{id:"adjusting-result-precision",children:"Adjusting Result Precision"}),"\n",(0,s.jsxs)(l.p,{children:["Different users have different precision requirements for DECIMAL. The above rules are the default behavior of Doris. If users ",(0,s.jsx)(l.strong,{children:"have different precision requirements, they can adjust the precision in the following ways"}),":"]}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:["If the expected result precision is greater than the default precision, you can adjust the result precision by adjusting the parameter's precision. For example, if the user expects to calculate ",(0,s.jsx)(l.code,{children:"AVG(col)"})," and get DECIMAL(x, y) as the result, where the type of ",(0,s.jsx)(l.code,{children:"col"})," is DECIMAL (a, b), the expression can be rewritten to ",(0,s.jsx)(l.code,{children:"AVG(CAST(col as DECIMAL (x, y))"}),"."]}),"\n",(0,s.jsxs)(l.li,{children:["If the expected result precision is less than the default precision, the desired precision can be obtained by approximating the output result. For example, if the user expects to calculate ",(0,s.jsx)(l.code,{children:"AVG(col)"})," and get DECIMAL(x, y) as the result, where the type of ",(0,s.jsx)(l.code,{children:"col"})," is DECIMAL(a, b), the expression can be rewritten as ",(0,s.jsx)(l.code,{children:"ROUND(AVG(col), y)"}),"."]}),"\n"]}),"\n",(0,s.jsx)(l.h3,{id:"why-decimal-is-required",children:"Why DECIMAL is Required"}),"\n",(0,s.jsx)(l.p,{children:"DECIMAL in Doris is a real high-precision fixed-point number. Decimal has the following core advantages:"}),"\n",(0,s.jsxs)(l.ol,{children:["\n",(0,s.jsx)(l.li,{children:"It can represent a wider range. The value ranges of both precision and scale in DECIMAL have been significantly expanded."}),"\n",(0,s.jsx)(l.li,{children:"Higher performance. The old version of DECIMAL requires 16 bytes in memory and 12 bytes in storage, while DECIMAL has made adaptive adjustments as shown below."}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{children:"precision"}),(0,s.jsx)(l.th,{children:"Space occupied (memory/disk)"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"0 < precision <= 9"}),(0,s.jsx)(l.td,{children:"4 bytes"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"9 < precision <= 18"}),(0,s.jsx)(l.td,{children:"8 bytes"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"18 < precision <= 38"}),(0,s.jsx)(l.td,{children:"16 bytes"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{children:"38 < precision <= 76"}),(0,s.jsx)(l.td,{children:"32 bytes"})]})]})]}),"\n",(0,s.jsxs)(l.ol,{start:"3",children:["\n",(0,s.jsx)(l.li,{children:"More complete precision deduction. For different expressions, different precision inference rules are applied to deduce the precision of the results."}),"\n"]}),"\n",(0,s.jsx)(l.h3,{id:"keywords",children:"keywords"}),"\n",(0,s.jsx)(l.p,{children:"DECIMAL"})]})}function u(e={}){let{wrapper:l}={...(0,t.a)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},250065:function(e,l,n){n.d(l,{Z:function(){return o},a:function(){return c}});var i=n(667294);let s={},t=i.createContext(s);function c(e){let l=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function o(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:l},e.children)}}}]);