"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["706108"],{946374:function(n,e,t){t.r(e),t.d(e,{default:()=>u,frontMatter:()=>l,metadata:()=>i,assets:()=>a,toc:()=>c,contentTitle:()=>o});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-string-to-num","title":"IPV4_STRING_TO_NUM","description":"ipv4stringto_num","source":"@site/docs/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-string-to-num.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/ip-functions","slug":"/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-string-to-num","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-string-to-num","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"IPV4_STRING_TO_NUM","language":"en"},"sidebar":"docs","previous":{"title":"IPV4_NUM_TO_STRING","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-num-to-string"},"next":{"title":"IPV4_STRING_TO_NUM_OR_DEFAULT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-string-to-num-or-default"}}'),s=t("785893"),r=t("250065");let l={title:"IPV4_STRING_TO_NUM",language:"en"},o=void 0,a={},c=[{value:"ipv4_string_to_num",id:"ipv4_string_to_num",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Usage Notes",id:"usage-notes",level:3},{value:"Examples",id:"examples",level:2},{value:"Keywords",id:"keywords",level:3}];function d(n){let e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"ipv4_string_to_num",children:"ipv4_string_to_num"}),"\n",(0,s.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(e.p,{children:"Takes a string containing an IPv4 address in A.B.C.D format (dot-separated decimal numbers). Returns the the numeric value of the address in network byte order (big endian) integer corresponding IPv4 address."}),"\n",(0,s.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"IPV4_STRING_TO_NUM(<ipv4_string>)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"<ipv4_string>"}),": IPv4 string address (format A.B.C.D)"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(e.p,{children:"Return Type: BIGINT"}),"\n",(0,s.jsx)(e.p,{children:"Return Value Meaning:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Returns the the numeric value of the address in network byte order (big endian) integer representation of the corresponding IPv4 address"}),"\n",(0,s.jsxs)(e.li,{children:["Throws an exception for invalid IPv4 strings or ",(0,s.jsx)(e.code,{children:"NULL"})," input"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Only supports standard IPv4 text, does not support CIDR (like ",(0,s.jsx)(e.code,{children:"/24"}),"), ports (like ",(0,s.jsx)(e.code,{children:":80"}),"), or other extended formats"]}),"\n",(0,s.jsx)(e.li,{children:"Does not perform implicit trimming or type conversion, strings with leading/trailing whitespace are considered invalid"}),"\n",(0,s.jsxs)(e.li,{children:["Commonly used with ",(0,s.jsx)(e.code,{children:"inet_ntoa"}),", ",(0,s.jsx)(e.code,{children:"to_ipv4"})," for mutual conversion"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(e.p,{children:["Convert IPv4 text ",(0,s.jsx)(e.code,{children:"192.168.0.1"})," to the corresponding the the numeric value of the address in network byte order (big endian) integer."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"select ipv4_string_to_num('192.168.0.1');\n+-----------------------------------+\n| ipv4_string_to_num('192.168.0.1') |\n+-----------------------------------+\n| 3232235521                        |\n+-----------------------------------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"IPv4 boundary values (minimum and maximum)."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"select\n  ipv4_string_to_num('0.0.0.0')             as min_v4,\n  ipv4_string_to_num('255.255.255.255')     as max_v4;\n+--------+-----------+\n| min_v4| max_v4    |\n+--------+-----------+\n| 0      | 4294967295|\n+--------+-----------+\n"})}),"\n",(0,s.jsx)(e.p,{children:"Invalid input triggers exceptions (segment value out of range/contains whitespace/NULL)."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"select ipv4_string_to_num('256.0.0.1');\nERROR 1105 (HY000): errCode = 2, detailMessage = (...)[INVALID_ARGUMENT]Invalid IPv4 value\n\nselect ipv4_string_to_num(' 1.1.1.1 ');\nERROR 1105 (HY000): errCode = 2, detailMessage = (...)[INVALID_ARGUMENT]Invalid IPv4 value\n\nselect ipv4_string_to_num(NULL);\nERROR 1105 (HY000): errCode = 2, detailMessage = (...)[INVALID_ARGUMENT]Null Input, you may consider convert it to a valid default IPv4 value like '0.0.0.0' first\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Mutual conversion examples with ",(0,s.jsx)(e.code,{children:"inet_ntoa"}),"/",(0,s.jsx)(e.code,{children:"ipv4_num_to_string"})," and ",(0,s.jsx)(e.code,{children:"to_ipv4"}),": IPv4 text \u2192 integer \u2192 IPv4 text \u2192 IPv4 type."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"-- Step 1: IPv4 text to integer\nSELECT ipv4_string_to_num('192.168.1.1') as ipv4_int;\n+------------+\n| ipv4_int   |\n+------------+\n| 3232235777 |\n+------------+\n\n-- Step 2: Integer back to IPv4 text\nSELECT ipv4_num_to_string(ipv4_string_to_num('192.168.1.1')) as back_to_text;\n+----------------+\n| back_to_text   |\n+----------------+\n| 192.168.1.1    |\n+----------------+\n\n-- Step 3: IPv4 text to IPv4 type\nSELECT to_ipv4(ipv4_num_to_string(ipv4_string_to_num('192.168.1.1'))) as ipv4_type;\n+-------------+\n| ipv4_type   |\n+-------------+\n| 192.168.1.1 |\n+-------------+\n"})}),"\n",(0,s.jsx)(e.h3,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsx)(e.p,{children:"IPV4_STRING_TO_NUM"})]})}function u(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},250065:function(n,e,t){t.d(e,{Z:function(){return o},a:function(){return l}});var i=t(667294);let s={},r=i.createContext(s);function l(n){let e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);