"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["951880"],{42625:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>i,metadata:()=>r,assets:()=>c,toc:()=>d,contentTitle:()=>l});var r=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/string-functions/regexp","title":"REGEXP","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/string-functions/regexp.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/string-functions","slug":"/sql-manual/sql-functions/scalar-functions/string-functions/regexp","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"REGEXP","language":"en"},"sidebar":"docs","previous":{"title":"RANDOM_BYTES","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/random_bytes"},"next":{"title":"REGEXP_COUNT","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/string-functions/regexp-count"}}'),t=s("785893"),a=s("250065");let i={title:"REGEXP",language:"en"},l=void 0,c={},d=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function o(e){let n={a:"a",code:"code",h2:"h2",p:"p",pattern:"pattern",pre:"pre",str:"str",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Performs a regular expression match on the string str, returning true if the match succeeds, otherwise false. pattern is the regular expression pattern.\nIt should be noted that when handling character set matching, Utf-8 standard character classes should be used. This ensures that functions can correctly identify and process various characters from different languages."}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"pattern"})," is not allowed regexp regular,throw error;"]}),"\n",(0,t.jsxs)(n.p,{children:["Support character match classes : ",(0,t.jsx)(n.a,{href:"https://github.com/google/re2/wiki/Syntax",children:"https://github.com/google/re2/wiki/Syntax"})]}),"\n",(0,t.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"REGEXP(<str>, <pattern>)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"<str>"})}),(0,t.jsx)(n.td,{children:"String type. Represents the string to be matched against the regular expression, which can be a column in a table or a literal string."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"<pattern>"})}),(0,t.jsxs)(n.td,{children:["String type. The regular expression pattern used to match against the string ",(0,t.jsx)(n.str,{children:". Regular expressions provide a powerful way to define complex search patterns, including character classes, quantifiers, and anchors."})]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsxs)(n.p,{children:["The REGEXP function returns a BOOLEAN value. If the string ",(0,t.jsxs)(n.str,{children:[" matches the regular expression pattern ",(0,t.jsx)(n.pattern,{children:", the function returns true (represented as 1 in SQL); if not, it returns false (represented as 0 in SQL)."})]})]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE test ( k1 VARCHAR(255) ) properties(\"replication_num\"=\"1\")\n\nINSERT INTO test (k1) VALUES ('billie eillish'), ('It\\'s ok'), ('billie jean'), ('hello world');\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"--- Find all data in the k1 column starting with 'billie'\nSELECT k1 FROM test WHERE k1 REGEXP '^billie'\n--------------\n\n+----------------+\n| k1             |\n+----------------+\n| billie eillish |\n| billie jean    |\n+----------------+\n2 rows in set (0.02 sec)\n\n--- Find data in the k1 column ending with 'ok':\nSELECT k1 FROM test WHERE k1 REGEXP 'ok$'\n--------------\n\n+---------+\n| k1      |\n+---------+\n| It's ok |\n+---------+\n1 row in set (0.03 sec)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Chinese Character Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"mysql> select regexp('\u8FD9\u662F\u4E00\u6BB5\u4E2D\u6587 This is a passage in English 1234567', '\\\\p{Han}');\n+-----------------------------------------------------------------------------+\n| ('\u8FD9\u662F\u4E00\u6BB5\u4E2D\u6587 This is a passage in English 1234567' regexp '\\p{Han}')         |\n+-----------------------------------------------------------------------------+\n|                                                                           1 |\n+-----------------------------------------------------------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Insertion and Testing for Simple String Matching"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE test_regexp (\n    id INT,\n    name VARCHAR(255)\n) PROPERTIES(\"replication_num\"=\"1\");\n\nINSERT INTO test_regexp (id, name) VALUES\n    (1, 'Alice'),\n    (2, 'Bob'),\n    (3, 'Charlie'),\n    (4, 'David');\n\n-- Find all names starting with 'A'\nSELECT id, name FROM test_regexp WHERE name REGEXP '^A';\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"+------+-------+\n| id   | name  |\n+------+-------+\n|    1 | Alice |\n+------+-------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Special Character Matching Test"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Insert names with special characters\nINSERT INTO test_regexp (id, name) VALUES\n    (5, 'Anna-Maria'),\n    (6, 'John_Doe');\n\n-- Find names containing the '-' character\nSELECT id, name FROM test_regexp WHERE name REGEXP '-';\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"+------+------------+\n| id   | name       |\n+------+------------+\n|    5 | Anna-Maria |\n+------+------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Test for Ending String Matching"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Find names ending with 'e'\nSELECT id, name FROM test_regexp WHERE name REGEXP 'e$';\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"+------+---------+\n| id   | name    |\n+------+---------+\n|    1 | Alice   |\n|    3 | Charlie |\n+------+---------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"Emoji test"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT 'Hello' REGEXP '\uD83D\uDE00'; \n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"+-----------------------+\n| 'Hello' REGEXP '\uD83D\uDE00'     |\n+-----------------------+\n|                     0 |\n+-----------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"'str' is NULL,return NULL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT REGEXP(NULL, '^billie');\n+-------------------------+\n| REGEXP(NULL, '^billie') |\n+-------------------------+\n|                    NULL |\n+-------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"'pattern' is NULL, return NULL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT REGEXP('billie eillish', NULL);\n+--------------------------------+\n| REGEXP('billie eillish', NULL) |\n+--------------------------------+\n|                           NULL |\n+--------------------------------+\n"})}),"\n",(0,t.jsx)(n.p,{children:"All parameters are NULL,return NULL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT REGEXP(NULL, NULL);\n+--------------------+\n| REGEXP(NULL, NULL) |\n+--------------------+\n|               NULL |\n+--------------------+\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"pattern"})," is not allowed regexp regular,throw error;"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT REGEXP('Hello, World!', '([a-z');\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"ERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.2)[INTERNAL_ERROR]Invalid regex expression: ([a-z\n"})})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return i}});var r=s(667294);let t={},a=r.createContext(t);function i(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);