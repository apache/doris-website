"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["979534"],{162604:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>l,metadata:()=>i,assets:()=>c,toc:()=>a,contentTitle:()=>o});var i=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/date-time-functions/from-millisecond","title":"FROM_MILLISECOND","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/date-time-functions/from-millisecond.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/date-time-functions","slug":"/sql-manual/sql-functions/scalar-functions/date-time-functions/from-millisecond","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/from-millisecond","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"FROM_MILLISECOND","language":"en"},"sidebar":"docs","previous":{"title":"FROM_MICROSECOND","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/from-microsecond"},"next":{"title":"FROM_SECOND","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/from-second"}}'),s=t("785893"),r=t("250065");let l={title:"FROM_MILLISECOND",language:"en"},o=void 0,c={},a=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"The FROM_MILLISECOND function is used to convert a Unix timestamp (in milliseconds) to a DATETIME type date-time value. The reference time for Unix timestamps is 1970-01-01 00:00:00 UTC, and this function converts the input milliseconds to the corresponding specific date and time after that reference time (accurate to milliseconds)."}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"FROM_MILLISECOND(<millisecond>)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<millisecond>"})}),(0,s.jsx)(n.td,{children:"Input Unix timestamp, of integer type (BIGINT), representing the number of milliseconds from 1970-01-01 00:00:00 UTC."})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(n.p,{children:"Returns a DATETIME type value representing the result of converting the input UTC timezone unix timestamp to the current timezone time"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If millisecond is NULL, the function returns NULL."}),"\n",(0,s.jsx)(n.li,{children:"If millisecond exceeds the valid range (result datetime exceeds 9999-12-31 23:59:59), the function returns an error."}),"\n",(0,s.jsx)(n.li,{children:"If the input millisecond can be converted to integer seconds, the result returns datetime without scale; if not, the result returns datetime with scale"}),"\n",(0,s.jsx)(n.li,{children:"Input negative number, result returns error"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"\n----Since the current machine is in East 8th timezone, the returned time is 8 hours ahead of UTC\nSELECT FROM_MILLISECOND(0);\n+-------------------------+\n| FROM_MILLISECOND(0)     |\n+-------------------------+\n| 1970-01-01 08:00:00.000 |\n+-------------------------+\n\n-- Convert 1700000000000 milliseconds to datetime\nSELECT FROM_MILLISECOND(1700000000000);\n\n+---------------------------------+\n| from_millisecond(1700000000000) |\n+---------------------------------+\n| 2023-11-15 06:13:20             |\n+---------------------------------+\n\n-- Timestamp contains non-zero milliseconds (1700000000 seconds + 123 milliseconds)\nselect from_millisecond(1700000000123) as dt_with_milli;\n\n+----------------------------+\n| dt_with_milli              |\n+----------------------------+\n| 2023-11-15 06:13:20.123000 |\n+----------------------------+\n\n---Input is NULL, result returns NULL\nselect from_millisecond(NULL);\n+------------------------+\n| from_millisecond(NULL) |\n+------------------------+\n| NULL                   |\n+------------------------+\n\n---Input is negative, result returns error\n select from_millisecond(-1);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.3)[E-218]Operation from_millisecond of -1 out of range\n\n\n--Result exceeds maximum date, returns error\nselect from_millisecond(999999999999999999);\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.3)[E-218]Operation from_millisecond of 999999999999999999 out of range\n"})})]})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return l}});var i=t(667294);let s={},r=i.createContext(s);function l(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);