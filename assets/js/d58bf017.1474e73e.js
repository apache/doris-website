"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["565315"],{432448:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>s,assets:()=>c,toc:()=>o,contentTitle:()=>d});var s=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/date-time-functions/microseconds-add","title":"MICROSECONDS_ADD","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/date-time-functions/microseconds-add.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/date-time-functions","slug":"/sql-manual/sql-functions/scalar-functions/date-time-functions/microseconds-add","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/microseconds-add","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"MICROSECONDS_ADD","language":"en"},"sidebar":"docs","previous":{"title":"MICROSECOND_TIMESTAMP","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/microsecond-timestamp"},"next":{"title":"microseconds-diff","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/date-time-functions/microseconds-diff"}}'),i=t("785893"),a=t("250065");let r={title:"MICROSECONDS_ADD",language:"en"},d=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function l(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"The MICROSECONDS_ADD function adds a specified number of microseconds to the input datetime value and returns the resulting new datetime value. This function supports processing DATETIME types with microsecond precision."}),"\n",(0,i.jsxs)(n.p,{children:["This function behaves the same as MySQL\u2019s ",(0,i.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-add",children:"date_add function"})," when using MICROSECOND as the unit."]}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"MICROSECONDS_ADD(`<datetime>`, `<delta>`)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<datetime>"})}),(0,i.jsxs)(n.td,{children:["The input datetime value, of type DATETIME. For datetime formats, see ",(0,i.jsx)(n.a,{href:"../../../../../docs/sql-manual/basic-element/sql-data-types/conversion/datetime-conversion",children:"datetime conversion"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<delta>"})}),(0,i.jsx)(n.td,{children:"The number of microseconds to add, of type BIGINT. 1 second = 1,000,000 microseconds."})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)(n.p,{children:"Returns a DATETIME type value, representing the result of adding the specified microseconds to the base time (formatted as YYYY-MM-DD HH:MM:SS.ffffff, where the fractional part precision matches the datetime precision)."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"<delta>"})," is negative, the function subtracts the corresponding microseconds from the base time (i.e., MICROSECONDS_ADD(basetime, -n) is equivalent to MICROSECONDS_SUB(basetime, n))."]}),"\n",(0,i.jsx)(n.li,{children:"If the calculation result exceeds the valid range of the DATETIME type (0000-01-01 00:00:00 to 9999-12-31 23:59:59.999999), an exception is thrown."}),"\n",(0,i.jsx)(n.li,{children:"If any parameter is NULL, returns NULL."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Add microseconds\nSELECT NOW(3) AS current_time, MICROSECONDS_ADD(NOW(3), 100000000) AS after_add;\n\n+-------------------------+----------------------------+\n| current_time            | after_add                  |\n+-------------------------+----------------------------+\n| 2025-08-11 14:49:16.368 | 2025-08-11 14:50:56.368000 |\n+-------------------------+----------------------------+\n\n-- Add negative microseconds, equivalent to subtracting\nSELECT MICROSECONDS_ADD('2023-10-01 12:00:00.500000', -300000) AS after_add;\n+----------------------------+\n| after_add                  |\n+----------------------------+\n| 2023-10-01 12:00:00.200000 |\n+----------------------------+\n\n-- Input type is date, time part defaults to 00:00:00.000000\nSELECT MICROSECONDS_ADD('2023-10-01', -300000);\n+-----------------------------------------+\n| MICROSECONDS_ADD('2023-10-01', -300000) |\n+-----------------------------------------+\n| 2023-09-30 23:59:59.700000              |\n+-----------------------------------------+\n\n-- Calculation result exceeds datetime range, throws error\nSELECT MICROSECONDS_ADD('9999-12-31 23:59:59.999999', 2000000) AS after_add;\nERROR 1105 (HY000): errCode = 2, detailMessage = (10.16.10.3)[E-218]Operation microseconds_add of 9999-12-31 23:59:59.999999, 2000000 out of range\n\n-- Any input parameter is NULL, returns NULL\nSELECT MICROSECONDS_ADD('2023-10-01 12:00:00.500000', NULL);\n+-----------------------------------------------------+\n| MICROSECONDS_ADD('2023-10-01 12:00:00.500000',NULL) |\n+-----------------------------------------------------+\n| NULL                                                |\n+-----------------------------------------------------+\n\n"})})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return d},a:function(){return r}});var s=t(667294);let i={},a=s.createContext(i);function r(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);