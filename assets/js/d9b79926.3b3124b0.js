"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["432694"],{645102:function(e,n,s){s.r(n),s.d(n,{default:()=>o,frontMatter:()=>a,metadata:()=>t,assets:()=>c,toc:()=>d,contentTitle:()=>l});var t=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/ip-functions/cut-ipv6","title":"CUT_IPV6","description":"cut_ipv6","source":"@site/docs/sql-manual/sql-functions/scalar-functions/ip-functions/cut-ipv6.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/ip-functions","slug":"/sql-manual/sql-functions/scalar-functions/ip-functions/cut-ipv6","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/cut-ipv6","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"CUT_IPV6","language":"en"},"sidebar":"docs","previous":{"title":"VARIANT_TYPE","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/variant-functions/variant-type"},"next":{"title":"IPV4_CIDR_TO_RANGE","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/ip-functions/ipv4-cidr-to-range"}}'),i=s("785893"),r=s("250065");let a={title:"CUT_IPV6",language:"en"},l=void 0,c={},d=[{value:"cut_ipv6",id:"cut_ipv6",level:2},{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Usage Notes",id:"usage-notes",level:3},{value:"Examples",id:"examples",level:2},{value:"Keywords",id:"keywords",level:3}];function u(e){let n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"cut_ipv6",children:"cut_ipv6"}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Cuts a specified number of bytes from the end of an IPv6 address based on its type (IPv4-mapped or pure IPv6), and returns the truncated IPv6 address string."}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CUT_IPV6(<ipv6_address>, <bytes_to_cut_for_ipv6>, <bytes_to_cut_for_ipv4>)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<ipv6_address>"}),": IPv6 type address"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<bytes_to_cut_for_ipv6>"}),": Number of bytes to cut for pure IPv6 addresses (TINYINT type)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<bytes_to_cut_for_ipv4>"}),": Number of bytes to cut for IPv4-mapped addresses (TINYINT type)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)(n.p,{children:"Return Type: VARCHAR"}),"\n",(0,i.jsx)(n.p,{children:"Return Value Meaning:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Returns the truncated IPv6 address string"}),"\n",(0,i.jsxs)(n.li,{children:["If input is an IPv4-mapped address, uses the ",(0,i.jsx)(n.code,{children:"bytes_to_cut_for_ipv4"})," parameter"]}),"\n",(0,i.jsxs)(n.li,{children:["If input is a pure IPv6 address, uses the ",(0,i.jsx)(n.code,{children:"bytes_to_cut_for_ipv6"})," parameter"]}),"\n",(0,i.jsxs)(n.li,{children:["Returns NULL if any of the three parameters ",(0,i.jsx)(n.code,{children:"<ipv6_address>"}),", ",(0,i.jsx)(n.code,{children:"<bytes_to_cut_for_ipv6>"}),", ",(0,i.jsx)(n.code,{children:"<bytes_to_cut_for_ipv4>"})," is NULL"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Automatically detects whether the IPv6 address is an IPv4-mapped address (format ",(0,i.jsx)(n.code,{children:"::ffff:IPv4"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Selects the appropriate number of bytes to cut based on the address type"}),"\n",(0,i.jsx)(n.li,{children:"Cutting operation starts from the end of the address, setting the specified number of bytes to zero"}),"\n",(0,i.jsx)(n.li,{children:"Parameter values cannot exceed 16 (total bytes in an IPv6 address)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.p,{children:"Cut trailing bytes from a pure IPv6 address."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT cut_ipv6(to_ipv6('2001:db8::1'), 4, 4) as cut_result;\n+------------------+\n| cut_result       |\n+------------------+\n| 2001:db8::       |\n+------------------+\n"})}),"\n",(0,i.jsx)(n.p,{children:"Cut trailing bytes from an IPv4-mapped address."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT cut_ipv6(to_ipv6('::ffff:192.168.1.1'), 4, 4) as cut_result;\n+----------------+\n| cut_result     |\n+----------------+\n| ::ffff:0.0.0.0 |\n+----------------+\n"})}),"\n",(0,i.jsx)(n.p,{children:"Use different cutting parameters."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT \n  cut_ipv6(to_ipv6('2001:db8::1'), 8, 4) as ipv6_cut_8,\n  cut_ipv6(to_ipv6('::ffff:192.168.1.1'), 4, 8) as ipv4_cut_8;\n+------------+------------+\n| ipv6_cut_8 | ipv4_cut_8 |\n+------------+------------+\n| 2001:db8:: | ::         |\n+------------+------------+\n"})}),"\n",(0,i.jsx)(n.p,{children:"Parameters as NULL return NULL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'select cut_ipv6(NULL, NULL, NULL);\n+----------------------------+\n| cut_ipv6(NULL, NULL, NULL) |\n+----------------------------+\n| NULL                       |\n+----------------------------+\n\nselect cut_ipv6(to_ipv6("::"), NULL, 0);\n+----------------------------------+\n| cut_ipv6(to_ipv6("::"), NULL, 0) |\n+----------------------------------+\n| NULL                             |\n+----------------------------------+\n\nselect cut_ipv6(to_ipv6("::"), 4, NULL);\n+----------------------------------+\n| cut_ipv6(to_ipv6("::"), 4, NULL) |\n+----------------------------------+\n| NULL                             |\n+----------------------------------+\n'})}),"\n",(0,i.jsx)(n.p,{children:"Parameter values out of range will throw an exception."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT cut_ipv6(to_ipv6('2001:db8::1'), 17, 4);\nERROR 1105 (HY000): errCode = 2, detailMessage = (...)[INVALID_ARGUMENT]Illegal value for argument 2 TINYINT of function cut_ipv6\n\nSELECT cut_ipv6(to_ipv6('2001:db8::1'), 4, 122);\nERROR 1105 (HY000): errCode = 2, detailMessage = (...)[INVALID_ARGUMENT]Illegal value for argument 3 TINYINT of function cut_ipv6\n"})}),"\n",(0,i.jsx)(n.h3,{id:"keywords",children:"Keywords"}),"\n",(0,i.jsx)(n.p,{children:"CUT_IPV6"})]})}function o(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return a}});var t=s(667294);let i={},r=t.createContext(i);function a(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);