"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["95999"],{87572:function(e,n,r){r.r(n),r.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>i,assets:()=>l,toc:()=>d,contentTitle:()=>c});var i=JSON.parse('{"id":"ai/text-search/overview","title":"Text Search","description":"Overview","source":"@site/docs/ai/text-search/overview.md","sourceDirName":"ai/text-search","slug":"/ai/text-search/overview","permalink":"/docs/dev/ai/text-search/overview","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Text Search","sidebar_label":"Overview","language":"en"},"sidebar":"docs","previous":{"title":"AI Function","permalink":"/docs/dev/ai/ai-function-overview"},"next":{"title":"Full-Text Search and Query Acceleration Support","permalink":"/docs/dev/ai/text-search/search-operators"}}'),s=r("785893"),t=r("250065");let a={title:"Text Search",sidebar_label:"Overview",language:"en"},c=void 0,l={},d=[{value:"Overview",id:"overview",level:2},{value:"Evolution of Doris Text Search",id:"evolution-of-doris-text-search",level:2},{value:"Foundation (2.0+)",id:"foundation-20",level:3},{value:"Feature Expansion (2.x \u2192 3.x)",id:"feature-expansion-2x--3x",level:3},{value:"Capability Enhancements (4.0+)",id:"capability-enhancements-40",level:3},{value:"Core Text Search Features",id:"core-text-search-features",level:2},{value:"Rich Text Operators",id:"rich-text-operators",level:3},{value:"Custom Analyzers (3.1+)",id:"custom-analyzers-31",level:3},{value:"BM25 Relevance Scoring (4.0+)",id:"bm25-relevance-scoring-40",level:3},{value:"SEARCH Function: Unified Query DSL (4.0+)",id:"search-function-unified-query-dsl-40",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Step 1: Create Table with Inverted Index",id:"step-1-create-table-with-inverted-index",level:3},{value:"Step 2: Run Text Queries",id:"step-2-run-text-queries",level:3},{value:"Hybrid Search: Text + Vector",id:"hybrid-search-text--vector",level:2},{value:"Managing Inverted Indexes",id:"managing-inverted-indexes",level:2},{value:"Creating Indexes",id:"creating-indexes",level:3},{value:"Deleting Indexes",id:"deleting-indexes",level:3},{value:"Viewing Indexes",id:"viewing-indexes",level:3},{value:"Learn More",id:"learn-more",level:2},{value:"Core Documentation",id:"core-documentation",level:3},{value:"Advanced Topics",id:"advanced-topics",level:3}];function o(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Text search retrieves documents that contain specific terms or phrases and ranks results by relevance."}),"\n",(0,s.jsx)(n.p,{children:"Compared with vector search, which excels at \u201Cfinding broadly\u201D by expanding recall through semantic similarity, text search excels at \u201Cfinding precisely\u201D by providing controllable, explainable exact matches that ensure keyword hits and deterministic filters."}),"\n",(0,s.jsx)(n.p,{children:"In generative AI applications\u2014especially Retrieval\u2011Augmented Generation (RAG)\u2014text and vector search complement each other. Working together, they balance semantic breadth and lexical precision, improve recall while ensuring accuracy and interpretability, and build a reliable retrieval foundation that provides models with more accurate, relevant context."}),"\n",(0,s.jsx)(n.h2,{id:"evolution-of-doris-text-search",children:"Evolution of Doris Text Search"}),"\n",(0,s.jsx)(n.p,{children:"Since version 2.0.0, Doris has introduced and continuously expanded text search to meet diverse retrieval scenarios and growing query complexity."}),"\n",(0,s.jsx)(n.h3,{id:"foundation-20",children:"Foundation (2.0+)"}),"\n",(0,s.jsx)(n.p,{children:"Column\u2011level inverted indexes with basic full\u2011text operators (MATCH_ANY, MATCH_ALL) and multi\u2011language tokenizers enable efficient keyword search on large datasets."}),"\n",(0,s.jsx)(n.h3,{id:"feature-expansion-2x--3x",children:"Feature Expansion (2.x \u2192 3.x)"}),"\n",(0,s.jsx)(n.p,{children:"An enriched operator set adds phrase matching (MATCH_PHRASE), prefix search (MATCH_PHRASE_PREFIX), and regex matching (MATCH_REGEXP). Version 3.1 introduces custom analyzers to address varied text analysis needs."}),"\n",(0,s.jsx)(n.h3,{id:"capability-enhancements-40",children:"Capability Enhancements (4.0+)"}),"\n",(0,s.jsx)(n.p,{children:"Text search gains relevance scoring and a unified search entry, formally introducing BM25 scoring and the SEARCH function."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["BM25 relevance scoring: rank results by text relevance with ",(0,s.jsx)(n.code,{children:"score()"}),", and blend with vector similarity for hybrid ranking."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"SEARCH function: unified query DSL supporting cross\u2011column search and boolean logic, simplifying complex query construction while improving performance."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"core-text-search-features",children:"Core Text Search Features"}),"\n",(0,s.jsx)(n.h3,{id:"rich-text-operators",children:"Rich Text Operators"}),"\n",(0,s.jsx)(n.p,{children:"Doris provides a set of full\u2011text operators covering multiple retrieval patterns\u2014from keyword matching to advanced phrase queries."}),"\n",(0,s.jsx)(n.p,{children:"Major operators include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MATCH_ANY"})," / ",(0,s.jsx)(n.code,{children:"MATCH_ALL"}),": OR/AND multi\u2011term matching for general keyword search"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MATCH_PHRASE"}),": Exact phrase with configurable slop and order control"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MATCH_PHRASE_PREFIX"}),": Phrase prefix matching for autocomplete and incremental search"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MATCH_REGEXP"}),": Regex on tokenized terms for pattern\u2011based search"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Operators can be used standalone or composed via ",(0,s.jsx)(n.code,{children:"SEARCH()"})," to build complex logic. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Keyword search (any keyword match)\nSELECT * FROM docs WHERE content MATCH_ANY 'apache doris database';\n\n-- Require all keywords\nSELECT * FROM docs WHERE content MATCH_ALL 'real-time analytics OLAP';\n\n-- Exact phrase\nSELECT * FROM docs WHERE content MATCH_PHRASE 'inverted index';\n\n-- Phrase with slop (allow up to 2 words between terms)\nSELECT * FROM docs WHERE content MATCH_PHRASE 'machine learning ~2';\n\n-- Prefix matching\nSELECT * FROM docs WHERE content MATCH_PHRASE_PREFIX 'data ware';  -- matches \"data warehouse\", \"data warehousing\"\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/search-operators",children:"See all operators \u2192"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-analyzers-31",children:"Custom Analyzers (3.1+)"}),"\n",(0,s.jsxs)(n.p,{children:["Tokenization strategy directly affects both precision and recall. Since 3.1, Doris supports custom analyzers so you can define the analysis pipeline by combining ",(0,s.jsx)(n.code,{children:"char_filter"}),", ",(0,s.jsx)(n.code,{children:"tokenizer"}),", and ",(0,s.jsx)(n.code,{children:"token_filter"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Typical usage includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Custom character filtering for replacement/normalization before tokenization"}),"\n",(0,s.jsxs)(n.li,{children:["Choosing tokenizers such as ",(0,s.jsx)(n.code,{children:"standard"}),", ",(0,s.jsx)(n.code,{children:"ngram"}),", ",(0,s.jsx)(n.code,{children:"edge_ngram"}),", ",(0,s.jsx)(n.code,{children:"keyword"}),", ",(0,s.jsx)(n.code,{children:"icu"})," for different languages and text shapes"]}),"\n",(0,s.jsxs)(n.li,{children:["Applying token filters like ",(0,s.jsx)(n.code,{children:"lowercase"}),", ",(0,s.jsx)(n.code,{children:"word_delimiter"}),", ",(0,s.jsx)(n.code,{children:"ascii_folding"})," to normalize and refine tokens"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'-- Define a custom analyzer\nCREATE INVERTED INDEX ANALYZER IF NOT EXISTS keyword_lowercase\nPROPERTIES (\n  "tokenizer" = "keyword",\n  "token_filter" = "asciifolding, lowercase"\n);\n\n-- Use the analyzer in table creation\nCREATE TABLE docs (\n  id BIGINT,\n  content TEXT,\n  INDEX idx_content (content) USING INVERTED PROPERTIES (\n    "analyzer" = "keyword_lowercase",\n    "support_phrase" = "true"\n  )\n);\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/custom-analyzer",children:"Learn about custom analyzers \u2192"})}),"\n",(0,s.jsx)(n.h3,{id:"bm25-relevance-scoring-40",children:"BM25 Relevance Scoring (4.0+)"}),"\n",(0,s.jsxs)(n.p,{children:["Doris implements the ",(0,s.jsx)(n.strong,{children:"BM25 (Best Matching 25)"})," algorithm for text relevance scoring, enabling Top-N ranking of search results:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Probabilistic ranking based on term frequency, inverse document frequency, and document length"}),"\n",(0,s.jsx)(n.li,{children:"Robust handling of both long and short documents"}),"\n",(0,s.jsx)(n.li,{children:"Tunable parameters (k1, b) for ranking behavior"}),"\n",(0,s.jsx)(n.li,{children:"Seamless integration with Top-N queries"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage Pattern:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT id, title, score() AS relevance\nFROM docs\nWHERE content MATCH_ANY 'real-time OLAP analytics'\nORDER BY relevance DESC\nLIMIT 10;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How It Works:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"score()"})," computes BM25 score for each matched row"]}),"\n",(0,s.jsx)(n.li,{children:"Higher scores indicate stronger relevance to query terms"}),"\n",(0,s.jsxs)(n.li,{children:["Combine with ",(0,s.jsx)(n.code,{children:"ORDER BY"})," and ",(0,s.jsx)(n.code,{children:"LIMIT"})," for efficient Top-N retrieval"]}),"\n",(0,s.jsxs)(n.li,{children:["Works with all ",(0,s.jsx)(n.code,{children:"MATCH_*"})," operators and ",(0,s.jsx)(n.code,{children:"SEARCH()"})," function"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/scoring",children:"Learn more about scoring \u2192"})}),"\n",(0,s.jsx)(n.h3,{id:"search-function-unified-query-dsl-40",children:"SEARCH Function: Unified Query DSL (4.0+)"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SEARCH()"})," function provides a concise, expressive syntax for complex text queries:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Basic Syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SEARCH('column:term')                          -- Single term\nSEARCH('column:ANY(term1 term2)')              -- Any of the terms (OR)\nSEARCH('column:ALL(term1 term2)')              -- All terms (AND)\nSEARCH('column:EXACT(exact text)')             -- Case-sensitive exact match\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Boolean Composition:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SEARCH('title:apache AND category:database')\nSEARCH('title:doris OR title:clickhouse')\nSEARCH('tags:ANY(olap analytics) AND NOT status:deprecated')\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Multi-Column Queries:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SEARCH('title:search AND (content:engine OR tags:ANY(elasticsearch lucene))')\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Semi-Structured Data:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SEARCH('properties.user.name:alice')           -- Variant subcolumn access\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"With Scoring:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT id, title, score() AS relevance\nFROM docs\nWHERE SEARCH('title:Machine AND tags:ANY(database sql)')\nORDER BY relevance DESC\nLIMIT 20;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/search-function",children:"Complete SEARCH function guide \u2192"})}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-create-table-with-inverted-index",children:"Step 1: Create Table with Inverted Index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE docs (\n  id BIGINT,\n  title STRING,\n  content STRING,\n  category STRING,\n  tags ARRAY<STRING>,\n  created_at DATETIME,\n  -- Text search indexes\n  INDEX idx_title(title) USING INVERTED PROPERTIES ("parser" = "english"),\n  INDEX idx_content(content) USING INVERTED PROPERTIES ("parser" = "english", "support_phrase" = "true"),\n  INDEX idx_category(category) USING INVERTED,\n  INDEX idx_tags(tags) USING INVERTED\n)\nDUPLICATE KEY(id)\nDISTRIBUTED BY HASH(id) BUCKETS 10;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-run-text-queries",children:"Step 2: Run Text Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Simple keyword search\nSELECT * FROM docs WHERE content MATCH_ANY 'apache doris';\n\n-- Phrase search\nSELECT * FROM docs WHERE content MATCH_PHRASE 'full text search';\n\n-- Boolean query with SEARCH\nSELECT * FROM docs\nWHERE SEARCH('title:apache AND (category:database OR tags:ANY(sql nosql))');\n\n-- Relevance-based ranking\nSELECT id, title, score() AS relevance\nFROM docs\nWHERE content MATCH_ANY 'real-time analytics OLAP'\nORDER BY relevance DESC\nLIMIT 10;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"hybrid-search-text--vector",children:"Hybrid Search: Text + Vector"}),"\n",(0,s.jsx)(n.p,{children:"Combine text search with vector similarity for comprehensive retrieval in RAG applications:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Hybrid retrieval: semantic similarity + keyword filtering\nSELECT id, title, score() AS text_relevance\nFROM docs\nWHERE\n  -- Vector filter for semantic similarity\n  cosine_distance(embedding, [0.1, 0.2, ...]) < 0.3\n  -- Text filter for keyword constraints\n  AND SEARCH('title:search AND content:engine AND category:technology')\nORDER BY text_relevance DESC\nLIMIT 10;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"managing-inverted-indexes",children:"Managing Inverted Indexes"}),"\n",(0,s.jsx)(n.h3,{id:"creating-indexes",children:"Creating Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'-- At table creation\nCREATE TABLE t (\n  content STRING,\n  INDEX idx(content) USING INVERTED PROPERTIES ("parser" = "english")\n);\n\n-- On existing table\nCREATE INDEX idx_content ON docs(content) USING INVERTED PROPERTIES ("parser" = "chinese");\n\n-- Build index for existing data\nBUILD INDEX idx_content ON docs;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"deleting-indexes",children:"Deleting Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DROP INDEX idx_content ON docs;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"viewing-indexes",children:"Viewing Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SHOW CREATE TABLE docs;\nSHOW INDEX FROM docs;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/dev/table-design/index/inverted-index/overview",children:"Index management guide \u2192"})}),"\n",(0,s.jsx)(n.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsx)(n.h3,{id:"core-documentation",children:"Core Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/dev/table-design/index/inverted-index/overview",children:"Inverted Index Overview"})," \u2014 Architecture, indexing principles, and management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/search-operators",children:"Text Search Operators"})," \u2014 Complete operator reference and query acceleration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/search-function",children:"SEARCH Function"})," \u2014 Unified query DSL syntax and examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/scoring",children:"Relevance Scoring"})," \u2014 Relevance ranking algorithm and usage"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/dev/ai/text-search/custom-analyzer",children:"Custom Analyzers"})," \u2014 Build domain-specific tokenizers and filters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/dev/ai/vector-search",children:"Vector Search"})," \u2014 Semantic similarity search with embeddings"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return c},a:function(){return a}});var i=r(667294);let s={},t=i.createContext(s);function a(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);