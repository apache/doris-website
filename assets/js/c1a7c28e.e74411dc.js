"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["863485"],{970650:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>s,metadata:()=>r,assets:()=>l,toc:()=>c,contentTitle:()=>a});var r=JSON.parse('{"id":"table-design/row-store","title":"Hybrid Storage","description":"Hybrid Storage","source":"@site/versioned_docs/version-2.0/table-design/row-store.md","sourceDirName":"table-design","slug":"/table-design/row-store","permalink":"/docs/2.0/table-design/row-store","draft":false,"unlisted":false,"tags":[],"version":"2.0","frontMatter":{"title":"Hybrid Storage","language":"en"},"sidebar":"docs","previous":{"title":"Usage Notes","permalink":"/docs/2.0/table-design/data-model/tips"},"next":{"title":"Basic concepts","permalink":"/docs/2.0/table-design/data-partitioning/basic-concepts"}}'),o=t("785893"),i=t("250065");let s={title:"Hybrid Storage",language:"en"},a=void 0,l={},c=[{value:"Hybrid Storage",id:"hybrid-storage",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2},{value:"Notice",id:"notice",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"hybrid-storage",children:"Hybrid Storage"}),"\n",(0,o.jsxs)(n.p,{children:["Doris defaults to columnar storage, where each column is stored contiguously. Columnar storage offers excellent performance for analytical scenarios (such as aggregation, filtering, sorting, etc.), as it only reads the necessary columns, reducing unnecessary IO. However, in point query scenarios (such as ",(0,o.jsx)(n.code,{children:"SELECT *"}),"), all columns need to be read, requiring an IO operation for each column, which can lead to IOPS becoming a bottleneck, especially for wide tables with many columns (e.g., hundreds of columns)."]}),"\n",(0,o.jsxs)(n.p,{children:["To address the IOPS bottleneck in point query scenarios, starting from version 2.0.0, Doris supports hybrid storage. When users create tables, they can specify whether to enable row storage. With row storage enabled, each row only requires one IO operation for point queries (such as ",(0,o.jsx)(n.code,{children:"SELECT *"}),"), significantly improving performance."]}),"\n",(0,o.jsx)(n.p,{children:"The principle of row storage is that an additional column is added during storage. This column concatenates all the columns of the corresponding row and stores them using a special binary format."}),"\n",(0,o.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,o.jsx)(n.p,{children:"When creating a table, specify whether to enable row storage in the table's PROPERTIES."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'"store_row_column" = "true"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.p,{children:"The example below creates an 8-column table with row storage enabled."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'CREATE TABLE `tbl_point_query` (\n     `key` int(11) NULL,\n     `v1` decimal(27, 9) NULL,\n     `v2` varchar(30) NULL,\n     `v3` varchar(30) NULL,\n     `v4` date NULL,\n     `v5` datetime NULL,\n     `v6` float NULL,\n     `v7` datev2 NULL\n) ENGINE=OLAP\nUNIQUE KEY(`key`)\nCOMMENT \'OLAP\'\nDISTRIBUTED BY HASH(`key`) BUCKETS 1\nPROPERTIES (\n     "enable_unique_key_merge_on_write" = "true",\n     "light_schema_change" = "true",\n     "store_row_column" = "true"\n);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Query"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"SELECT * FROM tbl_point_query WHERE key = 100;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more information on point query usage, please refer to ",(0,o.jsx)(n.a,{href:"../query-acceleration/high-concurrent-point-query",children:"High-Concurrent Point Query"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"notice",children:"Notice"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Enabling row storage will increase the storage space used. The increase in storage space is related to the data characteristics and is generally 2 to 10 times the size of the original table. The exact space usage needs to be tested with actual data."}),"\n",(0,o.jsxs)(n.li,{children:["Alter the ",(0,o.jsx)(n.code,{children:"store_row_column"})," is not supported in 2.0"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return s}});var r=t(667294);let o={},i=r.createContext(o);function s(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);