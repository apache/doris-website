"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["683133"],{729110:function(e,n,t){t.r(n),t.d(n,{default:()=>h,frontMatter:()=>i,metadata:()=>s,assets:()=>c,toc:()=>o,contentTitle:()=>r});var s=JSON.parse('{"id":"sql-manual/sql-statements/data-modification/DML/MERGE-INTO","title":"MERGE-INTO","description":"Description","source":"@site/docs/sql-manual/sql-statements/data-modification/DML/MERGE-INTO.md","sourceDirName":"sql-manual/sql-statements/data-modification/DML","slug":"/sql-manual/sql-statements/data-modification/DML/MERGE-INTO","permalink":"/docs/dev/sql-manual/sql-statements/data-modification/DML/MERGE-INTO","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"MERGE-INTO","language":"en"},"sidebar":"docs","previous":{"title":"UPDATE","permalink":"/docs/dev/sql-manual/sql-statements/data-modification/DML/UPDATE"},"next":{"title":"DELETE","permalink":"/docs/dev/sql-manual/sql-statements/data-modification/DML/DELETE"}}'),a=t("785893"),l=t("250065");let i={title:"MERGE-INTO",language:"en"},r=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"matchedClause (for updates or deletes)",id:"matchedclause-for-updates-or-deletes",level:3},{value:"notMatchedClause (for inserts)",id:"notmatchedclause-for-inserts",level:3},{value:"Access Control Requirements",id:"access-control-requirements",level:2},{value:"Usage Note",id:"usage-note",level:2},{value:"Duplicate join behavior\xb6",id:"duplicate-join-behavior",level:3},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"Inserts, updates, and deletes values in a table that are based on values in a second table or a subquery. Merging can be useful if the second table is a change log that contains new rows (to be inserted), modified rows (to be updated), or marked rows (to be deleted) in the target table."}),"\n",(0,a.jsx)(n.p,{children:"The command supports semantics for handling the following cases:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Values that match (for updates and deletes)."}),"\n",(0,a.jsx)(n.li,{children:"Values that don\u2019t match (for inserts)."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The target table for this command must be a UNIQUE KEY model table."}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"MERGE INTO <target_table>\n    USING <source>\n    ON <join_expr>\n    { matchedClause | notMatchedClause } [ ... ]\n"})}),"\n",(0,a.jsx)(n.p,{children:"where"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"matchedClause ::=\n    WHEN MATCHED\n        [ AND <case_predicate> ]\n        THEN { UPDATE SET <col_name> = <expr> [ , <col_name> = <expr> ... ] | DELETE } \n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"notMatchedClause ::=\n    WHEN NOT MATCHED\n        [ AND <case_predicate> ]\n        THEN INSERT [ ( <col_name> [ , ... ] ) ] VALUES ( <expr> [ , ... ] )\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"<target_table>"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Specifies the table to merge."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"<source>"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Specifies the table or subquery to join with the target table."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"<join_expr>"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Specifies the expression on which to join the target table and source."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"matchedclause-for-updates-or-deletes",children:"matchedClause (for updates or deletes)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"WHEN MATCHED ... AND <case_predicate>"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Optionally specifies an expression which, when true, causes the matching case to be executed.",(0,a.jsx)(n.br,{}),"\nDefault: No value (matching case is always executed)"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"WHEN MATCHED ... THEN { UPDATE SET ... | DELETE }"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Specifies the action to perform when the values match."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"SET col_name = expr [ , col_name = expr ... ]"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Updates the specified column in the target table by using the corresponding expression for the new column value (can refer to both the target and source relations).",(0,a.jsx)(n.br,{}),"\nIn a single SET subclause, you can specify multiple columns to update."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"DELETE"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Deletes the rows in the target table when they match the source."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"notmatchedclause-for-inserts",children:"notMatchedClause (for inserts)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"WHEN NOT MATCHED ... AND <case_predicate>"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Optionally specifies an expression which, when true, causes the not-matching case to be executed.\nDefault: No value (not-matching case is always executed)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"WHEN NOT MATCHED ... THEN INSERT [ ( col_name [ , ... ] ) ] VALUES ( expr [ , ... ] )"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Specifies the action to perform when the values don\u2019t match."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"( col_name [ , ... ] )"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Optionally specifies one or more columns in the target table to be inserted with values from the source.\nDefault: No value (all columns in the target table are inserted)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"VALUES ( expr [ , ... ] )"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Specifies the corresponding expressions for the inserted column values (must refer to the source relations)."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"access-control-requirements",children:"Access Control Requirements"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/docs/dev/admin-manual/auth/authentication-and-authorization",children:"user"})," executing this SQL command must have at least the following ",(0,a.jsx)(n.a,{href:"/docs/dev/admin-manual/auth/authentication-and-authorization",children:"privileges"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{style:{textAlign:"left"},children:"Privilege"}),(0,a.jsx)(n.th,{style:{textAlign:"left"},children:"Object"}),(0,a.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{style:{textAlign:"left"},children:"SELECT_PRIV"}),(0,a.jsx)(n.td,{style:{textAlign:"left"},children:"target table and source"}),(0,a.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{style:{textAlign:"left"},children:"LOAD_PRIV"}),(0,a.jsx)(n.td,{style:{textAlign:"left"},children:"target table"}),(0,a.jsx)(n.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"usage-note",children:"Usage Note"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The target table for this command must be a UNIQUE KEY model table."}),"\n",(0,a.jsx)(n.li,{children:"A single MERGE statement can include multiple matching and not-matching clauses (that is, WHEN MATCHED ... and WHEN NOT MATCHED ...)."}),"\n",(0,a.jsx)(n.li,{children:"Any matching or not-matching clause that omits the AND subclause (default behavior) must be the last of its clause type in the statement (for example, a WHEN MATCHED ... clause can\u2019t be followed by a WHEN MATCHED AND ... clause). Doing so results in an unreachable case, which returns an error."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"duplicate-join-behavior",children:"Duplicate join behavior\xb6"}),"\n",(0,a.jsx)(n.p,{children:"Currently, Doris does not detect whether duplicate join rows occur. If they do, the behavior is undefined."}),"\n",(0,a.jsx)(n.p,{children:"If, after the join, multiple operations (such as update, delete, or insert) are applied to the same target table row simultaneously, the behavior is similar to that of an INSERT statement: if a Sequence column exists, the final written data is determined by the value of the Sequence column; otherwise, one of the rows is written arbitrarily."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"The following example performs a basic merge operation, updating data in the target table using values from the source table. First, create and load two tables:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE `merge_into_source_table` (\n      `c1` int NULL,\n      `c2` varchar(255) NULL\n    ) ENGINE=OLAP\n    PROPERTIES (\n      "replication_allocation" = "tag.location.default: 1"\n    );\n\nCREATE TABLE `merge_into_target_base_table` (\n      `c1` int NULL,\n      `c2` varchar(255) NULL\n    ) ENGINE=OLAP\n    UNIQUE KEY(`c1`)\n    DISTRIBUTED BY HASH(`c1`)\n    PROPERTIES (\n      "replication_allocation" = "tag.location.default: 1"\n    );\n\nINSERT INTO merge_into_source_table VALUES (1, 12), (2, 22), (3, 33);\nINSERT INTO merge_into_target_base_table VALUES (1, 1), (2, 10);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Display the values in the tables:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM merge_into_source_table;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"+----+----+\n| c1 | c2 |\n+----+----+\n| 1  | 12 |\n| 2  | 22 |\n| 3  | 33 |\n+----+----+\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM merge_into_target_base_table;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"+----+----+\n| c1 | c2 |\n+----+----+\n| 2  | 10 |\n| 1  | 1  |\n+----+----+\n"})}),"\n",(0,a.jsx)(n.p,{children:"Run the MERGE statement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"WITH tmp AS (SELECT * FROM merge_into_source_table)\nMERGE INTO merge_into_target_base_table t1\n    USING tmp t2\n    ON t1.c1 = t2.c1\n    WHEN MATCHED AND t1.c2 = 10 THEN DELETE\n    WHEN MATCHED THEN UPDATE SET c2 = 10\n    WHEN NOT MATCHED THEN INSERT VALUES(t2.c1, t2.c2)\n"})}),"\n",(0,a.jsx)(n.p,{children:"Display the new values in the target table (the source table is unchanged):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM merge_into_target_base_table;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"+----+----+\n| c1 | c2 |\n+----+----+\n| 3  | 33 |\n| 1  | 10 |\n+----+----+\n"})})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return i}});var s=t(667294);let a={},l=s.createContext(a);function i(e){let n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);