"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["79172"],{790919:function(n,e,s){s.r(e),s.d(e,{default:()=>d,frontMatter:()=>r,metadata:()=>t,assets:()=>a,toc:()=>c,contentTitle:()=>o});var t=JSON.parse('{"id":"sql-manual/sql-functions/scalar-functions/spatial-functions/st-touches","title":"ST_TOUCHES","description":"Description","source":"@site/docs/sql-manual/sql-functions/scalar-functions/spatial-functions/st-touches.md","sourceDirName":"sql-manual/sql-functions/scalar-functions/spatial-functions","slug":"/sql-manual/sql-functions/scalar-functions/spatial-functions/st-touches","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-touches","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ST_TOUCHES","language":"en"},"sidebar":"docs","previous":{"title":"ST_POLYGON","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-polygon"},"next":{"title":"ST_X","permalink":"/docs/dev/sql-manual/sql-functions/scalar-functions/spatial-functions/st-x"}}'),i=s("785893"),l=s("250065");let r={title:"ST_TOUCHES",language:"en"},o=void 0,a={},c=[{value:"Description",id:"description",level:2},{value:"Sytax",id:"sytax",level:2},{value:"Parameter",id:"parameter",level:2},{value:"Return value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function T(n){let e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(e.p,{children:"Determine whether two geometric shapes have boundary contact only (i.e., there are common points on the boundaries, but no internal intersection). Specifically:"}),"\n",(0,i.jsx)(e.p,{children:"Returns 1 if the boundaries of the two shapes have at least one common point, and their interiors are completely non-intersecting (no overlapping areas).\nReturns 0 if there are no common points on the boundaries, or if there is an internal intersection (even if the boundaries are in contact)."}),"\n",(0,i.jsx)(e.p,{children:'This function is used to distinguish between "boundary-only contact" and "internal intersection" scenarios, such as shared edges of adjacent polygons (boundary-only contact) or tangent points between a line and a polygon (boundary-only contact).'}),"\n",(0,i.jsx)(e.h2,{id:"sytax",children:"Sytax"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"ST_TOUCHES( <shape1>, <shape2>)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"parameter",children:"Parameter"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Parameter"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"<shape1>"})}),(0,i.jsx)(e.td,{children:"The first geometric shape used to determine contact, supporting types such as Point, LineString, Polygon, Circle, etc."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"<shape2>"})}),(0,i.jsx)(e.td,{children:"The second geometric shape used to determine contact, supporting types such as Point, LineString, Polygon, Circle, etc."})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"return-value",children:"Return value"}),"\n",(0,i.jsx)(e.p,{children:"Returns 1: shape1 is in contact with shape2.\nReturns 0: shape1 is not in contact with shape2."}),"\n",(0,i.jsx)(e.p,{children:"ST_TOUCHES has the following edge cases:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"If any input parameter is NULL, returns NULL."}),"\n",(0,i.jsx)(e.li,{children:"If the input geometric shape is invalid, returns NULL."}),"\n",(0,i.jsx)(e.li,{children:"If the input is an empty geometric object (e.g., POINT EMPTY), returns NULL."}),"\n",(0,i.jsx)(e.li,{children:"If one shape is completely contained within another (with internal intersection), returns 0 even if their boundaries are in contact."}),"\n",(0,i.jsx)(e.li,{children:'When a point is in contact with the boundary of a shape (a point has no interior), returns 1 (the "boundary" of a point is itself, which coincides with the shape\'s boundary with no internal intersection).\u3002'}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(e.p,{children:"Point on polygon boundary"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(0, 5));\n+--------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(0, 5)) |\n+--------------------------------------------------------------------------------------+\n|                                                                                    1 |\n+--------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Point not on polygon boundary (inside the geometric shape)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(5, 5));\n+--------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Point(5, 5)) |\n+--------------------------------------------------------------------------------------+\n|                                                                                    0 |\n+--------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Lines touch at endpoints"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Linefromtext("LINESTRING (0 0, 2 2)"),  ST_Linefromtext("LINESTRING (2 2, 4 0)"));\n+---------------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Linefromtext("LINESTRING (0 0, 2 2)"),  ST_Linefromtext("LINESTRING (2 2, 4 0)")) |\n+---------------------------------------------------------------------------------------------------+\n|                                                                                                 1 |\n+---------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Lines intersect internally (not boundary contact, returns 0)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Linefromtext("LINESTRING (0 0, 10 10)"),  ST_Linefromtext("LINESTRING (0 10, 10 0)"));\n+-------------------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Linefromtext("LINESTRING (0 0, 10 10)"),  ST_Linefromtext("LINESTRING (0 10, 10 0)")) |\n+-------------------------------------------------------------------------------------------------------+\n|                                                                                                     0 |\n+-------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Line is tangent to polygon boundary"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'\nmysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (10 5, 15 5)"));\n+------------------------------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (10 5, 15 5)")) |\n+------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                1 |\n+------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Line passes through the interior of the polygon (internal intersection, returns 0)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'\n\nmysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (5 5, 15 5)"));\n+-----------------------------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Linefromtext("LINESTRING (5 5, 15 5)")) |\n+-----------------------------------------------------------------------------------------------------------------+\n|                                                                                                               0 |\n+-----------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Polygons share a boundary (boundary-only contact, returns 1)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Polygon("POLYGON ((5 0, 10 0, 10 5, 5 5, 5 0))"));\n+-----------------------------------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0))"),  ST_Polygon("POLYGON ((5 0, 10 0, 10 5, 5 5, 5 0))")) |\n+-----------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                     1 |\n+-----------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Polygons partially overlap (internal intersection, returns 0)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((5 5, 15 5, 15 15, 5 15, 5 5))"));\n+-----------------------------------------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Polygon("POLYGON ((5 5, 15 5, 15 15, 5 15, 5 5))")) |\n+-----------------------------------------------------------------------------------------------------------------------------+\n|                                                                                                                           0 |\n+-----------------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Empty shape and polygon (no contact, returns 0)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_GeometryFromText("POINT EMPTY"))\n    -> ;\n+----------------------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_GeometryFromText("POINT EMPTY")) |\n+----------------------------------------------------------------------------------------------------------+\n|                                                                                                     NULL |\n+----------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Invalid self-intersecting polygon (returns NULL)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'\nmysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 1 1, 0 1, 1 0, 0 0))"),ST_Point(0.5, 0.5));\n+------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 1 1, 0 1, 1 0, 0 0))"),ST_Point(0.5, 0.5)) |\n+------------------------------------------------------------------------------------+\n|                                                                               NULL |\n+------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Parameter is NULL (returns NULL)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT ST_TOUCHES(NULL, ST_Point(5, 5));\n+----------------------------------+\n| ST_TOUCHES(NULL, ST_Point(5, 5)) |\n+----------------------------------+\n|                             NULL |\n+----------------------------------+\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), NULL);\n+-------------------------------------------------------------------------+\n| ST_TOUCHES(ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"), NULL) |\n+-------------------------------------------------------------------------+\n|                                                                    NULL |\n+-------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Circle is tangent to line"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Linefromtext("LINESTRING (-10 5, 10 5)"));\n+--------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Linefromtext("LINESTRING (-10 5, 10 5)")) |\n+--------------------------------------------------------------------------------+\n|                                                                              1 |\n+--------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Point intersects circle boundary"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"\nmysql> SELECT ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Point(5, 0));\n+---------------------------------------------------+\n| ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Point(5, 0)) |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\n"})}),"\n",(0,i.jsx)(e.p,{children:"Two circles are tangent"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Circle(10, 0, 5));\n+--------------------------------------------------------+\n| ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Circle(10, 0, 5)) |\n+--------------------------------------------------------+\n|                                                      1 |\n+--------------------------------------------------------+\n"})}),"\n",(0,i.jsx)(e.p,{children:"Point is inside circle (not tangent)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"mysql> SELECT ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Point(4, 0));\n+---------------------------------------------------+\n| ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Point(4, 0)) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n"})}),"\n",(0,i.jsx)(e.p,{children:"Line intersects circle, returns 0"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Linefromtext("LINESTRING (-10 0, 10 0)"));\n+--------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Circle(0, 0, 5),  ST_Linefromtext("LINESTRING (-10 0, 10 0)")) |\n+--------------------------------------------------------------------------------+\n|                                                                              0 |\n+--------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Circle is tangent to polygon"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(15, 5, 5));\n+-------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(15, 5, 5)) |\n+-------------------------------------------------------------------------------------------+\n|                                                                                         1 |\n+-------------------------------------------------------------------------------------------+\n'})}),"\n",(0,i.jsx)(e.p,{children:"Circle intersects polygon, returns 0"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'mysql> SELECT ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(8, 5, 3));\n+------------------------------------------------------------------------------------------+\n| ST_TOUCHES(  ST_Polygon("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))"),  ST_Circle(8, 5, 3)) |\n+------------------------------------------------------------------------------------------+\n|                                                                                        0 |\n+------------------------------------------------------------------------------------------+\n'})})]})}function d(n={}){let{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(T,{...n})}):T(n)}},250065:function(n,e,s){s.d(e,{Z:function(){return o},a:function(){return r}});var t=s(667294);let i={},l=t.createContext(i);function r(n){let e=t.useContext(l);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);